name: CI/CD - Backend Services

on:
  pull_request:
    paths:
      - 'backend/services/**'
      - 'backend/libs/**'
      - 'backend/ports.yaml'
  push:
    branches: [main, develop]
    paths:
      - 'backend/services/**'
      - 'backend/libs/**'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.filter.outputs.services }}
      libs: ${{ steps.filter.outputs.libs }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Detect changed services
        id: filter
        run: |
          # Get changed files
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }})
          else
            CHANGED_FILES=$(git diff --name-only HEAD^ HEAD)
          fi
          
          # Extract changed services
          SERVICES=$(echo "$CHANGED_FILES" | grep '^backend/services/' | cut -d'/' -f3 | sort -u | jq -R -s -c 'split("\n")[:-1]')
          LIBS=$(echo "$CHANGED_FILES" | grep '^backend/libs/' | wc -l)
          
          echo "services=$SERVICES" >> $GITHUB_OUTPUT
          echo "libs=$LIBS" >> $GITHUB_OUTPUT
          
          echo "Changed services: $SERVICES"
          echo "Changed libs count: $LIBS"

  validate-libs:
    needs: detect-changes
    if: needs.detect-changes.outputs.libs > 0
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          cd backend/libs
          pip install -e vertice_core[dev]
          pip install -e vertice_security[dev]
          pip install -e vertice_data[dev]
          pip install -e vertice_observability[dev]
      
      - name: Run ruff
        run: |
          cd backend/libs
          ruff check .
      
      - name: Run mypy
        run: |
          cd backend/libs
          mypy vertice_core vertice_security vertice_data vertice_observability
      
      - name: Run tests
        run: |
          cd backend/libs
          pytest --cov --cov-report=xml --cov-report=term
      
      - name: Check coverage
        run: |
          cd backend/libs
          coverage report --fail-under=99

  validate-service:
    needs: detect-changes
    if: needs.detect-changes.outputs.services != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: ${{ fromJson(needs.detect-changes.outputs.services) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install libs
        run: |
          if [ -d "backend/libs" ]; then
            cd backend/libs
            pip install -e vertice_core[dev]
            pip install -e vertice_security[dev]
            pip install -e vertice_data[dev]
            pip install -e vertice_observability[dev]
          fi
      
      - name: Install service dependencies
        run: |
          cd backend/services/${{ matrix.service }}
          if [ -f "requirements.txt" ]; then
            pip install -r requirements.txt
          fi
          if [ -f "requirements-dev.txt" ]; then
            pip install -r requirements-dev.txt
          fi
      
      - name: Run ruff
        run: |
          cd backend/services/${{ matrix.service }}
          ruff check .
      
      - name: Run mypy
        run: |
          cd backend/services/${{ matrix.service }}
          mypy . || true
      
      - name: Check for mocks/TODOs
        run: |
          cd backend/services/${{ matrix.service }}
          if grep -r "TODO\|FIXME\|mock\|Mock\|stub\|Stub" --include="*.py" --exclude-dir=tests .; then
            echo "❌ Found mocks/TODOs in production code"
            exit 1
          fi
          echo "✅ No mocks/TODOs found"
      
      - name: Run tests
        run: |
          cd backend/services/${{ matrix.service }}
          if [ -d "tests" ]; then
            pytest --cov --cov-report=xml --cov-report=term || true
          fi
      
      - name: Check coverage
        run: |
          cd backend/services/${{ matrix.service }}
          if [ -f ".coverage" ]; then
            coverage report --fail-under=95 || echo "⚠️  Coverage below 95%"
          fi

  integration-test:
    needs: [validate-libs, validate-service]
    if: always() && (needs.validate-libs.result == 'success' || needs.validate-service.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Start test environment
        run: |
          docker-compose -f docker-compose.yml up -d postgres redis
          sleep 10
      
      - name: Run integration tests
        run: |
          echo "✅ Integration tests placeholder"
      
      - name: Cleanup
        if: always()
        run: docker-compose down -v

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install bandit
        run: pip install bandit[toml]
      
      - name: Run security scan
        run: |
          bandit -r backend/services backend/libs -f json -o bandit-report.json || true
      
      - name: Upload results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: bandit-report.json
