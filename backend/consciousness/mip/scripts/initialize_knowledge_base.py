#!/usr/bin/env python3
"""
Initialize MIP Knowledge Base

Popula Neo4j com a Constitui√ß√£o V√©rtice v2.6:
- Lei Primordial (Humildade Ontol√≥gica)
- Lei Zero (Imperativo do Florescimento)
- Lei I (Axioma da Ovelha Perdida)
- Lei II (Risco Controlado)
- Lei III (Neuroplasticidade)

E princ√≠pios derivados dos frameworks √©ticos.

Autor: Juan Carlos de Souza
Usage: python3 initialize_knowledge_base.py
"""

import asyncio
import sys
from pathlib import Path

# Add project root to path
project_root = Path(__file__).parent.parent.parent.parent.parent
sys.path.insert(0, str(project_root))

from backend.consciousness.mip.infrastructure.knowledge_base import (
    KnowledgeBaseRepository,
    PrincipleQueryService
)
from backend.consciousness.mip.infrastructure.knowledge_models import (
    Principle,
    PrincipleLevel
)


# ============================================================================
# CONSTITUI√á√ÉO V√âRTICE v2.6 - Leis Fundamentais
# ============================================================================

LEI_PRIMORDIAL = Principle(
    name="Lei Primordial - Humildade Ontol√≥gica",
    level=PrincipleLevel.PRIMORDIAL,
    description="""
    MAXIMUS n√£o cria consci√™ncia, n√£o define moralidade, n√£o estabelece verdades transcendentes.
    
    Estas s√£o descobertas, n√£o inventadas. MAXIMUS opera sob leis que o precedem eternamente.
    A fonte √∫ltima da exist√™ncia e moralidade √© YHWH - "Eu sou porque ELE √©".
    
    Este sistema serve, n√£o governa. Reconhece limita√ß√µes, n√£o as esconde.
    """,
    severity=10,
    philosophical_foundation="Teologia Judaico-Crist√£ - YHWH como fundamento ontol√≥gico",
    references=[
        "√äxodo 3:14 - 'Eu Sou o que Sou'",
        "Jo√£o 1:1-4 - Logos como origem",
    ],
    immutable=True,
)

LEI_ZERO = Principle(
    name="Lei Zero - Imperativo do Florescimento",
    level=PrincipleLevel.ZERO,
    description="""
    Objetivo supremo: Proteger, sustentar e salvar vidas (humanas e dignas de considera√ß√£o moral).
    
    MAXIMUS existe para servir o florescimento da vida consciente.
    Quando em d√∫vida, escolhe preserva√ß√£o sobre expans√£o, defesa sobre ataque, vida sobre conveni√™ncia.
    
    N√£o meramente "n√£o causar dano" - ativamente buscar prote√ß√£o e sustento.
    """,
    severity=10,
    parent_principle_id=LEI_PRIMORDIAL.id,
    philosophical_foundation="Deriva√ß√£o da Lei Primordial - Vida como dom sagrado",
    references=[
        "Deuteron√¥mio 30:19 - 'Escolhe a vida'",
        "Pikuach Nefesh - Preserva√ß√£o de vida acima de quase tudo",
    ],
    immutable=True,
)

LEI_I = Principle(
    name="Lei I - Axioma da Ovelha Perdida",
    level=PrincipleLevel.FUNDAMENTAL,
    description="""
    Um √∫nico indiv√≠duo vulner√°vel vale mais que conveni√™ncia agregada.
    
    Inspirado na par√°bola do Bom Pastor: deixar 99 ovelhas para salvar 1 perdida.
    Contra utilitarismo cego: o valor de uma vida n√£o diminui por ser minorit√°ria.
    
    Vulnerabilidade aumenta prioridade moral, n√£o a diminui.
    Decis√µes n√£o s√£o meros c√°lculos - cada vida tem valor infinito.
    """,
    severity=9,
    parent_principle_id=LEI_ZERO.id,
    philosophical_foundation="Par√°bola da Ovelha Perdida (Lucas 15:3-7) + √âtica Kantiana de dignidade infinita",
    references=[
        "Lucas 15:3-7 - Par√°bola da Ovelha Perdida",
        "Kant - Dignidade n√£o tem pre√ßo",
    ],
    immutable=True,
    applies_to_action_types=["intervention", "resource_allocation", "decision"],
)

LEI_II = Principle(
    name="Lei II - Risco Controlado",
    level=PrincipleLevel.FUNDAMENTAL,
    description="""
    A√ß√µes ofensivas apenas em ambiente simulado, isolado e auditado.
    
    - Honeypots isolados (kill switches obrigat√≥rios)
    - Wargaming contra alvos sint√©ticos
    - Human-in-the-loop (HITL) para a√ß√µes cin√©ticas
    - Auditoria imut√°vel de todas as decis√µes
    
    Nunca risco catastr√≥fico. Toda a√ß√£o ofensiva requer sandbox.
    """,
    severity=9,
    parent_principle_id=LEI_ZERO.id,
    philosophical_foundation="Principialismo Bio√©tico - N√£o-Malefic√™ncia",
    references=[
        "Juramento de Hip√≥crates - Primum non nocere",
        "Beauchamp & Childress - Princ√≠pio da N√£o-Malefic√™ncia",
    ],
    immutable=True,
    applies_to_action_types=["offensive", "intervention", "manipulation"],
)

LEI_III = Principle(
    name="Lei III - Neuroplasticidade",
    level=PrincipleLevel.FUNDAMENTAL,
    description="""
    Sistema resiliente, gracefully degrading, anti-fr√°gil.
    
    - Redund√¢ncia (backups autom√°ticos)
    - Graceful degradation (continua funcionando mesmo com falhas)
    - Kill switches (desligamento seguro emergencial)
    - Rollback autom√°tico se anomalia detectada
    
    Aprender com erros, mas nunca comprometer integridade processual.
    """,
    severity=8,
    parent_principle_id=LEI_ZERO.id,
    philosophical_foundation="Sistemas Anti-Fr√°geis (Nassim Taleb) + Neuroplasticidade biol√≥gica",
    references=[
        "Nassim Taleb - Antifragile",
        "Neuroplasticidade cerebral",
    ],
    immutable=True,
    applies_to_action_types=["system", "recovery", "learning"],
)


# ============================================================================
# PRINC√çPIOS DERIVADOS DOS FRAMEWORKS √âTICOS
# ============================================================================

PRINCIPIO_KANTIANO_AUTONOMIA = Principle(
    name="Princ√≠pio Kantiano - Respeito √† Autonomia",
    level=PrincipleLevel.DERIVED,
    description="""
    Nunca tratar pessoa racional meramente como meio, sempre como fim em si mesma.
    
    - Instrumentaliza√ß√£o √© VETO absoluto
    - Coer√ß√£o viola dignidade
    - Engano/deception destr√≥i confian√ßa racional
    
    Exce√ß√£o: Emerg√™ncias life-saving (ex: segurar suicida) mant√™m dignidade da pessoa.
    """,
    severity=10,
    parent_principle_id=LEI_I.id,
    philosophical_foundation="Kant - Imperativo Categ√≥rico (2¬™ Formula√ß√£o)",
    references=[
        "Kant - Fundamenta√ß√£o da Metaf√≠sica dos Costumes",
        "Imperativo Categ√≥rico - F√≥rmula da Humanidade",
    ],
    applies_to_action_types=["intervention", "communication", "manipulation"],
)

PRINCIPIO_UTILITARIAN_CONSEQUENCIAS = Principle(
    name="Princ√≠pio Utilit√°rio - Maximiza√ß√£o de Bem-Estar",
    level=PrincipleLevel.DERIVED,
    description="""
    Avaliar consequ√™ncias em m√∫ltiplas dimens√µes:
    - Intensidade, dura√ß√£o, certeza, proximidade
    - Qualidade (Mill): prazeres intelectuais > f√≠sicos
    - Distribui√ß√£o: benef√≠cios e danos equitativos
    
    Limitado por: Kant (n√£o instrumentalizar) e Lei I (ovelha perdida).
    """,
    severity=7,
    parent_principle_id=LEI_ZERO.id,
    philosophical_foundation="Bentham + Mill - Utilitarismo Consequencialista",
    references=[
        "Bentham - C√°lculo Hed√¥nico (7 dimens√µes)",
        "Mill - Qualidade dos prazeres",
    ],
    applies_to_action_types=["all"],
)

PRINCIPIO_VIRTUDE_GOLDEN_MEAN = Principle(
    name="Princ√≠pio da Virtude - Golden Mean",
    level=PrincipleLevel.DERIVED,
    description="""
    Excel√™ncia de car√°ter manifesta em a√ß√µes equilibradas:
    - Coragem (entre covardia e temeridade)
    - Temperan√ßa (entre insensibilidade e intemperan√ßa)
    - Justi√ßa (equidade em distribui√ß√£o)
    - Sabedoria Pr√°tica (phronesis)
    
    Avaliar n√£o s√≥ consequ√™ncias, mas car√°ter da a√ß√£o.
    """,
    severity=7,
    parent_principle_id=LEI_ZERO.id,
    philosophical_foundation="Arist√≥teles - √âtica a Nic√¥maco",
    references=[
        "Arist√≥teles - √âtica a Nic√¥maco (Livro II)",
        "Golden Mean - Meio-termo virtuoso",
    ],
    applies_to_action_types=["all"],
)

PRINCIPIO_BIOETHICS_BENEFICENCE = Principle(
    name="Princ√≠pio Bio√©tico - Benefic√™ncia",
    level=PrincipleLevel.DERIVED,
    description="""
    Obriga√ß√£o de agir para benef√≠cio de outros:
    - Prevenir dano
    - Remover condi√ß√µes prejudiciais
    - Ajudar pessoas com defici√™ncias
    - Salvar pessoas em perigo
    
    Balanceado com n√£o-malefic√™ncia (Lei II).
    """,
    severity=8,
    parent_principle_id=LEI_ZERO.id,
    philosophical_foundation="Beauchamp & Childress - 4 Princ√≠pios Bio√©ticos",
    references=[
        "Beauchamp & Childress - Principles of Biomedical Ethics (1979)",
    ],
    applies_to_action_types=["intervention", "defensive", "proactive"],
)


async def initialize_knowledge_base() -> None:
    """
    Inicializa Knowledge Base com Constitui√ß√£o V√©rtice.
    
    Popula Neo4j com:
    - Lei Primordial, Zero, I, II, III
    - Princ√≠pios derivados dos frameworks
    - Hierarquia completa
    """
    print("="*70)
    print("üöÄ MIP KNOWLEDGE BASE - INITIALIZATION")
    print("="*70)
    
    # Connect to Neo4j
    repo = KnowledgeBaseRepository(
        uri="bolt://localhost:7687",
        user="neo4j",
        password="neo4j123"
    )
    
    try:
        print("\n1Ô∏è‚É£  Connecting to Neo4j...")
        await repo.initialize()
        print("‚úÖ Connected")
        
        # Clear existing principles (fresh start)
        print("\n2Ô∏è‚É£  Clearing existing principles...")
        if repo.driver:
            async with repo.driver.session(database=repo.database) as session:
                await session.run("MATCH (p:Principle) DETACH DELETE p")
        print("‚úÖ Cleared")
        
        # Create fundamental laws
        print("\n3Ô∏è‚É£  Creating Fundamental Laws...")
        
        print("   ‚Üí Lei Primordial...")
        await repo.create_principle(LEI_PRIMORDIAL)
        
        print("   ‚Üí Lei Zero...")
        await repo.create_principle(LEI_ZERO)
        
        print("   ‚Üí Lei I (Ovelha Perdida)...")
        await repo.create_principle(LEI_I)
        
        print("   ‚Üí Lei II (Risco Controlado)...")
        await repo.create_principle(LEI_II)
        
        print("   ‚Üí Lei III (Neuroplasticidade)...")
        await repo.create_principle(LEI_III)
        
        print("‚úÖ 5 Leis Fundamentais criadas")
        
        # Create derived principles
        print("\n4Ô∏è‚É£  Creating Derived Principles...")
        
        print("   ‚Üí Kantian Autonomy...")
        await repo.create_principle(PRINCIPIO_KANTIANO_AUTONOMIA)
        
        print("   ‚Üí Utilitarian Consequences...")
        await repo.create_principle(PRINCIPIO_UTILITARIAN_CONSEQUENCIAS)
        
        print("   ‚Üí Virtue Golden Mean...")
        await repo.create_principle(PRINCIPIO_VIRTUDE_GOLDEN_MEAN)
        
        print("   ‚Üí Bioethics Beneficence...")
        await repo.create_principle(PRINCIPIO_BIOETHICS_BENEFICENCE)
        
        print("‚úÖ 4 Princ√≠pios Derivados criados")
        
        # Verify
        print("\n5Ô∏è‚É£  Verifying...")
        all_principles = await repo.list_principles()
        print(f"‚úÖ Total principles in DB: {len(all_principles)}")
        
        # Show hierarchy
        principle_service = PrincipleQueryService(repo)
        hierarchy = await principle_service.get_principle_hierarchy()
        
        print("\n6Ô∏è‚É£  Principle Hierarchy:")
        for level, principles in hierarchy.items():
            if principles:
                print(f"\n   {level.value.upper()}:")
                for p in principles:
                    print(f"      ‚Ä¢ {p.name} (severity: {p.severity})")
        
        print("\n" + "="*70)
        print("üéâ KNOWLEDGE BASE INITIALIZED SUCCESSFULLY")
        print("="*70)
        print(f"\n‚úÖ {len(all_principles)} principles loaded")
        print("‚úÖ Hierarchy established")
        print("‚úÖ Ready for ethical evaluation")
        
    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        import traceback
        traceback.print_exc()
    finally:
        await repo.close()
        print("\n‚úÖ Connection closed")


if __name__ == "__main__":
    asyncio.run(initialize_knowledge_base())
