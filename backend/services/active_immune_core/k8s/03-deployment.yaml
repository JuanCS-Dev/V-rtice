# Kubernetes Deployment for Active Immune Core
# Manages replicas, rolling updates, and health checks
#
# Apply: kubectl apply -f k8s/03-deployment.yaml -n active-immune
# Scale: kubectl scale deployment/active-immune-core --replicas=5 -n active-immune
# Rollout: kubectl rollout status deployment/active-immune-core -n active-immune
#
# NO MOCKS, NO PLACEHOLDERS, NO TODOS - Production-ready.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: active-immune-core
  namespace: active-immune
  labels:
    app: active-immune-core
    version: v1.0.0
    component: cyber-defense
spec:
  # Replicas (adjust based on load)
  replicas: 3

  # Rolling update strategy
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0  # Zero-downtime deployments

  # Pod selector
  selector:
    matchLabels:
      app: active-immune-core

  # Pod template
  template:
    metadata:
      labels:
        app: active-immune-core
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8200"
        prometheus.io/path: "/metrics"
    spec:
      # Security context for pod
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000

      # Service account (if using RBAC)
      serviceAccountName: active-immune-sa

      # Init container to wait for dependencies
      initContainers:
        - name: wait-for-kafka
          image: busybox:1.36
          command:
            - sh
            - -c
            - |
              until nc -z kafka-service.kafka.svc.cluster.local 9092; do
                echo "Waiting for Kafka..."
                sleep 5
              done
              echo "Kafka is ready!"

        - name: wait-for-redis
          image: busybox:1.36
          command:
            - sh
            - -c
            - |
              until nc -z redis-service.redis.svc.cluster.local 6379; do
                echo "Waiting for Redis..."
                sleep 5
              done
              echo "Redis is ready!"

        - name: wait-for-postgres
          image: busybox:1.36
          command:
            - sh
            - -c
            - |
              until nc -z postgres-service.postgres.svc.cluster.local 5432; do
                echo "Waiting for PostgreSQL..."
                sleep 5
              done
              echo "PostgreSQL is ready!"

      # Main container
      containers:
        - name: active-immune-core
          image: active-immune-core:1.0.0
          imagePullPolicy: IfNotPresent

          ports:
            - name: http
              containerPort: 8200
              protocol: TCP

          # Environment variables from ConfigMap
          envFrom:
            - configMapRef:
                name: active-immune-config
            - secretRef:
                name: active-immune-secret

          # Resource limits and requests
          resources:
            requests:
              cpu: "500m"
              memory: "512Mi"
            limits:
              cpu: "2000m"
              memory: "2Gi"

          # Liveness probe (restart if unhealthy)
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 3

          # Readiness probe (remove from load balancer if not ready)
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3

          # Startup probe (for slow-starting applications)
          startupProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 12  # 120 seconds max startup time

          # Persistent volume mounts
          volumeMounts:
            - name: logs
              mountPath: /app/logs
            - name: data
              mountPath: /app/data

          # Security context for container
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
            runAsUser: 1000
            capabilities:
              drop:
                - ALL

      # Volumes
      volumes:
        - name: logs
          emptyDir: {}
        - name: data
          persistentVolumeClaim:
            claimName: active-immune-data-pvc

      # Affinity rules (spread pods across nodes)
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - active-immune-core
                topologyKey: kubernetes.io/hostname

      # Tolerations (if using node taints)
      tolerations: []

---
# ServiceAccount for Active Immune Core
apiVersion: v1
kind: ServiceAccount
metadata:
  name: active-immune-sa
  namespace: active-immune
  labels:
    app: active-immune-core
