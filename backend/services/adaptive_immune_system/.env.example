# Adaptive Immune System - HITL API Environment Variables
# =========================================================
#
# Copy this file to .env and fill in your actual values
# NEVER commit the .env file with real credentials!
#
# Usage:
#   cp .env.example .env
#   nano .env  # Edit with your values
#
# Generated: 2025-10-13
# =========================================================

# ============================
# APPLICATION
# ============================

# Application name (shown in logs and API docs)
APP_NAME="Adaptive Immune System - HITL API"

# Application version
APP_VERSION="1.0.0"

# Debug mode (true = development, false = production)
# WARNING: Never enable debug in production!
DEBUG=false

# ============================
# SERVER
# ============================

# Server host to bind to
# Use 0.0.0.0 to accept connections from any IP (Docker/production)
# Use 127.0.0.1 for localhost only (development)
HOST=0.0.0.0

# Server port
PORT=8003

# ============================
# DATABASE
# ============================

# PostgreSQL connection URL
# Format: postgresql+asyncpg://user:password@host:port/database
#
# Local development:
# DATABASE_URL=postgresql+asyncpg://postgres:postgres@localhost:5432/adaptive_immune
#
# Docker Compose:
# DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/adaptive_immune
#
# Production:
# DATABASE_URL=postgresql+asyncpg://user:secure_password@db.example.com:5432/adaptive_immune
DATABASE_URL=postgresql+asyncpg://postgres:postgres@localhost:5432/adaptive_immune

# ============================
# RABBITMQ (MESSAGE QUEUE)
# ============================

# RabbitMQ connection URL
# Format: amqp://user:password@host:port/vhost
#
# Local development:
# RABBITMQ_URL=amqp://guest:guest@localhost:5672/
#
# Docker Compose:
# RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
#
# Production:
# RABBITMQ_URL=amqp://user:secure_password@mq.example.com:5672/vertice
RABBITMQ_URL=amqp://guest:guest@localhost:5672/

# ============================
# GITHUB INTEGRATION
# ============================

# GitHub Personal Access Token
# Required permissions: repo (full control of private repositories)
# Create at: https://github.com/settings/tokens
#
# IMPORTANT: Keep this secret! Never commit to git!
GITHUB_TOKEN=ghp_your_token_here_replace_me

# GitHub repository owner/organization
GITHUB_REPO_OWNER=your-organization

# GitHub repository name
GITHUB_REPO_NAME=your-repository

# ============================
# REDIS (CACHING)
# ============================

# Redis connection URL
# Format: redis://host:port/database
#
# Local development:
# REDIS_URL=redis://localhost:6379/0
#
# Docker Compose:
# REDIS_URL=redis://redis:6379/0
#
# Production with password:
# REDIS_URL=redis://:password@redis.example.com:6379/0
REDIS_URL=redis://localhost:6379/0

# ============================
# CORS (CROSS-ORIGIN RESOURCE SHARING)
# ============================

# Allowed origins for CORS (comma-separated)
# Add your frontend URLs here
#
# Development:
CORS_ORIGINS=http://localhost:5173,http://localhost:3000,http://localhost:8080
#
# Production (add your domain):
# CORS_ORIGINS=https://console.vertice.ai,https://app.vertice.ai

# ============================
# OBSERVABILITY
# ============================

# Logging level
# Options: debug, info, warning, error, critical
# Use "debug" in development, "info" in production
LOG_LEVEL=info

# Enable Prometheus metrics collection
# Set to false to disable metrics endpoint
PROMETHEUS_ENABLED=true

# ============================
# FEATURE FLAGS
# ============================

# Enable WebSocket real-time updates
WEBSOCKET_ENABLED=true

# Enable wargaming engine integration
WARGAMING_ENABLED=true

# ============================
# NOTES
# ============================

# Docker Compose Users:
# ----------------------
# When running with docker-compose, most values are automatically set
# in the docker-compose.yml file. You only need to set:
#   - GITHUB_TOKEN
#   - GITHUB_REPO_OWNER
#   - GITHUB_REPO_NAME
#
# Create a .env file in the project root with just these 3 variables.

# Production Deployment:
# ----------------------
# 1. Copy this file to .env
# 2. Update all URLs to production values
# 3. Generate strong passwords for database and RabbitMQ
# 4. Set DEBUG=false
# 5. Set LOG_LEVEL=info or warning
# 6. Add production domain to CORS_ORIGINS
# 7. Keep .env file secure (chmod 600 .env)
# 8. Never commit .env to git (check .gitignore)

# Health Check:
# -------------
# After starting the service, verify it's running:
#   curl http://localhost:8003/health
#
# Expected response:
#   {"status": "healthy", "components": {...}, "timestamp": ...}

# Documentation:
# --------------
# API Docs (Swagger): http://localhost:8003/hitl/docs
# ReDoc:              http://localhost:8003/hitl/redoc
# Metrics:            http://localhost:8003/metrics
