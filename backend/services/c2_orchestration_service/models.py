"""Maximus C2 Orchestration Service - Data Models.

This module defines the Pydantic data models (schemas) used for data validation
and serialization within the Command and Control (C2) Orchestration service.
These schemas ensure data consistency and provide a clear structure for
representing various entities like commands, command statuses, and command results.

By using Pydantic, Maximus AI benefits from automatic data validation, clear
documentation of data structures, and seamless integration with FastAPI for
API request and response modeling.
"""

from datetime import datetime
from enum import Enum
from typing import Any, Dict, Optional

from pydantic import BaseModel, Field


class CommandStatus(str, Enum):
    """Enumeration for the status of a command."""

    PENDING = "pending"
    RUNNING = "running"
    COMPLETED = "completed"
    FAILED = "failed"
    CANCELLED = "cancelled"


class Command(BaseModel):
    """Represents a high-level command to be executed by the C2 Orchestration service.

    Attributes:
        id (str): Unique identifier for the command.
        name (str): The name of the command (e.g., 'recon_scan', 'deploy_agent').
        parameters (Dict[str, Any]): Parameters required for the command execution.
        target_service (Optional[str]): The specific Maximus service to target.
        status (CommandStatus): The current status of the command.
        created_at (str): ISO formatted timestamp of when the command was created.
        completed_at (Optional[str]): ISO formatted timestamp of when the command completed.
    """

    id: str
    name: str
    parameters: Dict[str, Any]
    target_service: Optional[str] = None
    status: CommandStatus = CommandStatus.PENDING
    created_at: str = Field(default_factory=lambda: datetime.now().isoformat())
    completed_at: Optional[str] = None


class CommandResult(BaseModel):
    """Represents the result of a completed command execution.

    Attributes:
        command_id (str): The ID of the command this result belongs to.
        status (str): The final status of the command execution (e.g., 'success', 'failed').
        output (Dict[str, Any]): The output or data generated by the command.
        timestamp (str): ISO formatted timestamp of when the result was recorded.
    """

    command_id: str
    status: str
    output: Dict[str, Any]
    timestamp: str = Field(default_factory=lambda: datetime.now().isoformat())
