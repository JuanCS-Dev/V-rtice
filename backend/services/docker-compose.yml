services:
  # ============================================================================
  # Infrastructure Services
  # ============================================================================

  # PostgreSQL with TimescaleDB extension
  postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: hcl-postgres
    environment:
      POSTGRES_DB: hcl_knowledge
      POSTGRES_USER: hcl_user
      POSTGRES_PASSWORD: hcl_password
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./hcl_kb_service/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hcl_user -d hcl_knowledge"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hcl-network

  # Kafka (Apache Kafka - simple and REAL)
  kafka:
    image: apache/kafka:latest
    container_name: hcl-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      CLUSTER_ID: VerticeHCLCluster123456
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "/opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server localhost:9092 || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 20s
    networks:
      - hcl-network

  # Prometheus (metrics collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: hcl-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - hcl-network

  # Grafana (metrics visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: hcl-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_SECURITY_ADMIN_USER: admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - hcl-network

  # ============================================================================
  # HCL Services
  # ============================================================================

  # HCL Knowledge Base (PostgreSQL + TimescaleDB)
  hcl-kb-service:
    build:
      context: ./hcl_kb_service
      dockerfile: Dockerfile
    container_name: hcl-kb-service
    ports:
      - "8100:8000"
    environment:
      SERVICE_NAME: hcl_kb
      DATABASE_URL: postgresql+asyncpg://hcl_user:hcl_password@postgres/hcl_knowledge
      LOG_LEVEL: INFO
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - hcl-network

  # HCL Monitor (System metrics collection)
  hcl-monitor:
    build:
      context: ./hcl_monitor_service
      dockerfile: Dockerfile
    container_name: hcl-monitor
    ports:
      - "8101:8001"
    environment:
      SERVICE_NAME: hcl_monitor
      KB_API_URL: http://hcl-kb-service:8000
      KAFKA_BROKERS: kafka:9092
      COLLECTION_INTERVAL: 15
      LOG_LEVEL: INFO
    depends_on:
      kafka:
        condition: service_healthy
      hcl-kb-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8001/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - hcl-network
    # Allow access to host metrics (for testing)
    privileged: true
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro

  # HCL Analyzer (ML predictions)
  hcl-analyzer:
    build:
      context: ./hcl_analyzer_service
      dockerfile: Dockerfile
    container_name: hcl-analyzer
    ports:
      - "8102:8002"
    environment:
      SERVICE_NAME: hcl_analyzer
      KB_API_URL: http://hcl-kb-service:8000
      KAFKA_BROKERS: kafka:9092
      MODEL_DIR: /app/models
      LOG_LEVEL: INFO
    depends_on:
      kafka:
        condition: service_healthy
      hcl-kb-service:
        condition: service_healthy
    volumes:
      - analyzer_models:/app/models
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8002/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - hcl-network

  # HCL Planner (Fuzzy Logic + RL)
  hcl-planner:
    build:
      context: ./hcl_planner_service
      dockerfile: Dockerfile
    container_name: hcl-planner
    ports:
      - "8103:8003"
    environment:
      SERVICE_NAME: hcl_planner
      KB_API_URL: http://hcl-kb-service:8000
      KAFKA_BROKERS: kafka:9092
      MODEL_DIR: /app/models
      LOG_LEVEL: INFO
    depends_on:
      kafka:
        condition: service_healthy
      hcl-kb-service:
        condition: service_healthy
      hcl-analyzer:
        condition: service_healthy
    volumes:
      - planner_models:/app/models
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8003/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - hcl-network

  # HCL Executor (Kubernetes actions - DRY RUN mode for local)
  hcl-executor:
    build:
      context: ./hcl_executor_service
      dockerfile: Dockerfile
    container_name: hcl-executor
    ports:
      - "8104:8004"
    environment:
      SERVICE_NAME: hcl_executor
      KB_API_URL: http://hcl-kb-service:8000
      KAFKA_BROKERS: kafka:9092
      K8S_NAMESPACE: default
      IN_CLUSTER: "false"  # Use local kubeconfig
      DRY_RUN: "true"  # Enable dry-run for local development
      ENABLE_ROLLBACK: "true"
      LOG_LEVEL: INFO
    depends_on:
      kafka:
        condition: service_healthy
      hcl-kb-service:
        condition: service_healthy
      hcl-planner:
        condition: service_healthy
    volumes:
      # Mount kubeconfig for local K8s access (optional)
      - ${HOME}/.kube:/home/vertice/.kube:ro
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8004/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - hcl-network

  # ============================================================================
  # RTE Service (Reflex Triage Engine)
  # ============================================================================

  # RTE - Ultra-fast threat detection (<50ms)
  rte-service:
    build:
      context: ./rte_service
      dockerfile: Dockerfile
    container_name: rte-service
    ports:
      - "8105:8005"
    environment:
      RTE_HOST: 0.0.0.0
      RTE_PORT: 8005
      LOG_LEVEL: INFO
    volumes:
      # Model persistence
      - rte_models:/app/models
      # Quarantine directory
      - rte_quarantine:/var/quarantine
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - hcl-network
    # Privileged for iptables (set to false for local dev)
    # privileged: true
    # cap_add:
    #   - NET_ADMIN
    #   - SYS_ADMIN

  # ============================================================================
  # hPC Service (Hierarchical Predictive Coding)
  # ============================================================================

  # hPC - Bayesian threat prediction and active inference
  hpc-service:
    build:
      context: ./hpc_service
      dockerfile: Dockerfile
    container_name: hpc-service
    ports:
      - "8106:8006"
    environment:
      HPC_HOST: 0.0.0.0
      HPC_PORT: 8006
      NUM_FEATURES: 30
      HIERARCHY_LEVELS: 4
      LEARNING_RATE: 0.1
      EXPLORATION_BUDGET: 100.0
      LOG_LEVEL: INFO
    volumes:
      # Model persistence
      - hpc_models:/app/models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - hcl-network

# ============================================================================
# Volumes
# ============================================================================

volumes:
  postgres_data:
    driver: local
  kafka_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  analyzer_models:
    driver: local
  planner_models:
    driver: local
  rte_models:
    driver: local
  rte_quarantine:
    driver: local
  hpc_models:
    driver: local

# ============================================================================
# Networks
# ============================================================================

networks:
  hcl-network:
    driver: bridge
