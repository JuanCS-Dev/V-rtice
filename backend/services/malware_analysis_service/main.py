"""Maximus Malware Analysis Service - Main Application Entry Point.

This module serves as the main entry point for the Maximus Malware Analysis
Service. It initializes and configures the FastAPI application, sets up event
handlers for startup and shutdown, and defines the API endpoints for submitting
suspicious files or URLs for analysis and retrieving detailed reports.

It orchestrates the integration with external sandboxing environments and
analysis tools, automates the submission and retrieval of analysis results,
and extracts behavioral patterns and threat intelligence from reports. This
service is crucial for providing actionable insights to other Maximus AI services
for threat detection and incident response.
"""

import base64
import uuid
from datetime import datetime
from typing import Any, Dict, Optional

import uvicorn
from fastapi import FastAPI, File, HTTPException, UploadFile
from pydantic import BaseModel

from offline_malware_engine import OfflineMalwareEngine

# Constitutional v3.0 imports
from shared.metrics_exporter import MetricsExporter, auto_update_sabbath_status
from shared.constitutional_tracing import create_constitutional_tracer
from shared.constitutional_logging import configure_constitutional_logging
from shared.health_checks import ConstitutionalHealthCheck


app = FastAPI(title="Maximus Malware Analysis Service", version="1.0.0")

# Initialize malware analysis engines
offline_engine = OfflineMalwareEngine()


class AnalysisRequest(BaseModel):
    """Request model for submitting a file or URL for malware analysis.

    Attributes:
        file_hash (Optional[str]): The hash of the suspicious file.
        url (Optional[str]): The suspicious URL.
        file_content_base64 (Optional[str]): Base64 encoded content of the file.
        analysis_type (str): The type of analysis to perform (e.g., 'static', 'dynamic', 'offline').
    """

    file_hash: Optional[str] = None
    url: Optional[str] = None
    file_content_base64: Optional[str] = None
    analysis_type: str = "offline"


@app.on_event("startup")
async def startup_event():
    """Performs startup tasks for the Malware Analysis Service."""

    # Constitutional v3.0 Initialization
    global metrics_exporter, constitutional_tracer, health_checker
    service_version = os.getenv("SERVICE_VERSION", "1.0.0")

    try:
        # Logging
        configure_constitutional_logging(
            service_name="malware_analysis_service",
            log_level=os.getenv("LOG_LEVEL", "INFO"),
            json_logs=True
        )

        # Metrics
        metrics_exporter = MetricsExporter(
            service_name="malware_analysis_service",
            version=service_version
        )
        auto_update_sabbath_status("malware_analysis_service")
        logger.info("✅ Constitutional Metrics initialized")

        # Tracing
        constitutional_tracer = create_constitutional_tracer(
            service_name="malware_analysis_service",
            version=service_version
        )
        constitutional_tracer.instrument_fastapi(app)
        logger.info("✅ Constitutional Tracing initialized")

        # Health
        health_checker = ConstitutionalHealthCheck(service_name="malware_analysis_service")
        logger.info("✅ Constitutional Health Checker initialized")

        # Routes
        if metrics_exporter:
            app.include_router(metrics_exporter.create_router())
            logger.info("✅ Constitutional metrics routes added")

    except Exception as e:
        logger.error(f"❌ Constitutional initialization failed: {e}", exc_info=True)

    # Mark startup complete
    if health_checker:
        health_checker.mark_startup_complete()

    print("🔬 Starting Maximus Malware Analysis Service...")
    print("✅ Maximus Malware Analysis Service started successfully.")


@app.on_event("shutdown")
async def shutdown_event():
    """Performs shutdown tasks for the Malware Analysis Service."""
    print("👋 Shutting down Maximus Malware Analysis Service...")
    print("🛑 Maximus Malware Analysis Service shut down.")


@app.get("/health")
async def health_check() -> Dict[str, str]:
    """Performs a health check of the Malware Analysis Service.

    Returns:
        Dict[str, str]: A dictionary indicating the service status.
    """
    return {"status": "healthy", "message": "Malware Analysis Service is operational."}


@app.post("/analyze", response_model=Dict[str, Any])
async def submit_for_analysis(request: AnalysisRequest) -> Dict[str, Any]:
    """Submits a file or URL for malware analysis.

    Args:
        request (AnalysisRequest): The request body containing the file hash, URL, or file content.

    Returns:
        Dict[str, Any]: A dictionary containing the submission ID and initial status.

    Raises:
        HTTPException: If neither file_hash, url, nor file_content_base64 is provided, or if an invalid analysis type is requested.
    """
    if not request.file_hash and not request.url and not request.file_content_base64:
        raise HTTPException(
            status_code=400,
            detail="Either file_hash, url, or file_content_base64 must be provided.",
        )

    submission_id = str(uuid.uuid4())
    print(f"[API] Received analysis request (ID: {submission_id}, type: {request.analysis_type})")

    if request.analysis_type == "offline":
        if request.file_content_base64:
            file_content = base64.b64decode(request.file_content_base64)
            analysis_result = await offline_engine.analyze_file_content(file_content)
        elif request.file_hash:
            analysis_result = await offline_engine.analyze_file_hash(request.file_hash)
        else:
            raise HTTPException(
                status_code=400,
                detail="Offline analysis requires file_hash or file_content_base64.",
            )
    else:
        raise HTTPException(
            status_code=400,
            detail=f"Unsupported analysis type: {request.analysis_type}",
        )

    return {
        "submission_id": submission_id,
        "status": "completed",
        "analysis_result": analysis_result,
        "timestamp": datetime.now().isoformat(),
    }


@app.post("/upload_and_analyze")
async def upload_and_analyze_file(file: UploadFile = File(...)) -> Dict[str, Any]:
    """Uploads a file for offline malware analysis.

    Args:
        file (UploadFile): The file to upload.

    Returns:
        Dict[str, Any]: A dictionary containing the submission ID and analysis result.
    """
    file_content = await file.read()
    submission_id = str(uuid.uuid4())
    print(f"[API] Received file upload for analysis (ID: {submission_id}, filename: {file.filename})")

    analysis_result = await offline_engine.analyze_file_content(file_content)

    return {
        "submission_id": submission_id,
        "status": "completed",
        "analysis_result": analysis_result,
        "timestamp": datetime.now().isoformat(),
    }


if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8023)
