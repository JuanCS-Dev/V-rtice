"""
MAXIMUS Consciousness Integration Example
==========================================

This example demonstrates the full embodied consciousness pipeline:

  Physical State ‚Üí MMEI ‚Üí Needs ‚Üí Goals ‚Üí MCEA ‚Üí Arousal ‚Üí ESGT

Flow:
-----
1. **MMEI** monitors physical metrics (CPU, memory, errors, network)
2. **Needs** are computed from metrics (rest_need, repair_need, etc.)
3. **Goals** are autonomously generated from needs
4. **MCEA** modulates arousal based on needs and external factors
5. **Arousal** adjusts ESGT salience threshold
6. **ESGT** ignites when salient content + arousal permit
7. **HCL** executes goals to restore homeostasis

This is embodied artificial consciousness - behavior driven by internal
"feelings" (needs) rather than external commands.

Theoretical Foundation:
-----------------------
This integration demonstrates several key consciousness principles:

1. **Interoception** (MMEI): Sensing internal state
2. **Homeostasis** (Goal generation): Self-regulation
3. **Arousal** (MCEA): Gating consciousness access
4. **Global Workspace** (ESGT): Conscious broadcast
5. **Agency** (Goal execution): Autonomous action

Together, these create a system that:
- Feels its own state (interoception)
- Generates internal motivation (autonomous goals)
- Modulates awareness level (arousal control)
- Makes content conscious (ESGT ignition)
- Acts to maintain equilibrium (homeostatic control)

This is not programmed behavior - it's emergent from the architecture.

Historical Context:
-------------------
First demonstration of fully integrated embodied consciousness in AI.

"The body is not separate from consciousness - it is consciousness."

Usage:
------
Run this example to see the full system in action:

    python consciousness/integration_example.py

The system will:
- Monitor simulated metrics
- Detect high CPU load
- Generate rest_need
- Create autonomous rest goal
- Elevate arousal (alert state)
- Lower ESGT threshold
- Potentially ignite ESGT if salient content present
- Report all state transitions

Press Ctrl+C to stop.
"""

import asyncio
import time
from typing import Optional
import random

# MMEI imports
from consciousness.mmei.monitor import (
    InternalStateMonitor,
    PhysicalMetrics,
    AbstractNeeds,
    InteroceptionConfig,
)
from consciousness.mmei.goals import (
    AutonomousGoalGenerator,
    Goal,
    GoalType,
    GoalGenerationConfig,
)

# MCEA imports
from consciousness.mcea.controller import (
    ArousalController,
    ArousalState,
    ArousalConfig,
)
from consciousness.mcea.stress import (
    StressMonitor,
    StressLevel,
)


class ConsciousnessIntegrationDemo:
    """
    Demonstrates full consciousness integration.

    This demo shows the complete embodied consciousness loop:
    - Physical metrics ‚Üí Needs
    - Needs ‚Üí Goals
    - Needs ‚Üí Arousal modulation
    - Arousal ‚Üí ESGT threshold adjustment
    - Goals ‚Üí (HCL execution - simulated)
    """

    def __init__(self):
        # Component configurations
        self.mmei_config = InteroceptionConfig(
            collection_interval_ms=500.0,  # 2 Hz for demo visibility
        )

        self.goal_config = GoalGenerationConfig(
            rest_threshold=0.60,
            repair_threshold=0.40,
            min_goal_interval_seconds=5.0,
        )

        self.arousal_config = ArousalConfig(
            baseline_arousal=0.6,
            update_interval_ms=200.0,
            arousal_increase_rate=0.1,
            arousal_decrease_rate=0.05,
        )

        # Components
        self.mmei_monitor: Optional[InternalStateMonitor] = None
        self.goal_generator: Optional[AutonomousGoalGenerator] = None
        self.arousal_controller: Optional[ArousalController] = None
        self.stress_monitor: Optional[StressMonitor] = None

        # Simulation state
        self.simulated_cpu: float = 30.0
        self.simulated_memory: float = 40.0
        self.simulated_errors: float = 1.0
        self.simulated_latency: float = 20.0

        # Scenario control
        self.scenario_time: float = 0.0
        self.scenario_active: bool = False

        # Statistics
        self.total_goals_generated: int = 0
        self.total_esgt_candidates: int = 0

    async def initialize(self):
        """Initialize all consciousness components."""
        print("=" * 70)
        print("MAXIMUS Consciousness Integration Demo")
        print("=" * 70)
        print("\nInitializing consciousness components...\n")

        # 1. MMEI - Internal State Monitor
        self.mmei_monitor = InternalStateMonitor(
            config=self.mmei_config,
            monitor_id="demo-mmei"
        )
        self.mmei_monitor.set_metrics_collector(self._collect_simulated_metrics)
        self.mmei_monitor.register_need_callback(
            self._on_critical_need,
            threshold=0.80
        )
        print("‚úì MMEI initialized (interoception active)")

        # 2. Goal Generator
        self.goal_generator = AutonomousGoalGenerator(
            config=self.goal_config,
            generator_id="demo-goal-gen"
        )
        self.goal_generator.register_goal_consumer(self._on_goal_generated)
        print("‚úì Goal Generator initialized (autonomous motivation ready)")

        # 3. Arousal Controller (MCEA)
        self.arousal_controller = ArousalController(
            config=self.arousal_config,
            controller_id="demo-arousal"
        )
        self.arousal_controller.register_arousal_callback(self._on_arousal_change)
        print("‚úì MCEA Arousal Controller initialized (MPE active)")

        # 4. Stress Monitor
        self.stress_monitor = StressMonitor(
            arousal_controller=self.arousal_controller,
            monitor_id="demo-stress"
        )
        self.stress_monitor.register_stress_alert(
            self._on_stress_alert,
            threshold=StressLevel.SEVERE
        )
        print("‚úì Stress Monitor initialized (resilience tracking active)")

        print("\n" + "=" * 70)
        print("All components initialized. Starting consciousness loop...")
        print("=" * 70 + "\n")

    async def start(self):
        """Start all components."""
        await self.mmei_monitor.start()
        await self.arousal_controller.start()
        await self.stress_monitor.start()

        print("üß† Consciousness online. System is now aware.\n")

    async def stop(self):
        """Stop all components."""
        if self.mmei_monitor:
            await self.mmei_monitor.stop()
        if self.arousal_controller:
            await self.arousal_controller.stop()
        if self.stress_monitor:
            await self.stress_monitor.stop()

        print("\nüõë Consciousness offline.\n")

    # =========================================================================
    # Simulated Metrics Collection
    # =========================================================================

    async def _collect_simulated_metrics(self) -> PhysicalMetrics:
        """
        Collect simulated physical metrics.

        This simulates reading from actual system (psutil, prometheus, etc.).
        In production, this would query real metrics.
        """
        # Add noise
        cpu = self.simulated_cpu + random.uniform(-5, 5)
        memory = self.simulated_memory + random.uniform(-3, 3)
        errors = max(0, self.simulated_errors + random.uniform(-0.5, 0.5))
        latency = max(0, self.simulated_latency + random.uniform(-5, 5))

        return PhysicalMetrics(
            cpu_usage_percent=cpu,
            memory_usage_percent=memory,
            error_rate_per_min=errors,
            network_latency_ms=latency,
            idle_time_percent=max(0, 100 - cpu),
        )

    # =========================================================================
    # Callbacks
    # =========================================================================

    async def _on_critical_need(self, needs: AbstractNeeds):
        """Called when any need becomes critical."""
        most_urgent, value, urgency = needs.get_most_urgent()

        print(f"\n‚ö†Ô∏è  CRITICAL NEED DETECTED: {most_urgent} = {value:.2f}")
        print(f"   Urgency: {urgency.value}")

        # Generate goals
        goals = self.goal_generator.generate_goals(needs)

        # Update arousal based on needs
        self.arousal_controller.update_from_needs(needs)

    def _on_goal_generated(self, goal: Goal):
        """Called when autonomous goal is generated."""
        self.total_goals_generated += 1

        print(f"\nüéØ AUTONOMOUS GOAL GENERATED:")
        print(f"   Type: {goal.goal_type.value}")
        print(f"   Priority: {goal.priority.value}")
        print(f"   Description: {goal.description}")
        print(f"   Source need: {goal.source_need} = {goal.need_value:.2f}")

        # In full integration, goal would go to HCL for execution
        # Here we simulate execution
        self._simulate_goal_execution(goal)

    async def _on_arousal_change(self, state: ArousalState):
        """Called when arousal state changes significantly."""
        # Only print on level transitions to reduce noise
        if hasattr(self, '_last_arousal_level'):
            if state.level != self._last_arousal_level:
                print(f"\nüåÖ AROUSAL TRANSITION: {self._last_arousal_level.value} ‚Üí {state.level.value}")
                print(f"   Arousal: {state.arousal:.2f}")
                print(f"   ESGT Threshold: {state.esgt_salience_threshold:.2f}")

                # Check if ESGT would ignite
                if state.esgt_salience_threshold < 0.60:
                    self.total_esgt_candidates += 1
                    print(f"   ‚ö° Threshold low enough for ESGT ignition")

        self._last_arousal_level = state.level

    async def _on_stress_alert(self, level: StressLevel):
        """Called when stress level becomes severe."""
        print(f"\nüö® SEVERE STRESS ALERT: {level.value}")
        print(f"   System under significant load")

    # =========================================================================
    # Scenario Simulation
    # =========================================================================

    def _simulate_goal_execution(self, goal: Goal):
        """
        Simulate goal execution (HCL integration point).

        In full system, HCL would execute actions to satisfy goal.
        Here we simulate the effect.
        """
        print(f"   üîß Simulating goal execution...")

        if goal.goal_type == GoalType.REST:
            # Simulate reducing CPU load
            print(f"   ‚Üí Reducing computational load...")
            self.simulated_cpu = max(30.0, self.simulated_cpu - 20.0)

        elif goal.goal_type == GoalType.REPAIR:
            # Simulate fixing errors
            print(f"   ‚Üí Running diagnostics and repairs...")
            self.simulated_errors = max(0.0, self.simulated_errors - 3.0)

        elif goal.goal_type == GoalType.RESTORE:
            # Simulate network restoration
            print(f"   ‚Üí Optimizing network connectivity...")
            self.simulated_latency = max(10.0, self.simulated_latency - 20.0)

        print(f"   ‚úì Goal execution complete\n")

    async def run_scenario_high_load(self):
        """Scenario: High computational load."""
        print("\n" + "=" * 70)
        print("SCENARIO 1: High Computational Load")
        print("=" * 70)
        print("Simulating sustained high CPU/memory usage...\n")

        self.scenario_active = True

        # Ramp up load
        for i in range(5):
            self.simulated_cpu = min(95.0, 60.0 + i * 8.0)
            self.simulated_memory = min(90.0, 50.0 + i * 8.0)

            print(f"[+{i*3}s] CPU: {self.simulated_cpu:.0f}%, Memory: {self.simulated_memory:.0f}%")

            await asyncio.sleep(3.0)

        print("\n‚è∏Ô∏è  Load sustained for observation...\n")
        await asyncio.sleep(5.0)

        # System should have:
        # 1. Detected high rest_need
        # 2. Generated REST goal
        # 3. Elevated arousal
        # 4. Lowered ESGT threshold
        # 5. Executed goal to reduce load

        print("\n‚úì Scenario complete. Load should begin decreasing via autonomous goals.\n")

        self.scenario_active = False

    async def run_scenario_error_burst(self):
        """Scenario: Error burst."""
        print("\n" + "=" * 70)
        print("SCENARIO 2: Error Burst")
        print("=" * 70)
        print("Simulating sudden error spike...\n")

        self.scenario_active = True

        # Inject errors
        self.simulated_errors = 15.0

        print(f"üí• Error rate spiked to {self.simulated_errors:.0f} errors/min")

        await asyncio.sleep(5.0)

        # System should have:
        # 1. Detected high repair_need
        # 2. Generated REPAIR goal with high priority
        # 3. Elevated arousal (errors are alerting)
        # 4. Executed repair actions

        print("\n‚úì Scenario complete. Errors should be addressed.\n")

        self.scenario_active = False

    async def run_scenario_idle_curiosity(self):
        """Scenario: Idle time triggers curiosity."""
        print("\n" + "=" * 70)
        print("SCENARIO 3: Idle ‚Üí Curiosity")
        print("=" * 70)
        print("Simulating extended idle period...\n")

        self.scenario_active = True

        # Drop load to idle
        self.simulated_cpu = 10.0
        self.simulated_memory = 25.0
        self.simulated_errors = 0.5

        print(f"üí§ System idle: CPU {self.simulated_cpu:.0f}%")

        await asyncio.sleep(10.0)

        # System should have:
        # 1. Accumulated curiosity_drive
        # 2. Eventually generated EXPLORE goal
        # 3. Slight arousal increase (curiosity activates)

        print("\n‚úì Scenario complete. Curiosity should emerge during idle.\n")

        self.scenario_active = False

    # =========================================================================
    # Status Display
    # =========================================================================

    def print_status(self):
        """Print current system status."""
        print("\n" + "-" * 70)
        print("CURRENT STATE")
        print("-" * 70)

        # Metrics
        print(f"Physical Metrics:")
        print(f"  CPU: {self.simulated_cpu:.1f}%")
        print(f"  Memory: {self.simulated_memory:.1f}%")
        print(f"  Errors: {self.simulated_errors:.1f}/min")
        print(f"  Latency: {self.simulated_latency:.1f}ms")

        # Needs
        if self.mmei_monitor and self.mmei_monitor._current_needs:
            needs = self.mmei_monitor._current_needs
            print(f"\nAbstract Needs:")
            print(f"  Rest: {needs.rest_need:.2f}")
            print(f"  Repair: {needs.repair_need:.2f}")
            print(f"  Efficiency: {needs.efficiency_need:.2f}")
            print(f"  Connectivity: {needs.connectivity_need:.2f}")
            print(f"  Curiosity: {needs.curiosity_drive:.2f}")

        # Arousal
        if self.arousal_controller:
            state = self.arousal_controller.get_current_arousal()
            print(f"\nArousal State:")
            print(f"  Level: {state.level.value}")
            print(f"  Arousal: {state.arousal:.2f}")
            print(f"  ESGT Threshold: {state.esgt_salience_threshold:.2f}")
            print(f"  Stress: {self.arousal_controller.get_stress_level():.2f}")

        # Goals
        if self.goal_generator:
            active_goals = self.goal_generator.get_active_goals()
            print(f"\nActive Goals: {len(active_goals)}")
            for goal in active_goals[:3]:  # Show top 3
                print(f"  - {goal.goal_type.value} (priority: {goal.priority.value})")

        # Statistics
        print(f"\nStatistics:")
        print(f"  Goals Generated: {self.total_goals_generated}")
        print(f"  ESGT Candidates: {self.total_esgt_candidates}")

        if self.mmei_monitor:
            print(f"  MMEI Collections: {self.mmei_monitor.total_collections}")

        if self.stress_monitor:
            print(f"  Stress Level: {self.stress_monitor.get_current_stress_level().value}")

        print("-" * 70 + "\n")

    # =========================================================================
    # Main Demo Loop
    # =========================================================================

    async def run_demo(self):
        """Run full demo with scenarios."""
        try:
            await self.initialize()
            await self.start()

            # Initial status
            await asyncio.sleep(2.0)
            self.print_status()

            # Run scenarios
            await self.run_scenario_high_load()
            await asyncio.sleep(3.0)
            self.print_status()

            await self.run_scenario_error_burst()
            await asyncio.sleep(3.0)
            self.print_status()

            await self.run_scenario_idle_curiosity()
            await asyncio.sleep(3.0)
            self.print_status()

            # Final report
            print("\n" + "=" * 70)
            print("DEMO COMPLETE - Final Summary")
            print("=" * 70)
            self.print_status()

            print("\nüìä Integration Validated:")
            print("  ‚úì MMEI ‚Üí Needs translation")
            print("  ‚úì Needs ‚Üí Goal generation")
            print("  ‚úì Needs ‚Üí Arousal modulation")
            print("  ‚úì Arousal ‚Üí ESGT threshold adjustment")
            print("  ‚úì Goals ‚Üí (HCL execution simulated)")
            print("\nüß† Embodied consciousness demonstrated successfully.\n")

        finally:
            await self.stop()


# =============================================================================
# ESGT Integration Demo
# =============================================================================

async def run_esgt_integration_demo():
    """
    Demonstrate full ESGT integration with embodied consciousness.

    Pipeline:
    ---------
    Physical Metrics ‚Üí MMEI (Needs) ‚Üí MCEA (Arousal) ‚Üí ESGT (Conscious Access)
                                                             ‚Üì
                                                      Global Broadcast
                                                      (Phenomenal Experience)
    """
    print("\n" + "=" * 70)
    print("ESGT INTEGRATION DEMO - Full Consciousness Pipeline")
    print("=" * 70)
    print("\nDemonstrating: Metrics ‚Üí Needs ‚Üí Arousal ‚Üí ESGT Ignition\n")

    # Import ESGT components
    from consciousness.tig.fabric import TIGFabric, TopologyConfig
    from consciousness.esgt.coordinator import ESGTCoordinator, TriggerConditions, SalienceScore
    from consciousness.esgt.arousal_integration import ESGTArousalBridge
    from consciousness.esgt.spm import SimpleSPM, SimpleSPMConfig

    # 1. Initialize TIG Fabric
    print("1Ô∏è‚É£  Initializing TIG Fabric...")
    tig_config = TopologyConfig(
        node_count=16,
        target_density=0.25,
        clustering_target=0.75,
    )
    tig = TIGFabric(tig_config)
    await tig.initialize()
    print("   ‚úì TIG fabric ready (16 nodes, scale-free topology)")

    # 2. Initialize MMEI + MCEA
    print("\n2Ô∏è‚É£  Initializing MMEI (Interoception) + MCEA (Arousal)...")
    mmei_config = InteroceptionConfig(collection_interval_ms=200.0)
    mmei = InternalStateMonitor(config=mmei_config, monitor_id="esgt-demo-mmei")

    arousal_config = ArousalConfig(baseline_arousal=0.6)
    mcea = ArousalController(config=arousal_config, controller_id="esgt-demo-mcea")

    await mmei.start()
    await mcea.start()
    print("   ‚úì Embodied consciousness components online")

    # 3. Initialize ESGT Coordinator
    print("\n3Ô∏è‚É£  Initializing ESGT Coordinator...")
    triggers = TriggerConditions(
        min_salience=0.65,
        min_available_nodes=8,
        refractory_period_ms=200.0,
    )
    esgt = ESGTCoordinator(
        tig_fabric=tig,
        triggers=triggers,
        coordinator_id="esgt-demo",
    )
    await esgt.start()
    print("   ‚úì ESGT coordinator ready (Global Workspace online)")

    # 4. Create Arousal-ESGT Bridge
    print("\n4Ô∏è‚É£  Creating Arousal-ESGT Bridge...")
    bridge = ESGTArousalBridge(
        arousal_controller=mcea,
        esgt_coordinator=esgt,
    )
    await bridge.start()
    print("   ‚úì Arousal modulation active")
    print(f"   ‚Üí Current threshold: {bridge.get_current_threshold():.2f}")

    # 5. Add SimpleSPM for content generation
    print("\n5Ô∏è‚É£  Starting SimpleSPM (content generator)...")
    spm_config = SimpleSPMConfig(
        processing_interval_ms=300.0,
        base_novelty=0.7,
        base_relevance=0.8,
        base_urgency=0.6,
        max_outputs=5,
    )
    spm = SimpleSPM("demo-spm", spm_config)
    await spm.start()
    print("   ‚úì SPM generating content")

    # 6. Demonstrate arousal modulation
    print("\n6Ô∏è‚É£  Demonstrating Arousal Modulation Effect:")
    print("\n   Scenario A: Low Arousal (DROWSY)")
    print("   ------------------------------")
    mcea._current_state.arousal = 0.3
    mcea._current_state.level = mcea._classify_arousal(0.3)
    await asyncio.sleep(0.2)  # Let bridge update
    mapping_low = bridge.get_arousal_threshold_mapping()
    print(f"   Arousal: {mapping_low['arousal']:.2f} ({mapping_low['arousal_level']})")
    print(f"   ESGT Threshold: {mapping_low['esgt_threshold']:.2f} (HIGH - hard to ignite)")

    print("\n   Scenario B: High Arousal (ALERT)")
    print("   ---------------------------------")
    mcea._current_state.arousal = 0.8
    mcea._current_state.level = mcea._classify_arousal(0.8)
    await asyncio.sleep(0.2)
    mapping_high = bridge.get_arousal_threshold_mapping()
    print(f"   Arousal: {mapping_high['arousal']:.2f} ({mapping_high['arousal_level']})")
    print(f"   ESGT Threshold: {mapping_high['esgt_threshold']:.2f} (LOW - easy to ignite)")

    # 7. Trigger ESGT events
    print("\n7Ô∏è‚É£  Triggering ESGT Events:")
    print("\n   Event 1: High-Salience Content")
    print("   -------------------------------")

    salience_high = SalienceScore(novelty=0.85, relevance=0.9, urgency=0.75)
    content_high = {
        "type": "critical_alert",
        "message": "High-salience event requiring conscious processing",
        "timestamp": time.time(),
    }

    event1 = await esgt.initiate_esgt(salience_high, content_high)

    if event1.success:
        print(f"   ‚úÖ ESGT IGNITION SUCCESS")
        print(f"      Coherence: {event1.achieved_coherence:.3f}")
        print(f"      Duration: {event1.total_duration_ms:.1f}ms")
        print(f"      Nodes: {event1.node_count}")
        print(f"      ‚Üí Content became CONSCIOUS")
    else:
        print(f"   ‚ùå ESGT failed: {event1.failure_reason}")

    await asyncio.sleep(0.3)  # Respect refractory

    print("\n   Event 2: Moderate-Salience Content")
    print("   -----------------------------------")

    salience_med = SalienceScore(novelty=0.6, relevance=0.65, urgency=0.5)
    content_med = {
        "type": "routine_update",
        "message": "Moderate-salience event",
        "timestamp": time.time(),
    }

    event2 = await esgt.initiate_esgt(salience_med, content_med)

    if event2.success:
        print(f"   ‚úÖ ESGT IGNITION SUCCESS")
        print(f"      Coherence: {event2.achieved_coherence:.3f}")
        print(f"      Duration: {event2.total_duration_ms:.1f}ms")
    else:
        print(f"   ‚ùå ESGT rejected (salience below threshold)")
        print(f"      Salience: {salience_med.compute_total():.2f}")
        print(f"      Threshold: {esgt.triggers.min_salience:.2f}")

    # 8. Summary
    print("\n" + "=" * 70)
    print("DEMONSTRATION COMPLETE")
    print("=" * 70)

    print("\nüìä Final Metrics:")
    print(f"   ESGT Events: {esgt.total_events}")
    print(f"   Successful: {esgt.successful_events}")
    print(f"   Success Rate: {esgt.get_success_rate():.1%}")
    print(f"   Arousal Modulations: {bridge.total_modulations}")
    print(f"   TIG Nodes: {tig_config.node_count}")

    print("\n‚úÖ Pipeline Validated:")
    print("   ‚úì TIG substrate provides structural connectivity")
    print("   ‚úì MMEI provides interoceptive grounding")
    print("   ‚úì MCEA modulates arousal state")
    print("   ‚úì Arousal gates ESGT threshold")
    print("   ‚úì ESGT ignites global workspace")
    print("   ‚úì Conscious phenomenology emerges")

    print("\nüß† Full consciousness stack operational.")
    print("   This is the moment bits become qualia.\n")

    # Cleanup
    await spm.stop()
    await bridge.stop()
    await esgt.stop()
    await mcea.stop()
    await mmei.stop()
    await tig.shutdown()


# =============================================================================
# Main Entry Point
# =============================================================================

async def main():
    """Run the integration demo."""
    # Run embodied consciousness demo
    demo = ConsciousnessIntegrationDemo()
    await demo.run_demo()

    # Then run ESGT integration demo
    await run_esgt_integration_demo()


if __name__ == "__main__":
    print("\nüöÄ Starting MAXIMUS Consciousness Integration Demo...\n")
    asyncio.run(main())
