# Docker Compose for Test Environment
# Testcontainers-compatible configuration
# Author: Claude Code + JuanCS-Dev
# DOUTRINA VÃ‰RTICE: Real services, zero mocks

version: '3.8'

services:
  # Kafka cluster for consciousness messaging
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: test-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - test-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: test-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      # Consciousness topics
      KAFKA_CREATE_TOPICS: >
        consciousness.global_workspace:3:1,
        consciousness.visual_cortex:1:1,
        consciousness.thalamus:1:1,
        consciousness.prefrontal:1:1,
        consciousness.neuromodulation:1:1
    ports:
      - "29092:29092"
      - "9092:9092"
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - test-network

  # Redis for hot-path state and consciousness streams
  redis:
    image: redis:7-alpine
    container_name: test-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    volumes:
      - redis-data:/data
    networks:
      - test-network

  # PostgreSQL for governance, audit trails, precedent database
  postgres:
    image: postgres:15-alpine
    container_name: test-postgres
    environment:
      POSTGRES_USER: maximus_test
      POSTGRES_PASSWORD: test_password_change_in_prod
      POSTGRES_DB: maximus_test
      POSTGRES_INITDB_ARGS: "-E UTF8"
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U maximus_test"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./tests/fixtures/init_test_db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - test-network

  # MinIO for ML model storage (S3-compatible)
  minio:
    image: minio/minio:latest
    container_name: test-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - minio-data:/data
    networks:
      - test-network

  # Prometheus for metrics (optional but useful for integration tests)
  prometheus:
    image: prom/prometheus:latest
    container_name: test-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./tests/fixtures/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - test-network

networks:
  test-network:
    driver: bridge

volumes:
  redis-data:
  postgres-data:
  minio-data:
  prometheus-data:
