#!/bin/bash
# CVE Whitelist Checker
#
# This script validates and parses the CVE whitelist configuration file.
# Used by dependency-audit.sh to skip whitelisted vulnerabilities.
#
# Functions:
# - validate_whitelist_schema: Validates YAML structure
# - is_cve_whitelisted: Checks if a CVE is whitelisted and valid
# - get_whitelist_justification: Returns justification for whitelisted CVE
# - check_expiration: Validates expiration dates
#
# Following Doutrina V√©rtice - Article III: Confian√ßa Zero

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
WHITELIST_FILE="$PROJECT_ROOT/.cve-whitelist.yml"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# ============================================================================
# VALIDATION FUNCTIONS
# ============================================================================

validate_whitelist_schema() {
    echo -e "${BLUE}üîç Validating whitelist schema...${NC}"
    echo ""

    if [ ! -f "$WHITELIST_FILE" ]; then
        echo -e "${RED}‚ùå Whitelist file not found: $WHITELIST_FILE${NC}"
        return 1
    fi

    # Check if yq is installed (for YAML parsing)
    if ! command -v yq &> /dev/null; then
        echo -e "${YELLOW}‚ö†Ô∏è  yq not installed, using basic validation${NC}"
        # Basic validation - check if file is valid YAML
        if python3 -c "import yaml; yaml.safe_load(open('$WHITELIST_FILE'))" 2>&1; then
            echo -e "${GREEN}‚úì${NC} Whitelist file is valid YAML"
            return 0
        else
            echo -e "${RED}‚ùå Whitelist file is not valid YAML${NC}"
            return 1
        fi
    fi

    # Advanced validation with yq
    local errors=0

    # Check version field
    if ! yq eval '.version' "$WHITELIST_FILE" &> /dev/null; then
        echo -e "${RED}‚úó${NC} Missing 'version' field"
        ((errors++))
    fi

    # Check whitelisted_cves array
    if ! yq eval '.whitelisted_cves' "$WHITELIST_FILE" &> /dev/null; then
        echo -e "${RED}‚úó${NC} Missing 'whitelisted_cves' field"
        ((errors++))
    fi

    # Validate each CVE entry
    local cve_count
    cve_count=$(yq eval '.whitelisted_cves | length' "$WHITELIST_FILE")

    if [ "$cve_count" -eq 0 ]; then
        echo -e "${GREEN}‚úì${NC} Whitelist is empty (no CVEs whitelisted)"
        return 0
    fi

    echo -e "${BLUE}Found $cve_count whitelisted CVE(s)${NC}"
    echo ""

    for ((i=0; i<cve_count; i++)); do
        echo -e "${BLUE}Validating CVE entry $((i+1))/$cve_count...${NC}"

        # Required fields
        local required_fields=("id" "package" "cvss" "severity" "justification" "expires_at" "owner" "approved_by" "approved_at")

        for field in "${required_fields[@]}"; do
            if ! yq eval ".whitelisted_cves[$i].$field" "$WHITELIST_FILE" | grep -v "null" &> /dev/null; then
                echo -e "${RED}  ‚úó${NC} CVE $((i+1)): Missing required field '$field'"
                ((errors++))
            fi
        done

        # Validate CVE ID format
        local cve_id
        cve_id=$(yq eval ".whitelisted_cves[$i].id" "$WHITELIST_FILE")
        if ! echo "$cve_id" | grep -qE '^CVE-[0-9]{4}-[0-9]+$'; then
            echo -e "${RED}  ‚úó${NC} CVE $((i+1)): Invalid CVE ID format: $cve_id"
            ((errors++))
        fi

        # Validate CVSS score range (0.0-10.0)
        local cvss
        cvss=$(yq eval ".whitelisted_cves[$i].cvss" "$WHITELIST_FILE")
        if ! echo "$cvss" | grep -qE '^[0-9]+\.[0-9]+$'; then
            echo -e "${RED}  ‚úó${NC} CVE $((i+1)): Invalid CVSS format: $cvss"
            ((errors++))
        elif (( $(echo "$cvss < 0.0 || $cvss > 10.0" | bc -l) )); then
            echo -e "${RED}  ‚úó${NC} CVE $((i+1)): CVSS out of range (0.0-10.0): $cvss"
            ((errors++))
        fi

        # Validate justification length (>= 50 chars)
        local justification
        justification=$(yq eval ".whitelisted_cves[$i].justification" "$WHITELIST_FILE")
        if [ ${#justification} -lt 50 ]; then
            echo -e "${RED}  ‚úó${NC} CVE $((i+1)): Justification too short (< 50 chars)"
            ((errors++))
        fi

        # Validate expiration date
        local expires_at
        expires_at=$(yq eval ".whitelisted_cves[$i].expires_at" "$WHITELIST_FILE")
        if ! date -d "$expires_at" &> /dev/null; then
            echo -e "${RED}  ‚úó${NC} CVE $((i+1)): Invalid expiration date format: $expires_at"
            ((errors++))
        fi

        echo -e "${GREEN}  ‚úì${NC} CVE $((i+1)) validation passed"
        echo ""
    done

    if [ $errors -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Whitelist validation passed${NC}"
        return 0
    else
        echo -e "${RED}‚ùå Whitelist validation failed with $errors error(s)${NC}"
        return 1
    fi
}

# ============================================================================
# QUERY FUNCTIONS
# ============================================================================

is_cve_whitelisted() {
    local cve_id="$1"
    local package_name="${2:-}"

    if [ ! -f "$WHITELIST_FILE" ]; then
        return 1  # Not whitelisted (file doesn't exist)
    fi

    # Use Python for reliable YAML parsing
    python3 <<EOF
import yaml
import sys
from datetime import datetime

try:
    with open("$WHITELIST_FILE", "r") as f:
        data = yaml.safe_load(f)

    if not data or "whitelisted_cves" not in data:
        sys.exit(1)

    for cve in data["whitelisted_cves"]:
        if cve.get("id") == "$cve_id":
            # Check if expired
            expires_at = cve.get("expires_at")
            if expires_at:
                expire_date = datetime.strptime(str(expires_at), "%Y-%m-%d")
                if datetime.now() > expire_date:
                    sys.exit(2)  # Expired

            # Check package if provided
            if "$package_name" and cve.get("package"):
                pkg = cve.get("package").split("==")[0]
                if pkg != "$package_name":
                    sys.exit(1)  # Wrong package

            sys.exit(0)  # Whitelisted and valid

    sys.exit(1)  # Not found
except Exception as e:
    print(f"Error: {e}", file=sys.stderr)
    sys.exit(1)
EOF
}

get_whitelist_justification() {
    local cve_id="$1"

    if [ ! -f "$WHITELIST_FILE" ]; then
        echo "N/A"
        return
    fi

    # Use Python to extract justification
    python3 <<EOF
import yaml

try:
    with open("$WHITELIST_FILE", "r") as f:
        data = yaml.safe_load(f)

    if not data or "whitelisted_cves" not in data:
        print("N/A")
        exit(0)

    for cve in data["whitelisted_cves"]:
        if cve.get("id") == "$cve_id":
            justification = cve.get("justification", "N/A")
            # Print first line only for brevity
            print(justification.split("\n")[0])
            exit(0)

    print("N/A")
except Exception as e:
    print("N/A")
EOF
}

get_whitelist_expiration() {
    local cve_id="$1"

    if [ ! -f "$WHITELIST_FILE" ]; then
        echo "N/A"
        return
    fi

    python3 <<EOF
import yaml

try:
    with open("$WHITELIST_FILE", "r") as f:
        data = yaml.safe_load(f)

    if not data or "whitelisted_cves" not in data:
        print("N/A")
        exit(0)

    for cve in data["whitelisted_cves"]:
        if cve.get("id") == "$cve_id":
            print(cve.get("expires_at", "N/A"))
            exit(0)

    print("N/A")
except Exception as e:
    print("N/A")
EOF
}

check_expiration() {
    echo -e "${BLUE}üïí Checking CVE expiration dates...${NC}"
    echo ""

    if [ ! -f "$WHITELIST_FILE" ]; then
        echo -e "${GREEN}‚úì${NC} No whitelist file found (nothing to expire)"
        return 0
    fi

    # Use Python for date calculations
    local result
    result=$(python3 <<EOF
import yaml
from datetime import datetime, timedelta

try:
    with open("$WHITELIST_FILE", "r") as f:
        data = yaml.safe_load(f)

    if not data or "whitelisted_cves" not in data or len(data["whitelisted_cves"]) == 0:
        print("EMPTY")
        exit(0)

    now = datetime.now()
    thirty_days = now + timedelta(days=30)

    expired = []
    expiring_soon = []

    for cve in data["whitelisted_cves"]:
        cve_id = cve.get("id", "UNKNOWN")
        expires_at = cve.get("expires_at")

        if not expires_at:
            print(f"MISSING_DATE:{cve_id}")
            continue

        expire_date = datetime.strptime(str(expires_at), "%Y-%m-%d")

        if expire_date < now:
            expired.append(f"{cve_id}:{expires_at}")
        elif expire_date < thirty_days:
            days_left = (expire_date - now).days
            expiring_soon.append(f"{cve_id}:{expires_at}:{days_left}")

    if expired:
        for item in expired:
            print(f"EXPIRED:{item}")

    if expiring_soon:
        for item in expiring_soon:
            print(f"EXPIRING:{item}")

    if not expired and not expiring_soon:
        print("OK")

except Exception as e:
    print(f"ERROR:{e}")
    exit(1)
EOF
)

    local has_issues=false

    while IFS= read -r line; do
        case "$line" in
            EMPTY)
                echo -e "${GREEN}‚úì${NC} Whitelist is empty"
                return 0
                ;;
            OK)
                echo -e "${GREEN}‚úì${NC} All CVEs have valid expiration dates"
                return 0
                ;;
            EXPIRED:*)
                local cve_info="${line#EXPIRED:}"
                local cve_id="${cve_info%%:*}"
                local expire_date="${cve_info#*:}"
                echo -e "${RED}‚úó${NC} $cve_id expired on $expire_date"
                has_issues=true
                ;;
            EXPIRING:*)
                local cve_info="${line#EXPIRING:}"
                local cve_id=$(echo "$cve_info" | cut -d':' -f1)
                local expire_date=$(echo "$cve_info" | cut -d':' -f2)
                local days_left=$(echo "$cve_info" | cut -d':' -f3)
                echo -e "${YELLOW}‚ö†${NC}  $cve_id expires in $days_left days ($expire_date)"
                has_issues=true
                ;;
            MISSING_DATE:*)
                local cve_id="${line#MISSING_DATE:}"
                echo -e "${RED}‚úó${NC} $cve_id has no expiration date"
                has_issues=true
                ;;
            ERROR:*)
                echo -e "${RED}‚ùå Error: ${line#ERROR:}${NC}"
                return 1
                ;;
        esac
    done <<< "$result"

    echo ""

    if [ "$has_issues" = true ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Action required: Review expired/expiring CVEs${NC}"
        return 1
    fi

    return 0
}

# ============================================================================
# MAIN
# ============================================================================

main() {
    local command="${1:-validate}"

    case "$command" in
        validate)
            validate_whitelist_schema
            ;;
        is-whitelisted)
            if [ $# -lt 2 ]; then
                echo "Usage: $0 is-whitelisted <CVE-ID> [package-name]"
                exit 2
            fi
            is_cve_whitelisted "$2" "${3:-}"
            ;;
        get-justification)
            if [ $# -lt 2 ]; then
                echo "Usage: $0 get-justification <CVE-ID>"
                exit 2
            fi
            get_whitelist_justification "$2"
            ;;
        get-expiration)
            if [ $# -lt 2 ]; then
                echo "Usage: $0 get-expiration <CVE-ID>"
                exit 2
            fi
            get_whitelist_expiration "$2"
            ;;
        check-expiration)
            check_expiration
            ;;
        *)
            echo "Unknown command: $command"
            echo "Usage: $0 {validate|is-whitelisted|get-justification|get-expiration|check-expiration}"
            exit 2
            ;;
    esac
}

# Run main if executed directly
if [ "${BASH_SOURCE[0]}" = "${0}" ]; then
    main "$@"
fi

# Export functions for use in other scripts
export -f is_cve_whitelisted
export -f get_whitelist_justification
export -f get_whitelist_expiration
export -f check_expiration
