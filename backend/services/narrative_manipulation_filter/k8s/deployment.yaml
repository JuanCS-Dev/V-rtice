# ============================================================================
# DEPLOYMENT - Cognitive Defense System
# Production-ready deployment with resource limits, probes, and security
# ============================================================================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: narrative-filter
  namespace: cognitive-defense
  labels:
    app: narrative-filter
    component: api
    version: v2.0.0
  annotations:
    description: "Cognitive Defense System API deployment"
    maintainer: "juan@vertice.dev"
spec:
  replicas: 3  # Start with 3 replicas for HA
  revisionHistoryLimit: 5  # Keep last 5 revisions for rollback

  # Deployment strategy - rolling update with zero downtime
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1  # Max 1 extra pod during update
      maxUnavailable: 0  # Keep all pods available during update

  selector:
    matchLabels:
      app: narrative-filter
      component: api

  template:
    metadata:
      labels:
        app: narrative-filter
        component: api
        version: v2.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9013"
        prometheus.io/path: "/metrics"

    spec:
      # Security context for the pod
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault

      # Service account for RBAC
      serviceAccountName: narrative-filter-sa

      # Affinity rules for high availability
      affinity:
        # Spread pods across nodes
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: narrative-filter
                topologyKey: kubernetes.io/hostname

      # Init container to wait for dependencies
      initContainers:
        - name: wait-for-postgres
          image: busybox:1.36
          command:
            - sh
            - -c
            - |
              until nc -z postgresql.cognitive-defense.svc.cluster.local 5432; do
                echo "Waiting for PostgreSQL..."
                sleep 2
              done
              echo "PostgreSQL is ready"

        - name: wait-for-redis
          image: busybox:1.36
          command:
            - sh
            - -c
            - |
              until nc -z redis.cognitive-defense.svc.cluster.local 6379; do
                echo "Waiting for Redis..."
                sleep 2
              done
              echo "Redis is ready"

      # Main application container
      containers:
        - name: narrative-filter
          image: vertice/cognitive-defense:2.0.0  # Replace with your registry
          imagePullPolicy: IfNotPresent

          # Security context for the container
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: false  # Models need write access to cache
            runAsNonRoot: true
            runAsUser: 1000
            capabilities:
              drop:
                - ALL

          # Ports
          ports:
            - name: http
              containerPort: 8013
              protocol: TCP
            - name: metrics
              containerPort: 9013
              protocol: TCP

          # Environment variables from ConfigMap
          envFrom:
            - configMapRef:
                name: narrative-filter-config

          # Environment variables from Secrets
          env:
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: narrative-filter-secrets
                  key: DB_USER
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: narrative-filter-secrets
                  key: DB_PASSWORD
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: narrative-filter-secrets
                  key: REDIS_PASSWORD
            - name: NEWSGUARD_API_KEY
              valueFrom:
                secretKeyRef:
                  name: narrative-filter-secrets
                  key: NEWSGUARD_API_KEY
            - name: GOOGLE_FACTCHECK_API_KEY
              valueFrom:
                secretKeyRef:
                  name: narrative-filter-secrets
                  key: GOOGLE_FACTCHECK_API_KEY
            - name: GEMINI_API_KEY
              valueFrom:
                secretKeyRef:
                  name: narrative-filter-secrets
                  key: GEMINI_API_KEY
            - name: JWT_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: narrative-filter-secrets
                  key: JWT_SECRET_KEY

          # Resource limits and requests
          resources:
            requests:
              cpu: "500m"
              memory: "1Gi"
            limits:
              cpu: "2000m"
              memory: "4Gi"

          # Liveness probe - restart if unhealthy
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 3

          # Readiness probe - remove from load balancer if not ready
          readinessProbe:
            httpGet:
              path: /ready
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 3

          # Startup probe - allow time for model loading
          startupProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 12  # 2 minutes for startup

          # Volume mounts
          volumeMounts:
            - name: model-cache
              mountPath: /app/models/cache
            - name: data-cache
              mountPath: /app/data/cache
            - name: logs
              mountPath: /var/log/narrative_filter

      # Volumes
      volumes:
        - name: model-cache
          emptyDir:
            sizeLimit: 2Gi
        - name: data-cache
          emptyDir:
            sizeLimit: 1Gi
        - name: logs
          emptyDir:
            sizeLimit: 500Mi

      # DNS policy
      dnsPolicy: ClusterFirst

      # Restart policy
      restartPolicy: Always

      # Termination grace period
      terminationGracePeriodSeconds: 30

---
# ============================================================================
# SERVICE ACCOUNT - For RBAC
# ============================================================================
apiVersion: v1
kind: ServiceAccount
metadata:
  name: narrative-filter-sa
  namespace: cognitive-defense
  labels:
    app: narrative-filter

---
# ============================================================================
# ROLE - Permissions for the service
# ============================================================================
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: narrative-filter-role
  namespace: cognitive-defense
rules:
  - apiGroups: [""]
    resources: ["configmaps", "secrets"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "list"]

---
# ============================================================================
# ROLE BINDING - Bind role to service account
# ============================================================================
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: narrative-filter-rolebinding
  namespace: cognitive-defense
subjects:
  - kind: ServiceAccount
    name: narrative-filter-sa
    namespace: cognitive-defense
roleRef:
  kind: Role
  name: narrative-filter-role
  apiGroup: rbac.authorization.k8s.io
