# 🎯 MAXIMUS Service CI/CD Template - uv + ruff Edition
#
# Quality-First | Zero Breaking Changes | Production Ready
#
# Este template é 60x mais rápido que pip + flake8 + black + isort
# Baseado em: uv (package manager) + ruff (linter/formatter)
#
# Como usar:
# 1. Copie para .github/workflows/ci.yml no seu service
# 2. Ajuste SERVICE_NAME, SERVICE_PORT, PYTHON_VERSION se necessário
# 3. Commit e push
#
# Referência: docs/10-MIGRATION/CICD_MIGRATION_GUIDE.md

name: Service CI/CD Pipeline

on:
  push:
    branches: ['*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  # 🔧 Customize estas variáveis para o seu service
  SERVICE_NAME: network_monitor_service  # ALTERAR
  SERVICE_PORT: 8044        # ALTERAR se necessário
  PYTHON_VERSION: '3.11'
  UV_VERSION: '0.1.0'      # Versão do uv

jobs:
  # ============================================================================
  # STAGE 1: CODE QUALITY (ruff - 25x mais rápido que flake8+black+isort)
  # ============================================================================
  quality:
    name: 🎨 Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: ⚡ Install uv + ruff
        run: |
          pip install --no-cache-dir uv ruff
          uv --version
          ruff --version

      - name: 🔍 Ruff Lint
        run: |
          ruff check . --output-format=github

      - name: 🎨 Ruff Format Check
        run: |
          ruff format --check --diff .

  # ============================================================================
  # STAGE 2: SECURITY SCAN (bandit + safety)
  # ============================================================================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: ⚡ Install security tools
        run: |
          pip install --no-cache-dir bandit[toml] safety

      - name: 🔍 Bandit Security Scan
        run: |
          bandit -r . -ll -f json -o bandit-report.json || true

      - name: 📦 Safety Dependency Check
        run: |
          safety check --json || true

      - name: 📤 Upload Bandit Report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json

  # ============================================================================
  # STAGE 3: TESTS & COVERAGE (pytest)
  # ============================================================================
  test:
    name: 🧪 Tests & Coverage
    runs-on: ubuntu-latest
    needs: [quality]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: ⚡ Install uv
        run: |
          pip install --no-cache-dir uv

      - name: 📦 Install dependencies (uv sync)
        run: |
          uv pip sync requirements.txt

      - name: 🧪 Install dev dependencies
        run: |
          uv pip install pytest pytest-asyncio pytest-cov pytest-mock

      - name: 🏃 Run Tests
        run: |
          PYTHONPATH=. pytest -v --cov=. --cov-report=xml --cov-report=term-missing

      - name: 📊 Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  # ============================================================================
  # STAGE 4: BUILD DOCKER IMAGE
  # ============================================================================
  build:
    name: 🐋 Build Docker
    runs-on: ubuntu-latest
    needs: [quality, security, test]
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.SERVICE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🏗️ Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🔍 Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.SERVICE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📤 Upload Trivy Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # ============================================================================
  # STAGE 5: PUSH IMAGE (MAIN ONLY)
  # ============================================================================
  push:
    name: 🚀 Push Image
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Login to Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 🏷️ Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ env.SERVICE_NAME }}
          tags: |
            type=sha,prefix=main-
            type=raw,value=latest

      - name: 🏗️ Build and Push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ============================================================================
  # STAGE 6: HEALTH CHECK (POST-BUILD VALIDATION)
  # ============================================================================
  healthcheck:
    name: ✅ Health Check
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🏃 Run Service Container
        run: |
          docker run -d --name test-service \
            -p ${{ env.SERVICE_PORT }}:${{ env.SERVICE_PORT }} \
            ${{ env.SERVICE_NAME }}:latest

          # Wait for service to be ready
          sleep 10

      - name: 🔍 Test Health Endpoint
        run: |
          curl -f http://localhost:${{ env.SERVICE_PORT }}/health || exit 1

      - name: 🧹 Cleanup
        if: always()
        run: |
          docker stop test-service || true
          docker rm test-service || true
