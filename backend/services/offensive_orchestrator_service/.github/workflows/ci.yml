name: CI Pipeline

on:
  push:
    branches: [ main, develop, reactive-fabric/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test Suite (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.11"]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      qdrant:
        image: qdrant/qdrant:latest
        ports:
          - 6333:6333
        options: >-
          --health-cmd "curl -f http://localhost:6333/health || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-mock

    - name: Run tests with coverage
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY || 'test_key_for_ci' }}
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: test_user
        POSTGRES_PASSWORD: test_password
        POSTGRES_DB: test_db
        QDRANT_HOST: localhost
        QDRANT_PORT: 6333
      run: |
        pytest tests/ \
          --cov=. \
          --cov-report=term \
          --cov-report=xml \
          --cov-report=html \
          --cov-fail-under=92 \
          --ignore=tests/integration \
          -v \
          --tb=short

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      if: matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-offensive-orchestrator
        fail_ci_if_error: false

    - name: Archive coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report-py${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml
        retention-days: 30

  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'

    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install ruff black isort mypy

    - name: Check code formatting with black
      run: |
        black --check --diff . || echo "::warning::Code formatting issues found. Run 'black .' locally to fix."
      continue-on-error: true

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff . || echo "::warning::Import sorting issues found. Run 'isort .' locally to fix."
      continue-on-error: true

    - name: Lint with ruff
      run: |
        ruff check . || echo "::warning::Linting issues found. Run 'ruff check --fix .' locally to fix."
      continue-on-error: true

    - name: Type check with mypy
      run: |
        mypy . --ignore-missing-imports --no-strict-optional || echo "::warning::Type checking issues found."
      continue-on-error: true

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        cache: 'pip'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -f screen || echo "::warning::Security issues found. Review bandit report."
      continue-on-error: true

    - name: Check for known vulnerabilities in dependencies
      run: |
        pip install -r requirements.txt
        safety check --json || echo "::warning::Vulnerable dependencies found."
      continue-on-error: true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
        retention-days: 30

  build-status:
    name: Build Status Summary
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    if: always()

    steps:
    - name: Check build status
      run: |
        echo "Test Job Status: ${{ needs.test.result }}"
        echo "Lint Job Status: ${{ needs.lint.result }}"
        echo "Security Job Status: ${{ needs.security.result }}"

        if [ "${{ needs.test.result }}" != "success" ]; then
          echo "::error::Tests failed!"
          exit 1
        fi

        echo "âœ… All CI checks passed!"
