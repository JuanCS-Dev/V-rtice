# Nginx Load Balancer Configuration for VÃ©rtice Service Registry
# Strategy: Round-robin with health checks and automatic failover

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
    use epoll;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'upstream=$upstream_addr response_time=$request_time';

    access_log /var/log/nginx/access.log main;

    # Performance tuning
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;

    # Upstream backend: 5 registry replicas (TITANIUM HA)
    # Fault Tolerance: Can lose 2 replicas with ZERO impact
    upstream vertice_registry {
        # Round-robin load balancing (default)
        # Nginx will automatically skip unhealthy backends

        server vertice-register-1:8888 max_fails=3 fail_timeout=10s;
        server vertice-register-2:8888 max_fails=3 fail_timeout=10s;
        server vertice-register-3:8888 max_fails=3 fail_timeout=10s;
        server vertice-register-4:8888 max_fails=3 fail_timeout=10s;
        server vertice-register-5:8888 max_fails=3 fail_timeout=10s;

        # Keep connections alive for better performance
        keepalive 64;  # Increased for 5 replicas
    }

    # Main server block
    server {
        listen 80;
        server_name vertice-register localhost;

        # Client settings
        client_max_body_size 1M;
        client_body_timeout 10s;
        client_header_timeout 10s;

        # Proxy to registry replicas
        location / {
            proxy_pass http://vertice_registry;

            # Headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Timeouts (aggressive for fast fail)
            proxy_connect_timeout 2s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;

            # Connection keep-alive
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # Error handling
            proxy_next_upstream error timeout http_500 http_502 http_503;
            proxy_next_upstream_tries 3;
        }

        # Health check endpoint (direct, no caching)
        location /health {
            proxy_pass http://vertice_registry/health;
            proxy_set_header Host $host;
            proxy_connect_timeout 1s;
            proxy_send_timeout 2s;
            proxy_read_timeout 2s;
            access_log off;  # Don't log health checks
        }

        # Metrics endpoint (for Prometheus scraping)
        location /metrics {
            proxy_pass http://vertice_registry/metrics;
            proxy_set_header Host $host;
            access_log off;
        }

        # Nginx status endpoint (for monitoring)
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            allow 172.16.0.0/12;  # Docker networks
            deny all;
        }
    }
}
