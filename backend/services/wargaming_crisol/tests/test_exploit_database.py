"""
Unit tests for Exploit Database.

Tests exploit loading, querying, and execution framework.
"""

import pytest
import tempfile
from pathlib import Path
from unittest.mock import Mock

from exploit_database import (
    ExploitDatabase,
    ExploitResult,
    ExploitStatus,
    ExploitCategory,
    load_exploit_database,
    get_exploit_for_apv,
)


# Fixtures

@pytest.fixture
def temp_exploits_dir():
    """Temporary exploits directory"""
    with tempfile.TemporaryDirectory() as tmpdir:
        yield Path(tmpdir)


@pytest.fixture
def sample_exploit_script(temp_exploits_dir):
    """Create sample exploit script"""
    script_path = temp_exploits_dir / "test_exploit.py"
    script_path.write_text('''
"""Sample exploit for testing"""

EXPLOIT_ID = "test_001"
NAME = "Test Exploit"
DESCRIPTION = "Test exploit for unit tests"
CATEGORY = "sql_injection"
CWE_IDS = ["CWE-89", "CWE-90"]
CVE_EXAMPLES = ["CVE-2024-TEST"]

async def execute(target_url, **kwargs):
    from exploit_database import ExploitResult, ExploitStatus, ExploitCategory
    return ExploitResult(
        exploit_id=EXPLOIT_ID,
        category=ExploitCategory(CATEGORY),
        status=ExploitStatus.SUCCESS,
        success=True,
        output="Test output",
        error=None,
        duration_seconds=1.0,
        metadata={"test": True}
    )
''')
    return script_path


@pytest.fixture
def sample_apv():
    """Mock APV object"""
    apv = Mock()
    apv.cve_id = "CVE-2024-TEST"
    apv.cwe_ids = ["CWE-89"]
    return apv


# Tests: Initialization

def test_database_initialization(temp_exploits_dir):
    """Test database can be initialized"""
    db = ExploitDatabase(temp_exploits_dir)
    
    assert db.exploits_dir == temp_exploits_dir
    assert len(db.exploits) == 0


def test_database_default_exploits_dir():
    """Test default exploits directory"""
    db = ExploitDatabase()
    
    assert db.exploits_dir.name == "exploits"


# Tests: load_exploits

def test_load_exploits_empty_directory(temp_exploits_dir):
    """Test loading from empty directory"""
    db = ExploitDatabase(temp_exploits_dir)
    count = db.load_exploits()
    
    assert count == 0
    assert len(db.exploits) == 0


def test_load_exploits_with_script(temp_exploits_dir, sample_exploit_script):
    """Test loading exploit scripts"""
    db = ExploitDatabase(temp_exploits_dir)
    count = db.load_exploits()
    
    assert count == 1
    assert "test_001" in db.exploits


def test_load_exploits_skips_private_files(temp_exploits_dir):
    """Test that files starting with _ are skipped"""
    # Create private file
    private_file = temp_exploits_dir / "_private.py"
    private_file.write_text("# Private file")
    
    db = ExploitDatabase(temp_exploits_dir)
    count = db.load_exploits()
    
    assert count == 0


def test_load_exploits_handles_invalid_script(temp_exploits_dir):
    """Test handling of invalid exploit script"""
    # Create invalid script
    invalid = temp_exploits_dir / "invalid.py"
    invalid.write_text("# Missing required metadata")
    
    db = ExploitDatabase(temp_exploits_dir)
    count = db.load_exploits()
    
    assert count == 0  # Should skip invalid script


# Tests: _load_exploit_script

def test_load_exploit_script_success(temp_exploits_dir, sample_exploit_script):
    """Test loading valid exploit script"""
    db = ExploitDatabase(temp_exploits_dir)
    exploit = db._load_exploit_script(sample_exploit_script)
    
    assert exploit.exploit_id == "test_001"
    assert exploit.name == "Test Exploit"
    assert exploit.category == ExploitCategory.SQL_INJECTION
    assert "CWE-89" in exploit.cwe_ids
    assert exploit.execute_func is not None


def test_load_exploit_script_extracts_metadata(temp_exploits_dir, sample_exploit_script):
    """Test metadata extraction from exploit"""
    db = ExploitDatabase(temp_exploits_dir)
    exploit = db._load_exploit_script(sample_exploit_script)
    
    assert exploit.description == "Test exploit for unit tests"
    assert "CVE-2024-TEST" in exploit.cve_examples
    assert len(exploit.cwe_ids) == 2


# Tests: get_exploit_by_id

def test_get_exploit_by_id_found(temp_exploits_dir, sample_exploit_script):
    """Test getting exploit by ID"""
    db = ExploitDatabase(temp_exploits_dir)
    db.load_exploits()
    
    exploit = db.get_exploit_by_id("test_001")
    
    assert exploit is not None
    assert exploit.exploit_id == "test_001"


def test_get_exploit_by_id_not_found(temp_exploits_dir):
    """Test getting non-existent exploit"""
    db = ExploitDatabase(temp_exploits_dir)
    db.load_exploits()
    
    exploit = db.get_exploit_by_id("nonexistent")
    
    assert exploit is None


# Tests: get_exploits_by_cwe

def test_get_exploits_by_cwe_found(temp_exploits_dir, sample_exploit_script):
    """Test getting exploits by CWE"""
    db = ExploitDatabase(temp_exploits_dir)
    db.load_exploits()
    
    exploits = db.get_exploits_by_cwe("CWE-89")
    
    assert len(exploits) == 1
    assert exploits[0].exploit_id == "test_001"


def test_get_exploits_by_cwe_multiple_matches(temp_exploits_dir, sample_exploit_script):
    """Test CWE matching multiple exploits"""
    # Create second exploit with same CWE
    script2 = temp_exploits_dir / "test_002.py"
    script2.write_text('''
EXPLOIT_ID = "test_002"
NAME = "Test 2"
DESCRIPTION = "Second test"
CATEGORY = "sql_injection"
CWE_IDS = ["CWE-89"]
CVE_EXAMPLES = []

async def execute(target_url, **kwargs):
    pass
''')
    
    db = ExploitDatabase(temp_exploits_dir)
    db.load_exploits()
    
    exploits = db.get_exploits_by_cwe("CWE-89")
    
    assert len(exploits) == 2


def test_get_exploits_by_cwe_not_found(temp_exploits_dir, sample_exploit_script):
    """Test CWE with no matching exploits"""
    db = ExploitDatabase(temp_exploits_dir)
    db.load_exploits()
    
    exploits = db.get_exploits_by_cwe("CWE-9999")
    
    assert len(exploits) == 0


# Tests: get_exploits_by_category

def test_get_exploits_by_category(temp_exploits_dir, sample_exploit_script):
    """Test getting exploits by category"""
    db = ExploitDatabase(temp_exploits_dir)
    db.load_exploits()
    
    exploits = db.get_exploits_by_category(ExploitCategory.SQL_INJECTION)
    
    assert len(exploits) == 1


def test_get_exploits_by_category_empty(temp_exploits_dir, sample_exploit_script):
    """Test category with no matches"""
    db = ExploitDatabase(temp_exploits_dir)
    db.load_exploits()
    
    exploits = db.get_exploits_by_category(ExploitCategory.XSS)
    
    assert len(exploits) == 0


# Tests: get_exploits_by_cve

def test_get_exploits_by_cve_found(temp_exploits_dir, sample_exploit_script):
    """Test getting exploits by CVE"""
    db = ExploitDatabase(temp_exploits_dir)
    db.load_exploits()
    
    exploits = db.get_exploits_by_cve("CVE-2024-TEST")
    
    assert len(exploits) == 1


def test_get_exploits_by_cve_not_found(temp_exploits_dir, sample_exploit_script):
    """Test CVE with no matches"""
    db = ExploitDatabase(temp_exploits_dir)
    db.load_exploits()
    
    exploits = db.get_exploits_by_cve("CVE-9999-NONE")
    
    assert len(exploits) == 0


# Tests: list_all_exploits

def test_list_all_exploits(temp_exploits_dir, sample_exploit_script):
    """Test listing all exploits"""
    db = ExploitDatabase(temp_exploits_dir)
    db.load_exploits()
    
    exploits = db.list_all_exploits()
    
    assert len(exploits) == 1
    assert exploits[0].exploit_id == "test_001"


def test_list_all_exploits_empty(temp_exploits_dir):
    """Test listing when no exploits loaded"""
    db = ExploitDatabase(temp_exploits_dir)
    
    exploits = db.list_all_exploits()
    
    assert len(exploits) == 0


# Tests: count_exploits

def test_count_exploits(temp_exploits_dir, sample_exploit_script):
    """Test counting exploits"""
    db = ExploitDatabase(temp_exploits_dir)
    db.load_exploits()
    
    count = db.count_exploits()
    
    assert count == 1


# Tests: get_statistics

def test_get_statistics(temp_exploits_dir, sample_exploit_script):
    """Test statistics generation"""
    db = ExploitDatabase(temp_exploits_dir)
    db.load_exploits()
    
    stats = db.get_statistics()
    
    assert stats["total"] == 1
    assert "sql_injection" in stats["by_category"]
    assert stats["by_category"]["sql_injection"] == 1
    assert "CWE-89" in stats["cwe_coverage"]
    assert "CWE-90" in stats["cwe_coverage"]


def test_get_statistics_empty(temp_exploits_dir):
    """Test statistics on empty database"""
    db = ExploitDatabase(temp_exploits_dir)
    
    stats = db.get_statistics()
    
    assert stats["total"] == 0
    assert stats["by_category"] == {}
    assert stats["cwe_coverage"] == []


# Tests: ExploitResult model

def test_exploit_result_to_dict():
    """Test ExploitResult to dictionary"""
    result = ExploitResult(
        exploit_id="test",
        category=ExploitCategory.SQL_INJECTION,
        status=ExploitStatus.SUCCESS,
        success=True,
        output="Test output",
        error=None,
        duration_seconds=1.5,
        metadata={"key": "value"}
    )
    
    data = result.to_dict()
    
    assert data["exploit_id"] == "test"
    assert data["category"] == "sql_injection"
    assert data["status"] == "success"
    assert data["success"] is True
    assert data["duration_seconds"] == 1.5


# Tests: ExploitScript model

def test_exploit_script_repr(temp_exploits_dir, sample_exploit_script):
    """Test ExploitScript string representation"""
    db = ExploitDatabase(temp_exploits_dir)
    exploit = db._load_exploit_script(sample_exploit_script)
    
    repr_str = repr(exploit)
    
    assert "test_001" in repr_str
    assert "Test Exploit" in repr_str
    assert "sql_injection" in repr_str


# Tests: Convenience functions

def test_load_exploit_database_convenience(temp_exploits_dir, sample_exploit_script):
    """Test convenience function"""
    db = load_exploit_database(temp_exploits_dir)
    
    assert db.count_exploits() == 1


def test_get_exploit_for_apv_cve_match(temp_exploits_dir, sample_exploit_script, sample_apv):
    """Test getting exploit for APV via CVE match"""
    db = ExploitDatabase(temp_exploits_dir)
    db.load_exploits()
    
    exploit = get_exploit_for_apv(sample_apv, db)
    
    assert exploit is not None
    assert exploit.exploit_id == "test_001"


def test_get_exploit_for_apv_cwe_match(temp_exploits_dir, sample_exploit_script):
    """Test getting exploit for APV via CWE match"""
    db = ExploitDatabase(temp_exploits_dir)
    db.load_exploits()
    
    apv = Mock()
    apv.cve_id = "CVE-NOMATCH"
    apv.cwe_ids = ["CWE-89"]
    
    exploit = get_exploit_for_apv(apv, db)
    
    assert exploit is not None
    assert "CWE-89" in exploit.cwe_ids


def test_get_exploit_for_apv_no_match(temp_exploits_dir, sample_exploit_script):
    """Test APV with no matching exploit"""
    db = ExploitDatabase(temp_exploits_dir)
    db.load_exploits()
    
    apv = Mock()
    apv.cve_id = "CVE-NOMATCH"
    apv.cwe_ids = ["CWE-9999"]
    
    exploit = get_exploit_for_apv(apv, db)
    
    assert exploit is None


# Tests: Enums

def test_exploit_status_enum():
    """Test ExploitStatus enum values"""
    assert ExploitStatus.SUCCESS.value == "success"
    assert ExploitStatus.FAILED.value == "failed"
    assert ExploitStatus.ERROR.value == "error"
    assert ExploitStatus.TIMEOUT.value == "timeout"


def test_exploit_category_enum():
    """Test ExploitCategory enum values"""
    assert ExploitCategory.SQL_INJECTION.value == "sql_injection"
    assert ExploitCategory.XSS.value == "xss"
    assert ExploitCategory.COMMAND_INJECTION.value == "command_injection"


# Tests: Exploit execution (async)

@pytest.mark.asyncio
async def test_exploit_execution(temp_exploits_dir, sample_exploit_script):
    """Test executing loaded exploit"""
    db = ExploitDatabase(temp_exploits_dir)
    db.load_exploits()
    
    exploit = db.get_exploit_by_id("test_001")
    result = await exploit.execute_func(target_url="http://test")
    
    assert result.success is True
    assert result.status == ExploitStatus.SUCCESS
    assert result.exploit_id == "test_001"


# Tests: Edge cases

def test_load_exploits_nonexistent_directory():
    """Test loading from non-existent directory"""
    db = ExploitDatabase(Path("/nonexistent"))
    count = db.load_exploits()
    
    assert count == 0


def test_multiple_exploits_same_cwe(temp_exploits_dir):
    """Test multiple exploits with same CWE"""
    # Create 3 exploits with CWE-89
    for i in range(3):
        script = temp_exploits_dir / f"exploit_{i}.py"
        script.write_text(f'''
EXPLOIT_ID = "test_{i}"
NAME = "Test {i}"
DESCRIPTION = "Test"
CATEGORY = "sql_injection"
CWE_IDS = ["CWE-89"]
CVE_EXAMPLES = []

async def execute(target_url, **kwargs):
    pass
''')
    
    db = ExploitDatabase(temp_exploits_dir)
    db.load_exploits()
    
    exploits = db.get_exploits_by_cwe("CWE-89")
    
    assert len(exploits) == 3
