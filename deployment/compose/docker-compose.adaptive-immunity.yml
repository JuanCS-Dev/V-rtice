version: '3.8'

# MAXIMUS Adaptive Immunity Infrastructure
# Or√°culo-Eureka Immune System Stack
# Components: Kafka, Zookeeper, Redis, PostgreSQL

services:
  # Zookeeper for Kafka coordination
  zookeeper-immunity:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: maximus-zookeeper-immunity
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-immunity-data:/var/lib/zookeeper/data
      - zookeeper-immunity-logs:/var/lib/zookeeper/log
    networks:
      - maximus-immunity
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka for APV stream
  kafka-immunity:
    image: confluentinc/cp-kafka:7.5.0
    container_name: maximus-kafka-immunity
    depends_on:
      zookeeper-immunity:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-immunity:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-immunity:9092,PLAINTEXT_HOST://localhost:9096
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 168  # 7 days
      KAFKA_LOG_SEGMENT_BYTES: 1073741824  # 1GB
    ports:
      - "9096:9096"
    volumes:
      - kafka-immunity-data:/var/lib/kafka/data
    networks:
      - maximus-immunity
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5

  # Redis for pub/sub events and caching
  redis-immunity:
    image: redis:7-alpine
    container_name: maximus-redis-immunity
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-maximus_immunity_redis}
    ports:
      - "6380:6379"
    volumes:
      - redis-immunity-data:/data
    networks:
      - maximus-immunity
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL for APVs, patches, audit log
  postgres-immunity:
    image: postgres:15-alpine
    container_name: maximus-postgres-immunity
    environment:
      POSTGRES_DB: adaptive_immunity
      POSTGRES_USER: maximus
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-maximus_immunity_db}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5433:5432"
    volumes:
      - postgres-immunity-data:/var/lib/postgresql/data
      - ./backend/services/adaptive_immunity_db/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - maximus-immunity
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U maximus -d adaptive_immunity"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka UI for monitoring (optional, helpful for debugging)
  kafka-ui-immunity:
    image: provectuslabs/kafka-ui:latest
    container_name: maximus-kafka-ui-immunity
    depends_on:
      - kafka-immunity
    environment:
      KAFKA_CLUSTERS_0_NAME: maximus-immunity
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-immunity:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper-immunity:2181
    ports:
      - "8090:8080"
    networks:
      - maximus-immunity
    restart: unless-stopped

volumes:
  zookeeper-immunity-data:
    driver: local
  zookeeper-immunity-logs:
    driver: local
  kafka-immunity-data:
    driver: local
  redis-immunity-data:
    driver: local
  postgres-immunity-data:
    driver: local

networks:
  maximus-immunity:
    driver: bridge
    name: maximus-immunity-network
