version: "3.8"

services:
  # Infrastructure
  postgres-test:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: cockpit_test
      POSTGRES_USER: test
      POSTGRES_PASSWORD: test
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test"]
      interval: 5s
      timeout: 5s
      retries: 5

  nats-test:
    image: nats:2.10-alpine
    ports:
      - "4223:4222"
      - "8223:8222"
    command: ["-js", "-m", "8222"]
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8222/healthz"]
      interval: 5s
      timeout: 5s
      retries: 5

  kafka-test:
    image: bitnami/kafka:3.6
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9093,CONTROLLER://:9094
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9093
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@localhost:9094
      ALLOW_PLAINTEXT_LISTENER: "yes"
    ports:
      - "9093:9093"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9093 --list"]
      interval: 10s
      timeout: 10s
      retries: 5

  # Backend Services
  narrative-filter-test:
    build:
      context: ./backend/services/narrative_filter_service
      dockerfile: Dockerfile
    environment:
      SERVICE_NAME: narrative-filter-test
      HOST: 0.0.0.0
      PORT: 8091
      KAFKA_URL: kafka-test:9093
      POSTGRES_DSN: postgresql://test:test@postgres-test:5432/cockpit_test
    ports:
      - "8091:8091"
    depends_on:
      postgres-test:
        condition: service_healthy
      kafka-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8091/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  verdict-engine-test:
    build:
      context: ./backend/services/verdict_engine_service
      dockerfile: Dockerfile
    environment:
      SERVICE_NAME: verdict-engine-test
      HOST: 0.0.0.0
      PORT: 8093
      KAFKA_URL: kafka-test:9093
      POSTGRES_DSN: postgresql://test:test@postgres-test:5432/cockpit_test
    ports:
      - "8093:8093"
    depends_on:
      postgres-test:
        condition: service_healthy
      kafka-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8093/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  command-bus-test:
    build:
      context: ./backend/services/command_bus_service
      dockerfile: Dockerfile
    environment:
      COMMAND_BUS_SERVICE_NAME: command-bus-test
      COMMAND_BUS_HOST: 0.0.0.0
      COMMAND_BUS_PORT: 8092
      COMMAND_BUS_NATS_URL: nats://nats-test:4222
      COMMAND_BUS_POSTGRES_DSN: postgresql://test:test@postgres-test:5432/cockpit_test
    ports:
      - "8092:8092"
    depends_on:
      postgres-test:
        condition: service_healthy
      nats-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8092/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway (if needed for E2E)
  api-gateway-test:
    build:
      context: ./backend/api_gateway
      dockerfile: Dockerfile
    environment:
      GATEWAY_HOST: 0.0.0.0
      GATEWAY_PORT: 8000
      NARRATIVE_FILTER_URL: http://narrative-filter-test:8091
      VERDICT_ENGINE_URL: http://verdict-engine-test:8093
      COMMAND_BUS_URL: http://command-bus-test:8092
    ports:
      - "8000:8000"
    depends_on:
      narrative-filter-test:
        condition: service_healthy
      verdict-engine-test:
        condition: service_healthy
      command-bus-test:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
