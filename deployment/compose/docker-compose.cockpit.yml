version: '3.8'

services:
  # PostgreSQL for Cockpit (narrative_filter, verdict_engine, command_bus)
  cockpit-postgres:
    image: pgvector/pgvector:pg16
    container_name: cockpit-postgres
    environment:
      POSTGRES_DB: cockpit_db
      POSTGRES_USER: cockpit_user
      POSTGRES_PASSWORD: cockpit_pass_dev_only
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    ports:
      - "5433:5432"
    volumes:
      - cockpit-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cockpit_user -d cockpit_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cockpit-net

  # Redis for Cockpit (cache real-time verdicts)
  cockpit-redis:
    image: redis:7-alpine
    container_name: cockpit-redis
    ports:
      - "6380:6379"
    volumes:
      - cockpit-redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - cockpit-net

  # Kafka for event streaming (reuse existing or standalone)
  cockpit-kafka:
    image: bitnami/kafka:3.6
    container_name: cockpit-kafka
    ports:
      - "9093:9092"
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@cockpit-kafka:9093
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://cockpit-kafka:9092
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_CFG_LOG_RETENTION_HOURS: 168
    volumes:
      - cockpit-kafka-data:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --list"]
      interval: 15s
      timeout: 10s
      retries: 5
    networks:
      - cockpit-net

  # NATS for Command Bus (C2L orders)
  cockpit-nats:
    image: nats:2.10-alpine
    container_name: cockpit-nats
    ports:
      - "4222:4222"  # Client connections
      - "8222:8222"  # HTTP monitoring
      - "6222:6222"  # Cluster
    command:
      - "--jetstream"
      - "--store_dir=/data"
      - "--max_payload=8MB"
      - "--max_file_store=10GB"
    volumes:
      - cockpit-nats-data:/data
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8222/healthz"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cockpit-net

  # Narrative Filter Service
  narrative-filter:
    build:
      context: ./backend/services/narrative_filter_service
      dockerfile: Dockerfile
    container_name: narrative-filter
    environment:
      POSTGRES_HOST: cockpit-postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: cockpit_db
      POSTGRES_USER: cockpit_user
      POSTGRES_PASSWORD: cockpit_pass_dev_only
      REDIS_URL: redis://cockpit-redis:6379/0
      KAFKA_BOOTSTRAP_SERVERS: cockpit-kafka:9092
      LOG_LEVEL: INFO
    ports:
      - "8001:8000"
    depends_on:
      cockpit-postgres:
        condition: service_healthy
      cockpit-redis:
        condition: service_healthy
      cockpit-kafka:
        condition: service_healthy
    networks:
      - cockpit-net
    restart: unless-stopped

volumes:
  cockpit-postgres-data:
  cockpit-redis-data:
  cockpit-kafka-data:
  cockpit-nats-data:

networks:
  cockpit-net:
    driver: bridge
