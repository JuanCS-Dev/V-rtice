# ═══════════════════════════════════════════════════════════════════════════
# HITL Patch Service - ConfigMap & Secrets
# ═══════════════════════════════════════════════════════════════════════════
#
# Configuration and secrets for HITL service
#
# Author: MAXIMUS Team - Sprint 4.1
# ═══════════════════════════════════════════════════════════════════════════

apiVersion: v1
kind: ConfigMap
metadata:
  name: hitl-patch-service-config
  namespace: maximus-immunity
  labels:
    app: hitl-patch-service
data:
  # Service configuration
  PORT: "8027"
  LOG_LEVEL: "INFO"
  ENVIRONMENT: "production"
  
  # Database configuration (non-sensitive)
  POSTGRES_HOST: "postgres-immunity-service"
  POSTGRES_PORT: "5432"
  POSTGRES_DB: "adaptive_immunity"
  
  # Feature flags
  AUTO_APPROVE_ENABLED: "true"
  AUTO_APPROVE_THRESHOLD: "0.95"
  
  # Rate limiting
  RATE_LIMIT_ENABLED: "true"
  RATE_LIMIT_REQUESTS_PER_MINUTE: "100"
  
  # Monitoring
  PROMETHEUS_ENABLED: "true"
  PROMETHEUS_PORT: "8027"
  PROMETHEUS_PATH: "/metrics"
  
  # CORS configuration
  CORS_ENABLED: "true"
  CORS_ORIGINS: "https://maximus.ai,https://*.maximus.ai"
  
  # Logging
  LOG_FORMAT: "json"
  LOG_TIMESTAMP: "true"

---
# ═══════════════════════════════════════════════════════════════════════════
# Secret - Database Credentials (Example - use sealed-secrets in prod)
# ═══════════════════════════════════════════════════════════════════════════
#
# NOTE: This is an example. In production, use:
# - Sealed Secrets (bitnami-labs/sealed-secrets)
# - External Secrets Operator
# - Vault integration
# - Cloud provider secret managers (AWS Secrets Manager, GCP Secret Manager, etc)
#
# DO NOT commit real secrets to git!
#
# ═══════════════════════════════════════════════════════════════════════════

apiVersion: v1
kind: Secret
metadata:
  name: postgres-immunity-secret
  namespace: maximus-immunity
  labels:
    app: hitl-patch-service
type: Opaque
stringData:
  username: maximus
  # In production, this should be base64 encoded and managed externally
  # password: <base64-encoded-password>
  
  # Example for local/staging only:
  password: maximus_immunity_2024_CHANGE_IN_PROD

---
# ═══════════════════════════════════════════════════════════════════════════
# Secret - API Keys (if needed)
# ═══════════════════════════════════════════════════════════════════════════

apiVersion: v1
kind: Secret
metadata:
  name: hitl-api-keys
  namespace: maximus-immunity
  labels:
    app: hitl-patch-service
type: Opaque
stringData:
  # JWT secret for API authentication (if implemented)
  jwt-secret: "CHANGE_ME_IN_PRODUCTION_USE_STRONG_SECRET"
  
  # API key for inter-service communication
  internal-api-key: "CHANGE_ME_IN_PRODUCTION"

---
# ═══════════════════════════════════════════════════════════════════════════
# ServiceAccount - RBAC
# ═══════════════════════════════════════════════════════════════════════════

apiVersion: v1
kind: ServiceAccount
metadata:
  name: maximus-immunity-sa
  namespace: maximus-immunity
  labels:
    app: hitl-patch-service
automountServiceAccountToken: true

---
# ═══════════════════════════════════════════════════════════════════════════
# Role - RBAC Permissions
# ═══════════════════════════════════════════════════════════════════════════

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: hitl-service-role
  namespace: maximus-immunity
rules:
# Allow reading ConfigMaps
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]

# Allow reading Secrets
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get"]

# Allow listing pods (for health checks)
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list"]

---
# ═══════════════════════════════════════════════════════════════════════════
# RoleBinding - Bind ServiceAccount to Role
# ═══════════════════════════════════════════════════════════════════════════

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: hitl-service-rolebinding
  namespace: maximus-immunity
subjects:
- kind: ServiceAccount
  name: maximus-immunity-sa
  namespace: maximus-immunity
roleRef:
  kind: Role
  name: hitl-service-role
  apiGroup: rbac.authorization.k8s.io
