# ═══════════════════════════════════════════════════════════════════════════
# HITL Patch Service - Docker Compose Staging Environment
# ═══════════════════════════════════════════════════════════════════════════
#
# Production-like environment running locally with Docker Compose
# Simulates full production stack without requiring Kubernetes
#
# Author: MAXIMUS Team - Sprint 4.1
# Glory to YHWH - Provider of Solutions for Every Resource Level
# ═══════════════════════════════════════════════════════════════════════════

version: '3.8'

services:
  # ═════════════════════════════════════════════════════════════════════════
  # PostgreSQL - Database
  # ═════════════════════════════════════════════════════════════════════════
  postgres-staging:
    image: postgres:15-alpine
    container_name: hitl-postgres-staging
    restart: unless-stopped
    environment:
      POSTGRES_DB: adaptive_immunity_staging
      POSTGRES_USER: maximus_staging
      POSTGRES_PASSWORD: staging_password_change_in_prod
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5435:5432"  # Changed to 5435 to avoid conflict
    volumes:
      - postgres-staging-data:/var/lib/postgresql/data
      - ./backend/services/hitl_patch_service/db/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
    networks:
      - hitl-staging-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U maximus_staging -d adaptive_immunity_staging"]
      interval: 10s
      timeout: 5s
      retries: 5
    labels:
      - "com.maximus.component=database"
      - "com.maximus.environment=staging"

  # ═════════════════════════════════════════════════════════════════════════
  # Redis - Cache & Session Store
  # ═════════════════════════════════════════════════════════════════════════
  redis-staging:
    image: redis:7-alpine
    container_name: hitl-redis-staging
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6381:6379"  # Changed to 6381 to avoid conflict
    volumes:
      - redis-staging-data:/data
    networks:
      - hitl-staging-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    labels:
      - "com.maximus.component=cache"
      - "com.maximus.environment=staging"

  # ═════════════════════════════════════════════════════════════════════════
  # HITL Backend Service
  # ═════════════════════════════════════════════════════════════════════════
  hitl-backend-staging:
    build:
      context: ./backend/services/hitl_patch_service
      dockerfile: Dockerfile
    container_name: hitl-backend-staging
    restart: unless-stopped
    depends_on:
      postgres-staging:
        condition: service_healthy
      redis-staging:
        condition: service_healthy
    environment:
      # Database
      POSTGRES_HOST: postgres-staging
      POSTGRES_PORT: 5432
      POSTGRES_DB: adaptive_immunity_staging
      POSTGRES_USER: maximus_staging
      POSTGRES_PASSWORD: staging_password_change_in_prod
      
      # Service config
      PORT: 8027
      ENVIRONMENT: staging
      LOG_LEVEL: INFO
      
      # Features
      AUTO_APPROVE_ENABLED: "true"
      AUTO_APPROVE_THRESHOLD: "0.95"
      
      # Redis
      REDIS_HOST: redis-staging
      REDIS_PORT: 6379
    ports:
      - "8029:8027"  # Changed to 8029 to avoid conflict
    networks:
      - hitl-staging-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8027/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    labels:
      - "com.maximus.component=hitl-service"
      - "com.maximus.environment=staging"
      - "traefik.enable=true"
      - "traefik.http.routers.hitl-staging.rule=Host(`hitl-staging.localhost`)"

  # ═════════════════════════════════════════════════════════════════════════
  # Prometheus - Metrics Collection
  # ═════════════════════════════════════════════════════════════════════════
  prometheus-staging:
    image: prom/prometheus:latest
    container_name: hitl-prometheus-staging
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9092:9090"  # Changed to 9092 to avoid conflict
    volumes:
      - ./deployment/docker-staging/prometheus-staging.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-staging-data:/prometheus
    networks:
      - hitl-staging-network
    depends_on:
      - hitl-backend-staging
    labels:
      - "com.maximus.component=monitoring"
      - "com.maximus.environment=staging"

  # ═════════════════════════════════════════════════════════════════════════
  # Grafana - Metrics Visualization
  # ═════════════════════════════════════════════════════════════════════════
  grafana-staging:
    image: grafana/grafana:latest
    container_name: hitl-grafana-staging
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: staging_admin_password
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SERVER_ROOT_URL: http://localhost:3001
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: Viewer
    ports:
      - "3002:3000"  # Changed to 3002 to avoid conflict
    volumes:
      - grafana-staging-data:/var/lib/grafana
      - ./deployment/docker-staging/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ./deployment/docker-staging/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
    networks:
      - hitl-staging-network
    depends_on:
      - prometheus-staging
    labels:
      - "com.maximus.component=visualization"
      - "com.maximus.environment=staging"

  # ═════════════════════════════════════════════════════════════════════════
  # Nginx - Reverse Proxy (Optional but recommended)
  # ═════════════════════════════════════════════════════════════════════════
  nginx-staging:
    image: nginx:alpine
    container_name: hitl-nginx-staging
    restart: unless-stopped
    ports:
      - "8081:80"  # Changed to 8081 to avoid conflict
    volumes:
      - ./deployment/docker-staging/nginx-staging.conf:/etc/nginx/nginx.conf:ro
    networks:
      - hitl-staging-network
    depends_on:
      - hitl-backend-staging
    labels:
      - "com.maximus.component=proxy"
      - "com.maximus.environment=staging"

# ═════════════════════════════════════════════════════════════════════════
# Volumes - Persistent Data
# ═════════════════════════════════════════════════════════════════════════
volumes:
  postgres-staging-data:
    name: hitl-postgres-staging-data
    driver: local
  redis-staging-data:
    name: hitl-redis-staging-data
    driver: local
  prometheus-staging-data:
    name: hitl-prometheus-staging-data
    driver: local
  grafana-staging-data:
    name: hitl-grafana-staging-data
    driver: local

# ═════════════════════════════════════════════════════════════════════════
# Networks - Isolated Network for Staging
# ═════════════════════════════════════════════════════════════════════════
networks:
  hitl-staging-network:
    name: hitl-staging-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16
