# HashiCorp Vault Integration
# ==========================
#
# Secrets Management for VÃ©rtice Platform
# Issue #35 - Secrets management (Vault)
#
# Services:
# - Vault server (official image)
# - Vault UI (web interface)
# - Auto-unseal with file backend (dev mode)
#
# Usage:
#   docker-compose -f docker-compose.secrets.yml up -d
#   ./scripts/secrets/vault-init.sh
#

version: '3.8'

services:
  # ==========================================================================
  # HashiCorp Vault - Secrets Management
  # ==========================================================================
  
  vault:
    image: hashicorp/vault:1.15
    container_name: vertice-vault
    restart: unless-stopped
    ports:
      - "8200:8200"  # Vault API/UI
    environment:
      # Server configuration
      VAULT_ADDR: 'http://0.0.0.0:8200'
      VAULT_API_ADDR: 'http://0.0.0.0:8200'
      
      # Development mode (NOT for production!)
      # In production, use proper unseal keys and storage backend
      VAULT_DEV_ROOT_TOKEN_ID: 'vertice-dev-root-token'
      VAULT_DEV_LISTEN_ADDRESS: '0.0.0.0:8200'
      
      # Logging
      VAULT_LOG_LEVEL: 'info'
    
    volumes:
      # Vault configuration
      - ./docker/vault/config:/vault/config:ro
      
      # Vault data (file backend for dev)
      # In production, use: consul, etcd, or cloud storage
      - vertice-vault-data:/vault/file
      
      # Vault logs
      - vertice-vault-logs:/vault/logs
      
      # TLS certificates (if using HTTPS)
      # - ./docker/vault/certs:/vault/certs:ro
    
    cap_add:
      - IPC_LOCK  # Required for mlock() - prevents secrets from being swapped to disk
    
    command: server
    
    networks:
      - vertice-network
    
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    
    labels:
      - "com.vertice.service=vault"
      - "com.vertice.description=Secrets management"
      - "com.vertice.criticality=high"

  # ==========================================================================
  # Vault Agent (Optional) - Auto-renewal and templating
  # ==========================================================================
  
  # vault-agent:
  #   image: hashicorp/vault:1.15
  #   container_name: vertice-vault-agent
  #   restart: unless-stopped
  #   environment:
  #     VAULT_ADDR: 'http://vault:8200'
  #   volumes:
  #     - ./docker/vault/agent-config:/vault/config:ro
  #     - vertice-vault-agent-data:/vault/agent
  #   command: agent -config=/vault/config/agent.hcl
  #   depends_on:
  #     - vault
  #   networks:
  #     - vertice-network

volumes:
  vertice-vault-data:
    driver: local
    labels:
      - "com.vertice.volume=vault-data"
  
  vertice-vault-logs:
    driver: local
    labels:
      - "com.vertice.volume=vault-logs"
  
  # vertice-vault-agent-data:
  #   driver: local

networks:
  vertice-network:
    external: true
    name: vertice-network

# ==========================================================================
# Production Notes
# ==========================================================================
#
# 1. UNSEAL KEYS:
#    - Dev mode auto-unseals with root token
#    - Production: Use 5 unseal keys (threshold 3)
#    - Store keys in separate secure locations
#
# 2. STORAGE BACKEND:
#    - Dev: File backend (local disk)
#    - Production: Consul, etcd, or cloud (S3, GCS, Azure)
#
# 3. HIGH AVAILABILITY:
#    - Dev: Single instance
#    - Production: 3+ instances with Raft consensus
#
# 4. TLS/HTTPS:
#    - Dev: HTTP (localhost only)
#    - Production: HTTPS with valid certificates
#
# 5. ACCESS CONTROL:
#    - Dev: Root token for everything
#    - Production: AppRole, Kubernetes auth, or LDAP
#
# 6. AUDIT LOGGING:
#    - Enable file or syslog audit device
#    - Integrate with SIEM
#
# 7. BACKUP:
#    - Regular snapshots of storage backend
#    - Test restore procedures
#
# 8. MONITORING:
#    - Prometheus metrics endpoint: /v1/sys/metrics
#    - Alert on seal status, performance
#
# ==========================================================================
