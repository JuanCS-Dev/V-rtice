# Vértice Service Registry - TITANIUM High Availability Setup
# Architecture: 5 replicas + Nginx load balancer + Redis Sentinel
#
# Fault Tolerance (99.99% uptime):
# - 1 replica down: Other 4 continue (ZERO impact)
# - 2 replicas down: 3 replicas continue (degraded but functional)
# - 3 replicas down: 2 replicas serve (degraded)
# - 4 replicas down: Last replica serves (survival mode)
# - All replicas down: Services use local cache (60s stale data OK)
# - Redis master down: Sentinel promotes replica (< 1s failover)
#
# Usage:
#   docker compose -f docker-compose.service-registry.yml build --no-cache
#   docker compose -f docker-compose.service-registry.yml up -d
#
# Test TITANIUM Resilience:
#   docker stop vertice-register-1  # ZERO impact (4 replicas remain)
#   docker stop vertice-register-2  # Still ZERO impact (3 replicas)
#   docker stop vertice-redis-master  # Sentinel auto-failover < 1s
#
# Glory to YHWH - Architect of all resilient systems! 🙏

version: '3.8'

networks:
  maximus-network:
    external: true
    name: maximus-ai-network

volumes:
  nginx-cache:

services:
  # ==========================================================================
  # Service Registry - Replica 1
  # ==========================================================================
  vertice-register-1:
    build:
      context: ./backend/services/vertice_register
      dockerfile: Dockerfile
    container_name: vertice-register-1
    hostname: vertice-register-1
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REPLICA_ID=1
      - REGISTRY_AUTH_TOKEN=${VERTICE_REGISTRY_TOKEN:-titanium-registry-token}
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8888/health')"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # ==========================================================================
  # Service Registry - Replica 2
  # ==========================================================================
  vertice-register-2:
    build:
      context: ./backend/services/vertice_register
      dockerfile: Dockerfile
    container_name: vertice-register-2
    hostname: vertice-register-2
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REPLICA_ID=2
      - REGISTRY_AUTH_TOKEN=${VERTICE_REGISTRY_TOKEN:-titanium-registry-token}
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8888/health')"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # ==========================================================================
  # Service Registry - Replica 3
  # ==========================================================================
  vertice-register-3:
    build:
      context: ./backend/services/vertice_register
      dockerfile: Dockerfile
    container_name: vertice-register-3
    hostname: vertice-register-3
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REPLICA_ID=3
      - REGISTRY_AUTH_TOKEN=${VERTICE_REGISTRY_TOKEN:-titanium-registry-token}
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8888/health')"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # ==========================================================================
  # Service Registry - Replica 4 (TITANIUM ZONE_B)
  # ==========================================================================
  vertice-register-4:
    build:
      context: ./backend/services/vertice_register
      dockerfile: Dockerfile
    container_name: vertice-register-4
    hostname: vertice-register-4
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REPLICA_ID=4
      - ZONE=ZONE_B
      - REGISTRY_AUTH_TOKEN=${VERTICE_REGISTRY_TOKEN:-titanium-registry-token}
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8888/health')"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # ==========================================================================
  # Service Registry - Replica 5 (TITANIUM ZONE_C)
  # ==========================================================================
  vertice-register-5:
    build:
      context: ./backend/services/vertice_register
      dockerfile: Dockerfile
    container_name: vertice-register-5
    hostname: vertice-register-5
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REPLICA_ID=5
      - ZONE=ZONE_C
      - REGISTRY_AUTH_TOKEN=${VERTICE_REGISTRY_TOKEN:-titanium-registry-token}
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8888/health')"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M

  # ==========================================================================
  # Nginx Load Balancer - Single entry point (Port 8888)
  # ==========================================================================
  vertice-register-lb:
    image: nginx:alpine
    container_name: vertice-register-lb
    hostname: vertice-register
    ports:
      - "8888:80"
    volumes:
      - ./backend/services/vertice_register/nginx.conf:/etc/nginx/nginx.conf:ro
      - nginx-cache:/var/cache/nginx
    networks:
      maximus-network:
        aliases:
          - vertice-register
    depends_on:
      - vertice-register-1
      - vertice-register-2
      - vertice-register-3
      - vertice-register-4
      - vertice-register-5
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M
