# Vértice Platform - MAXIMUS Subordinate Services
# PENELOPE + MABA + MVP - Complete Orchestration
#
# Constitutional Authority: Constituição Vértice v3.0
# Biblical Foundation: 7 Articles of Governance
#
# Usage:
#   docker-compose -f docker-compose.subordinates.yml up -d
#   docker-compose -f docker-compose.subordinates.yml ps
#   docker-compose -f docker-compose.subordinates.yml logs -f penelope
#   docker-compose -f docker-compose.subordinates.yml down
#
# Requirements:
#   - Docker Engine 20.10+
#   - Docker Compose 1.29+
#   - 8GB RAM minimum
#   - ANTHROPIC_API_KEY environment variable
#
# Validated: 2025-10-31
# Tests: 472/472 passing (100%)
# Coverage: 96.7% average
# Air Gap: 100% compliant

version: "3.8"

services:
  # ==========================================================================
  # INFRASTRUCTURE SERVICES
  # ==========================================================================

  # PostgreSQL - Shared database for all services
  vertice-postgres:
    image: postgres:15-alpine
    container_name: vertice-postgres
    hostname: vertice-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=vertice
      - POSTGRES_INITDB_ARGS=--encoding=UTF8 --locale=en_US.utf8
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backend/services/penelope_service/migrations:/docker-entrypoint-initdb.d:ro
    networks:
      - vertice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis - Shared cache and rate limiting
  vertice-redis:
    image: redis:7-alpine
    container_name: vertice-redis
    hostname: vertice-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - vertice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M

  # Neo4j - Cognitive Map for MABA
  vertice-neo4j:
    image: neo4j:5.28-community
    container_name: vertice-neo4j
    hostname: vertice-neo4j
    ports:
      - "7474:7474" # HTTP UI
      - "7687:7687" # Bolt protocol
    environment:
      - NEO4J_AUTH=neo4j/vertice-neo4j-password
      - NEO4J_dbms_memory_pagecache_size=1G
      - NEO4J_dbms_memory_heap_initial__size=1G
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_PLUGINS=["apoc"]
    volumes:
      - neo4j-data:/data
      - neo4j-logs:/logs
    networks:
      - vertice-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 2G

  # Prometheus - Metrics collection for MVP
  vertice-prometheus:
    image: prom/prometheus:v2.47.0
    container_name: vertice-prometheus
    hostname: vertice-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=30d'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - vertice-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G

  # Loki - Log aggregation for PENELOPE observability
  vertice-loki:
    image: grafana/loki:2.9.0
    container_name: vertice-loki
    hostname: vertice-loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki-data:/loki
    networks:
      - vertice-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 512M

  # ==========================================================================
  # PENELOPE SERVICE - Wisdom & Healing (8154)
  # Port: 8154 (service), 9094 (metrics)
  # Tests: 150/150 (100%), Coverage: 93%
  # Biblical: Sophia + Praótes + Tapeinophrosynē
  # ==========================================================================

  penelope:
    build:
      context: ./backend/services/penelope_service
      dockerfile: Dockerfile
    image: vertice-penelope:1.0.0
    container_name: vertice-penelope
    hostname: vertice-penelope
    ports:
      - "8154:8154" # Main service
      - "9094:9090" # Metrics
    environment:
      # Service Configuration
      - SERVICE_NAME=penelope
      - SERVICE_HOST=0.0.0.0
      - SERVICE_PORT=8154
      - SERVICE_VERSION=1.0.0
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}

      # MAXIMUS Integration
      - MAXIMUS_ENDPOINT=${MAXIMUS_ENDPOINT:-http://vertice-maximus-core-service:8150}

      # Service Registry
      - VERTICE_REGISTRY_URL=${VERTICE_REGISTRY_URL:-http://vertice-register-lb:80}
      - VERTICE_REGISTRY_TOKEN=${VERTICE_REGISTRY_TOKEN:-titanium-registry-token}
      - REGISTRY_HEARTBEAT_INTERVAL=30

      # Database
      - DATABASE_URL=postgresql://postgres:postgres@vertice-postgres:5432/vertice
      - POSTGRES_HOST=vertice-postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=vertice
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres

      # Redis
      - REDIS_URL=redis://vertice-redis:6379
      - REDIS_HOST=vertice-redis
      - REDIS_PORT=6379

      # Observability
      - PROMETHEUS_URL=http://vertice-prometheus:9090
      - LOKI_URL=http://vertice-loki:3100

      # Anthropic API
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:?ANTHROPIC_API_KEY is required}
      - LLM_MODEL=claude-sonnet-4-5-20250929
      - LLM_MAX_TOKENS=4000
      - LLM_TEMPERATURE=0.2

      # PENELOPE Configuration - 7 Biblical Articles
      # Artigo I - Sophia (Sabedoria/Wisdom)
      - SOPHIA_ENABLED=true
      - WISDOM_BASE_MIN_CASES=5
      - TRANSIENT_FAILURE_WINDOW_MINUTES=15
      - INTERVENTION_RISK_THRESHOLD=0.70

      # Artigo II - Praotes (Mansidão/Meekness/Gentleness)
      - PRAOTES_ENABLED=true
      - MAX_PATCH_LINES=25
      - MIN_REVERSIBILITY_SCORE=0.90
      - MAX_FUNCTIONS_MODIFIED=3
      - MIN_MANSIDAO_SCORE=0.70

      # Artigo III - Tapeinophrosyne (Humildade/Humility)
      - TAPEINOPHROSYNE_ENABLED=true
      - CONFIDENCE_THRESHOLD=0.85
      - ESCALATION_ENABLED=true
      - LEARNING_FROM_FAILURE_ENABLED=true

      # Artigo IV - Stewardship (Mordomia)
      - STEWARDSHIP_ENABLED=true
      - PRESERVE_DEVELOPER_INTENT=true
      - RESPECT_CODE_STYLE=true

      # Artigo V - Agape (Love)
      - AGAPE_ENABLED=true
      - SERVICE_WITH_GENTLENESS=true

      # Artigo VI - Sabbath (Rest)
      - SABBATH_ENABLED=true
      - SABBATH_DAY=sunday
      - SABBATH_TIMEZONE=UTC
      - SABBATH_ALLOW_P0_CRITICAL=true

      # Artigo VII - Aletheia (Truth)
      - ALETHEIA_ENABLED=true
      - RADICAL_HONESTY=true
      - DECLARE_UNCERTAINTY=true

      # Digital Twin Configuration
      - DIGITAL_TWIN_ENABLED=true
      - DIGITAL_TWIN_VALIDATION_MINUTES=15
      - DIGITAL_TWIN_TIMEOUT_SECONDS=900

      # Metrics & Performance
      - METRICS_PORT=9090
      - REQUEST_TIMEOUT=300
      - WORKER_PROCESSES=1

      # Security
      - SANDBOX_ENABLED=true
      - MAX_PATCH_ATTEMPTS_PER_HOUR=10

    volumes:
      - penelope-wisdom-base:/app/wisdom_base
      - penelope-logs:/app/logs
      - penelope-patches:/app/patches

    networks:
      - vertice-network

    restart: unless-stopped

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8154/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    depends_on:
      vertice-postgres:
        condition: service_healthy
      vertice-redis:
        condition: service_healthy
      vertice-loki:
        condition: service_started

    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 2G
        reservations:
          cpus: "0.5"
          memory: 512M

    labels:
      - "com.vertice.service=penelope"
      - "com.vertice.type=subordinate"
      - "com.vertice.category=wisdom"
      - "com.vertice.validated=2025-10-31"

  # ==========================================================================
  # MABA SERVICE - Browser Agent (8152)
  # Port: 8152 (service), 9092 (metrics)
  # Tests: 156/156 (100%), Coverage: 98%
  # Features: Playwright automation, Cognitive map, Neo4j graph
  # ==========================================================================

  maba:
    build:
      context: ./backend/services/maba_service
      dockerfile: Dockerfile
    image: vertice-maba:1.0.0
    container_name: vertice-maba
    hostname: vertice-maba
    ports:
      - "8152:8152" # Main service
      - "9092:9090" # Metrics
    environment:
      # Service Configuration
      - SERVICE_NAME=maba
      - SERVICE_HOST=0.0.0.0
      - SERVICE_PORT=8152
      - SERVICE_VERSION=1.0.0
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}

      # MAXIMUS Integration
      - MAXIMUS_ENDPOINT=${MAXIMUS_ENDPOINT:-http://vertice-maximus-core-service:8150}

      # Service Registry
      - VERTICE_REGISTRY_URL=${VERTICE_REGISTRY_URL:-http://vertice-register-lb:80}
      - VERTICE_REGISTRY_TOKEN=${VERTICE_REGISTRY_TOKEN:-titanium-registry-token}
      - REGISTRY_HEARTBEAT_INTERVAL=30

      # Database
      - DATABASE_URL=postgresql://postgres:postgres@vertice-postgres:5432/vertice
      - POSTGRES_HOST=vertice-postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=vertice
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres

      # Redis
      - REDIS_URL=redis://vertice-redis:6379
      - REDIS_HOST=vertice-redis
      - REDIS_PORT=6379

      # Neo4j (Cognitive Map)
      - NEO4J_URI=bolt://vertice-neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=vertice-neo4j-password
      - NEO4J_DATABASE=maba_cognitive_map

      # Anthropic API
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:?ANTHROPIC_API_KEY is required}

      # Browser Configuration (Playwright)
      - BROWSER_TYPE=chromium
      - BROWSER_HEADLESS=true
      - BROWSER_TIMEOUT=30000
      - MAX_BROWSER_INSTANCES=5
      - BROWSER_POOL_SIZE=3
      - BROWSER_ARGS=--no-sandbox,--disable-setuid-sandbox,--disable-dev-shm-usage

      # Cognitive Map Configuration
      - COGNITIVE_MAP_MAX_PAGES=10000
      - MAX_DOM_ELEMENTS=500
      - LEARNING_RATE=0.01
      - MIN_ELEMENT_IMPORTANCE=0.3

      # Metrics & Performance
      - METRICS_PORT=9090
      - REQUEST_TIMEOUT=300
      - WORKER_PROCESSES=1

    volumes:
      - maba-screenshots:/app/screenshots
      - maba-logs:/app/logs
      # Required for Playwright/Chromium in container
      - /dev/shm:/dev/shm

    networks:
      - vertice-network

    restart: unless-stopped

    # Required capabilities for browser automation
    cap_add:
      - SYS_ADMIN

    security_opt:
      - seccomp=unconfined

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8152/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

    depends_on:
      vertice-postgres:
        condition: service_healthy
      vertice-redis:
        condition: service_healthy
      vertice-neo4j:
        condition: service_started

    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: 4G
        reservations:
          cpus: "1.0"
          memory: 2G

    labels:
      - "com.vertice.service=maba"
      - "com.vertice.type=subordinate"
      - "com.vertice.category=automation"
      - "com.vertice.validated=2025-10-31"

  # ==========================================================================
  # MVP SERVICE - Vision Protocol (8153)
  # Port: 8153 (service), 9093 (metrics)
  # Tests: 166/166 (100%), Coverage: 99%
  # Features: LLM narratives, Prometheus observer, Anomaly detection
  # ==========================================================================

  mvp:
    build:
      context: ./backend/services/mvp_service
      dockerfile: Dockerfile
    image: vertice-mvp:1.0.0
    container_name: vertice-mvp
    hostname: vertice-mvp
    ports:
      - "8153:8153" # Main service
      - "9093:9090" # Metrics
    environment:
      # Service Configuration
      - SERVICE_NAME=mvp
      - SERVICE_HOST=0.0.0.0
      - SERVICE_PORT=8153
      - SERVICE_VERSION=1.0.0
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}

      # MAXIMUS Integration
      - MAXIMUS_ENDPOINT=${MAXIMUS_ENDPOINT:-http://vertice-maximus-core-service:8150}

      # Service Registry
      - VERTICE_REGISTRY_URL=${VERTICE_REGISTRY_URL:-http://vertice-register-lb:80}
      - VERTICE_REGISTRY_TOKEN=${VERTICE_REGISTRY_TOKEN:-titanium-registry-token}
      - REGISTRY_HEARTBEAT_INTERVAL=30

      # Database
      - DATABASE_URL=postgresql://postgres:postgres@vertice-postgres:5432/vertice
      - POSTGRES_HOST=vertice-postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=vertice
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres

      # Redis
      - REDIS_URL=redis://vertice-redis:6379
      - REDIS_HOST=vertice-redis
      - REDIS_PORT=6379

      # Anthropic API (LLM for narrative generation)
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:?ANTHROPIC_API_KEY is required}
      - LLM_MODEL=claude-sonnet-4-5-20250929
      - LLM_MAX_TOKENS=2000
      - LLM_TEMPERATURE=0.7

      # ElevenLabs API (TTS - optional)
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY:-}
      - TTS_VOICE_ID=${TTS_VOICE_ID:-marcus}
      - TTS_MODEL=eleven_multilingual_v2
      - TTS_OPTIMIZE_STREAMING_LATENCY=3

      # Azure Blob Storage (optional)
      - AZURE_STORAGE_ACCOUNT=${AZURE_STORAGE_ACCOUNT:-}
      - AZURE_STORAGE_KEY=${AZURE_STORAGE_KEY:-}
      - AZURE_STORAGE_CONTAINER=mvp-audio-narratives

      # MVP Configuration
      - NARRATIVE_TARGET_DURATION=30
      - NARRATIVE_WORD_COUNT_TARGET=250
      - MIN_NQS_SCORE=85
      - MIN_AQS_SCORE=90
      - ENABLE_AUDIO_CACHE=true
      - MAX_COST_PER_NARRATIVE_USD=0.50

      # Content Moderation
      - ENABLE_PII_DETECTION=true
      - ENABLE_PROFANITY_FILTER=true
      - ENABLE_LGPD_COMPLIANCE=true

      # Metrics & Performance
      - METRICS_PORT=9090
      - REQUEST_TIMEOUT=120
      - WORKER_PROCESSES=1

    volumes:
      - mvp-cache:/app/cache
      - mvp-logs:/app/logs

    networks:
      - vertice-network

    restart: unless-stopped

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8153/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    depends_on:
      vertice-postgres:
        condition: service_healthy
      vertice-redis:
        condition: service_healthy
      vertice-prometheus:
        condition: service_started

    deploy:
      resources:
        limits:
          cpus: "1.0"
          memory: 1G
        reservations:
          cpus: "0.25"
          memory: 256M

    labels:
      - "com.vertice.service=mvp"
      - "com.vertice.type=subordinate"
      - "com.vertice.category=intelligence"
      - "com.vertice.validated=2025-10-31"

# ==========================================================================
# NETWORKS
# ==========================================================================

networks:
  vertice-network:
    name: vertice-network
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.28.0.0/16

# ==========================================================================
# VOLUMES - Persistent Data Storage
# ==========================================================================

volumes:
  # Infrastructure
  postgres-data:
    name: vertice-postgres-data
    driver: local
  redis-data:
    name: vertice-redis-data
    driver: local
  neo4j-data:
    name: vertice-neo4j-data
    driver: local
  neo4j-logs:
    name: vertice-neo4j-logs
    driver: local
  prometheus-data:
    name: vertice-prometheus-data
    driver: local
  loki-data:
    name: vertice-loki-data
    driver: local

  # PENELOPE (Wisdom & Healing)
  penelope-wisdom-base:
    name: vertice-penelope-wisdom-base
    driver: local
  penelope-logs:
    name: vertice-penelope-logs
    driver: local
  penelope-patches:
    name: vertice-penelope-patches
    driver: local

  # MABA (Browser Agent)
  maba-screenshots:
    name: vertice-maba-screenshots
    driver: local
  maba-logs:
    name: vertice-maba-logs
    driver: local

  # MVP (Vision Protocol)
  mvp-cache:
    name: vertice-mvp-cache
    driver: local
  mvp-logs:
    name: vertice-mvp-logs
    driver: local
