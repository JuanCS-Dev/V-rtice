services:
  api_gateway:
    build:
      context: ./backend
      dockerfile: services/api_gateway/Dockerfile
    container_name: vertice-api-gateway
    ports:
    - 8000:8000
    environment:
    - SINESP_SERVICE_URL=http://sinesp_service:80
    - CYBER_SERVICE_URL=http://cyber_service:80
    - DOMAIN_SERVICE_URL=http://domain_service:8014
    - IP_INTELLIGENCE_SERVICE_URL=http://ip_intelligence_service:8034
    - NETWORK_MONITOR_SERVICE_URL=http://network_monitor_service:8120
    - NMAP_SERVICE_URL=http://nmap_service:80
    - OSINT_SERVICE_URL=http://osint-service:8049
    - GOOGLE_OSINT_SERVICE_URL=http://google_osint_service:8016
    - MAXIMUS_PREDICT_URL=http://maximus_predict:804040
    - ATLAS_SERVICE_URL=http://atlas_service:8000
    - AUTH_SERVICE_URL=http://auth_service:80
    - VULN_SCANNER_SERVICE_URL=http://vuln_scanner_service:80
    - SOCIAL_ENG_SERVICE_URL=http://social_eng_service:80
    - THREAT_INTEL_SERVICE_URL=http://threat_intel_service:8013
    - MALWARE_ANALYSIS_SERVICE_URL=http://malware_analysis_service:8014
    - SSL_MONITOR_SERVICE_URL=http://ssl_monitor_service:8015
    - MAXIMUS_ORCHESTRATOR_URL=http://maximus_orchestrator_service:8125
    - MAXIMUS_CORE_SERVICE_URL=http://maximus_core_service:8150
    - MAXIMUS_EUREKA_URL=http://maximus_eureka:8200
    - MAXIMUS_ORACULO_URL=http://maximus-oraculo:8038
    - ETHICAL_AUDIT_SERVICE_URL=http://ethical_audit_service:8612
    - IMMUNIS_API_URL=http://immunis_api_service:8300
    - HCL_ANALYZER_URL=http://hcl-analyzer:8017
    - HCL_EXECUTOR_URL=http://hcl-executor:8004
    - HCL_KB_URL=http://hcl-kb-service:8019
    - HCL_MONITOR_URL=http://hcl-monitor:8020
    - HCL_PLANNER_URL=http://hcl-planner:8003
    - VISUAL_CORTEX_URL=http://visual_cortex_service:8206
    - AUDITORY_CORTEX_URL=http://auditory_cortex_service:8207
    - SOMATOSENSORY_URL=http://somatosensory_service:8208
    - CHEMICAL_SENSING_URL=http://chemical_sensing_service:8209
    - VESTIBULAR_URL=http://vestibular_service:8210
    - PREFRONTAL_CORTEX_URL=http://prefrontal_cortex_service:8211
    - DIGITAL_THALAMUS_URL=http://digital_thalamus_service:8212
    - NARRATIVE_FILTER_URL=http://narrative_manipulation_filter:8213
    - AI_IMMUNE_SYSTEM_URL=http://ai_immune_system:8214
    - HOMEOSTATIC_REGULATION_URL=http://homeostatic_regulation:8215
    - NETWORK_RECON_URL=http://network_recon_service:8532
    - VULN_INTEL_URL=http://vuln_intel_service:8533
    - WEB_ATTACK_URL=http://web_attack_service:8534
    - C2_ORCHESTRATION_URL=http://c2_orchestration_service:8535
    - BAS_URL=http://bas_service:8536
    - OFFENSIVE_GATEWAY_URL=http://offensive_gateway:8537
    - OFFENSIVE_TOOLS_URL=http://offensive_tools_service:8010
    - NARRATIVE_ANALYSIS_URL=http://narrative_analysis_service:8042
    - PREDICTIVE_THREAT_HUNTING_URL=http://predictive_threat_hunting_service:8050
    - AUTONOMOUS_INVESTIGATION_URL=http://autonomous_investigation_service:8007
    - IMMUNIS_TREG_URL=http://immunis_treg_service:8033
    - MEMORY_CONSOLIDATION_URL=http://memory_consolidation_service:8019
    - ADAPTIVE_IMMUNITY_URL=http://adaptive_immunity_service:8000
    - REFLEX_TRIAGE_ENGINE_URL=http://reflex_triage_engine:8052
    - THREAT_INTEL_BRIDGE_URL=http://threat_intel_bridge:8710
    - REACTIVE_FABRIC_ANALYSIS_URL=http://reactive_fabric_analysis:8601
    - ADAPTIVE_IMMUNE_SYSTEM_URL=http://adaptive_immune_system:8003
    - EDGE_AGENT_URL=http://edge_agent_service:8015
    - HPC_SERVICE_URL=http://hpc_service:8027
    - HSAS_SERVICE_URL=http://hsas_service:8024
    - MAXIMUS_INTEGRATION_URL=http://maximus_integration_service:8099
    - TATACA_INGESTION_URL=http://tataca_ingestion:8028
    - MAXIMUS_EUREKA_URL=http://maximus_eureka:8200
    - MAXIMUS_API_KEY=${MAXIMUS_API_KEY:-changeme-maximus-key}
    depends_on:
    - redis
    - sinesp_service
    - cyber_service
    - domain_service
    - ip_intelligence_service
    - network_monitor_service
    - nmap_service
    - osint-service
    - maximus_predict
    - auth_service
    - atlas_service
    - vuln_scanner_service
    - social_eng_service
    - threat_intel_service
    - malware_analysis_service
    - ssl_monitor_service
    - maximus_orchestrator_service
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  offensive_tools_service:
    build:
      context: ./backend
      dockerfile: services/offensive_tools_service/Dockerfile
    container_name: vertice-offensive-tools
    ports:
    - 8010:8010
    environment:
    - PORT=8010
    - LOG_LEVEL=info
    - CORS_ORIGINS=*
    volumes:
    - ./backend/security:/app/security:ro
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8060/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  redis:
    image: redis:alpine
    container_name: vertice-redis
    ports:
    - 6379:6379
    volumes:
    - redis-data:/data
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
  postgres:
    image: postgres:15-alpine
    container_name: vertice-postgres
    ports:
    - 5432:5432
    environment:
    - POSTGRES_USER=postgres
    - POSTGRES_PASSWORD=postgres
    - POSTGRES_DB=aurora
    volumes:
    - postgres-data:/var/lib/postgresql/data
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  qdrant:
    image: qdrant/qdrant:latest
    container_name: vertice-qdrant
    ports:
    - 6333:6333
    - 6334:6334
    volumes:
    - qdrant-data:/qdrant/storage
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  sinesp_service:
    build: ./backend/services/sinesp_service
    container_name: vertice-sinesp
    ports:
    - 8102:8054
    volumes:
    - ./backend/services/sinesp_service:/code
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8054/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  cyber_service:
    build: ./backend/services/cyber_service
    container_name: vertice-cyber
    volumes:
    - ./backend/services/cyber_service:/app
    - /var/log:/var/log:ro
    - /etc:/etc:ro
    privileged: true
    ports:
    - 8103:8012
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8013/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  domain_service:
    build: ./backend/services/domain_service
    container_name: vertice-domain
    volumes:
    - ./backend/services/domain_service:/app
    ports:
    - 8104:8014
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  ip_intelligence_service:
    build: ./backend/services/ip_intelligence_service
    container_name: vertice-ip-intel
    volumes:
    - ./backend/services/ip_intelligence_service:/app
    ports:
    - 8105:8034
    environment:
    - CACHE_TTL_SECONDS=86400
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8034/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  network_monitor_service:
    build: ./backend/services/network_monitor_service
    container_name: maximus-network-monitor
    volumes:
    - ./backend/services/network_monitor_service:/app
    ports:
    - 8120:8044
    cap_add:
    - NET_ADMIN
    - NET_RAW
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8044/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  nmap_service:
    build: ./backend/services/nmap_service
    container_name: vertice-nmap
    volumes:
    - ./backend/services/nmap_service:/app
    ports:
    - 8106:8047
    cap_add:
    - NET_ADMIN
    - NET_RAW
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8047/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  osint-service:
    build: ./backend/services/osint_service
    container_name: vertice-osint
    ports:
    - 8036:8049
    environment:
    - REDIS_HOST=redis
    - MAXIMUS_HOST=maximus_predict
    - PYTHONUNBUFFERED=1
    - CHROME_BIN=/usr/bin/chromium
    - CHROMEDRIVER_PATH=/usr/bin/chromedriver
    depends_on:
    - redis
    - maximus_predict
    volumes:
    - ./backend/services/osint_service:/app
    - osint-data:/app/data
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8049/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  maximus_predict:
    build: ./backend/services/maximus_predict
    container_name: maximus-predict
    volumes:
    - ./backend/services/maximus_predict:/code
    - maximus-models:/models
    ports:
    - 8126:8040
    environment:
    - MODEL_PATH=/models
    - PYTHONUNBUFFERED=1
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8040/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  atlas_service:
    build: ./backend/services/atlas_service
    container_name: vertice-atlas
    volumes:
    - ./backend/services/atlas_service:/app
    ports:
    - 8109:8004
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  auth_service:
    build: ./backend/services/auth_service
    container_name: vertice-auth
    volumes:
    - ./backend/services/auth_service:/app
    ports:
    - 8110:8006
    environment:
    - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
    - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
    - JWT_SECRET=${JWT_SECRET:-vertice-super-secret-key-2024}
    - REDIS_URL=redis://redis:6379
    - AUTHORIZED_DOMAINS=${AUTHORIZED_DOMAINS:-}
    - AUTHORIZED_EMAILS=${AUTHORIZED_EMAILS:-}
    - ADMIN_EMAILS=${ADMIN_EMAILS:-}
    depends_on:
    - redis
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8061/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  vuln_scanner_service:
    build: ./backend/services/vuln_scanner_service
    container_name: vertice-vuln-scanner
    volumes:
    - ./backend/services/vuln_scanner_service:/app
    ports:
    - 8111:8063
    cap_add:
    - NET_ADMIN
    - NET_RAW
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8063/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  social_eng_service:
    build: ./backend/services/social_eng_service
    container_name: vertice-social-eng
    volumes:
    - ./backend/services/social_eng_service:/app
    ports:
    - 8112:8055
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8055/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  prometheus:
    image: prom/prometheus:latest
    container_name: vertice-prometheus
    ports:
    - 9090:9090
    volumes:
    - ./prometheus.yml:/etc/prometheus/prometheus.yml
    - prometheus-data:/prometheus
    command:
    - --config.file=/etc/prometheus/prometheus.yml
    - --storage.tsdb.path=/prometheus
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  grafana:
    image: grafana/grafana:latest
    container_name: vertice-grafana
    ports:
    - 3001:3000
    environment:
    - GF_SECURITY_ADMIN_PASSWORD=vertice2024
    volumes:
    - grafana-data:/var/lib/grafana
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  threat_intel_service:
    build: ./backend/services/threat_intel_service
    container_name: vertice-threat-intel
    ports:
    - 8113:8059
    volumes:
    - ./backend/services/threat_intel_service:/app
    environment:
    - ABUSEIPDB_API_KEY=${ABUSEIPDB_API_KEY}
    - VIRUSTOTAL_API_KEY=${VIRUSTOTAL_API_KEY}
    - GREYNOISE_API_KEY=${GREYNOISE_API_KEY}
    - OTX_API_KEY=${OTX_API_KEY}
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8059/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  malware_analysis_service:
    build: ./backend/services/malware_analysis_service
    container_name: vertice-malware-analysis
    ports:
    - 8114:8035
    volumes:
    - ./backend/services/malware_analysis_service:/app
    environment:
    - VIRUSTOTAL_API_KEY=${VIRUSTOTAL_API_KEY}
    - HYBRID_ANALYSIS_API_KEY=${HYBRID_ANALYSIS_API_KEY}
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8035/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  ssl_monitor_service:
    build: ./backend/services/ssl_monitor_service
    container_name: vertice-ssl-monitor
    ports:
    - 8115:8057
    volumes:
    - ./backend/services/ssl_monitor_service:/app
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8057/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  adr_core_service:
    build: ./backend/services/adr_core_service
    container_name: vertice-adr-core
    ports:
    - 8130:8001
    volumes:
    - ./backend/services/adr_core_service:/app
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8150/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  maximus_integration_service:
    build: ./backend/services/maximus_integration_service
    container_name: maximus-integration
    ports:
    - 8127:8037
    volumes:
    - ./backend/services/maximus_integration_service:/app
    - ./backend/services/maximus_oraculo:/app/maximus_oraculo
    - ./backend/services/maximus_eureka:/app/maximus_eureka
    environment:
    - ORACULO_TARGET_PATH=/app/maximus_oraculo
    - EUREKA_SCAN_PATH=/tmp/malware_samples
    - ADR_CORE_URL=http://adr_core_service:8130
    - MAXIMUS_CORE_URL=http://maximus_core_service:8150
    depends_on:
    - adr_core_service
    - maximus_core_service
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8037/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  maximus_orchestrator_service:
    build: ./backend/services/maximus_orchestrator_service
    container_name: maximus-orchestrator
    ports:
    - 8125:8016
    volumes:
    - ./backend/services/maximus_orchestrator_service:/app
    environment:
    - IP_INTEL_SERVICE_URL=http://ip_intelligence_service:8034
    - THREAT_INTEL_SERVICE_URL=http://threat_intel_service:8013
    - MALWARE_ANALYSIS_SERVICE_URL=http://malware_analysis_service:8014
    - SSL_MONITOR_SERVICE_URL=http://ssl_monitor_service:8015
    - NMAP_SERVICE_URL=http://nmap_service:80
    - VULN_SCANNER_SERVICE_URL=http://vuln_scanner_service:80
    - SOCIAL_ENG_SERVICE_URL=http://social_eng_service:80
    - DOMAIN_SERVICE_URL=http://domain_service:80
    depends_on:
    - threat_intel_service
    - malware_analysis_service
    - ssl_monitor_service
    - ip_intelligence_service
    - nmap_service
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8016/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  maximus_core_service:
    build: ./backend/services/maximus_core_service
    container_name: maximus-core
    ports:
    - 8150:8150
    - 8151:8150
    # volumes:  # REMOVED: Volume mount was overriding Dockerfile COPY, causing import errors
    # - ./backend/services/maximus_core_service:/app
    environment:
    - LLM_PROVIDER=${LLM_PROVIDER:-gemini}
    - GEMINI_API_KEY=${GEMINI_API_KEY}
    - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    - OPENAI_API_KEY=${OPENAI_API_KEY}
    - REDIS_URL=redis://redis:6379
    - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/aurora
    - THREAT_INTEL_SERVICE_URL=http://threat_intel_service:8013
    - MALWARE_ANALYSIS_SERVICE_URL=http://malware_analysis_service:8014
    - SSL_MONITOR_SERVICE_URL=http://ssl_monitor_service:8015
    - IP_INTEL_SERVICE_URL=http://ip_intelligence_service:8034
    - NMAP_SERVICE_URL=http://nmap_service:80
    - VULN_SCANNER_SERVICE_URL=http://vuln_scanner_service:80
    - DOMAIN_SERVICE_URL=http://domain_service:80
    - MAXIMUS_PREDICT_URL=http://maximus_predict:804040
    - OSINT_SERVICE_URL=http://osint-service:8100
    - NEUROMODULATION_URL=http://neuromodulation_service:8033
    - STRATEGIC_PLANNING_URL=http://strategic_planning_service:8042
    - CLOUD_COORDINATOR_URL=http://cloud_coordinator_service:8011
    depends_on:
    - redis
    - postgres
    - threat_intel_service
    - malware_analysis_service
    - ssl_monitor_service
    - ip_intelligence_service
    - nmap_service
    - vuln_scanner_service
    - domain_service
    - maximus_predict
    - osint-service
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8150/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
  ethical_audit_service:
    build: ./backend/services/ethical_audit_service
    container_name: ethical-audit
    ports:
    - 8612:8612
    volumes:
    - ./backend/services/ethical_audit_service:/app
    environment:
    - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/aurora
    depends_on:
    - postgres
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8612/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  hcl-postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: hcl-postgres
    environment:
      POSTGRES_DB: hcl_knowledge
      POSTGRES_USER: hcl_user
      POSTGRES_PASSWORD: hcl_password
    ports:
    - 5433:5432
    volumes:
    - hcl_postgres_data:/var/lib/postgresql/data
    - ./backend/services/hcl_kb_service/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    healthcheck:
      test:
      - CMD-SHELL
      - pg_isready -U hcl_user -d hcl_knowledge
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
    - maximus-network
    restart: unless-stopped
  hcl-kafka:
    image: apache/kafka:latest
    container_name: hcl-kafka
    ports:
    - 9092:9092
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://hcl-kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@hcl-kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      CLUSTER_ID: VerticeHCLCluster123456
    volumes:
    - hcl_kafka_data:/var/lib/kafka/data
    healthcheck:
      test:
      - CMD-SHELL
      - /opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server localhost:9092 || exit 1
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 20s
    networks:
    - maximus-network
    restart: unless-stopped
  hcl-kb-service:
    build:
      context: ./backend/services/hcl_kb_service
      dockerfile: Dockerfile
    container_name: hcl-kb-service
    ports:
    - 8421:8019
    environment:
      SERVICE_NAME: hcl_kb
      DATABASE_URL: postgresql://hcl_user:hcl_password@hcl-postgres/hcl_knowledge
      LOG_LEVEL: INFO
    depends_on:
      hcl-postgres:
        condition: service_healthy
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8019/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  hcl-monitor:
    build:
      context: ./backend/services/hcl_monitor_service
      dockerfile: Dockerfile
    container_name: hcl-monitor
    ports:
    - 8424:8020
    environment:
      SERVICE_NAME: hcl_monitor
      KB_API_URL: http://hcl-kb-service:8019
      KAFKA_BROKERS: hcl-kafka:9092
      COLLECTION_INTERVAL: 15
      LOG_LEVEL: INFO
    depends_on:
      hcl-kafka:
        condition: service_healthy
      hcl-kb-service:
        condition: service_healthy
    networks:
    - maximus-network
    restart: unless-stopped
    privileged: true
    volumes:
    - /proc:/host/proc:ro
    - /sys:/host/sys:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8150/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  hcl-analyzer:
    build:
      context: ./backend/services/hcl_analyzer_service
      dockerfile: Dockerfile
    container_name: hcl-analyzer
    ports:
    - 8427:8017
    environment:
      SERVICE_NAME: hcl_analyzer
      KB_API_URL: http://hcl-kb-service:8019
      KAFKA_BROKERS: hcl-kafka:9092
      MODEL_DIR: /app/models
      LOG_LEVEL: INFO
    depends_on:
      hcl-kafka:
        condition: service_healthy
      hcl-kb-service:
        condition: service_healthy
    volumes:
    - hcl_analyzer_models:/app/models
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8017/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  hcl-planner:
    build:
      context: ./backend/services/hcl_planner_service
      dockerfile: Dockerfile
    container_name: hcl-planner
    ports:
    - 8430:8003
    environment:
      SERVICE_NAME: hcl_planner
      KB_API_URL: http://hcl-kb-service:8019
      KAFKA_BROKERS: hcl-kafka:9092
      MODEL_DIR: /app/models
      LOG_LEVEL: INFO
    depends_on:
      hcl-kafka:
        condition: service_healthy
      hcl-kb-service:
        condition: service_healthy
      hcl-analyzer:
        condition: service_healthy
    volumes:
    - hcl_planner_models:/app/models
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  hcl-executor:
    build:
      context: ./backend/services/hcl_executor_service
      dockerfile: Dockerfile
    container_name: hcl-executor
    ports:
    - 8433:8004
    environment:
      SERVICE_NAME: hcl_executor
      KB_API_URL: http://hcl-kb-service:8019
      KAFKA_BROKERS: hcl-kafka:9092
      K8S_NAMESPACE: default
      IN_CLUSTER: 'false'
      DRY_RUN: 'true'
      ENABLE_ROLLBACK: 'true'
      LOG_LEVEL: INFO
    depends_on:
      hcl-kafka:
        condition: service_healthy
      hcl-kb-service:
        condition: service_healthy
      hcl-planner:
        condition: service_healthy
    volumes:
    - ${HOME}/.kube:/home/vertice/.kube:ro
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  maximus-oraculo:
    build:
      context: ./backend/services/maximus_oraculo
      dockerfile: Dockerfile
    container_name: maximus-oraculo
    ports:
    - 8152:8038
    environment:
      SERVICE_NAME: maximus_oraculo
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      LOG_LEVEL: INFO
      KAFKA_BROKERS: hcl-kafka:9092
    volumes:
    - ../:/workspace:ro
    - ${HOME}/.gitconfig:/home/vertice/.gitconfig:ro
    - oraculo_sessions:/app/sessions
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8038/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  google_osint_service:
    build: ./backend/services/google_osint_service
    container_name: vertice-google-osint
    ports:
    - 8101:8016
    volumes:
    - ./backend/services/google_osint_service:/app
    environment:
    - REDIS_URL=redis://redis:6379/3
    - PYTHONPATH=/app:/app/backend
    depends_on:
    - redis
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8016/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  immunis_api_service:
    build: ./backend/services/immunis_api_service
    container_name: vertice-immunis-api
    ports:
    - 8300:8025
    volumes:
    - ./backend/services/immunis_api_service:/app
    environment:
    - MACROPHAGE_URL=http://immunis_macrophage_service:8312
    - NEUTROPHIL_URL=http://immunis_neutrophil_service:8313
    - DENDRITIC_URL=http://immunis_dendritic_service:8314
    - BCELL_URL=http://immunis_bcell_service:8316
    - HELPER_T_URL=http://immunis_helper_t_service:8317
    - CYTOTOXIC_T_URL=http://immunis_cytotoxic_t_service:8318
    - NK_CELL_URL=http://immunis_nk_cell_service:8319
    depends_on:
    - immunis_macrophage_service
    - immunis_neutrophil_service
    - immunis_dendritic_service
    - immunis_bcell_service
    - immunis_helper_t_service
    - immunis_cytotoxic_t_service
    - immunis_nk_cell_service
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8025/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  immunis_macrophage_service:
    build: ./backend/services/immunis_macrophage_service
    container_name: vertice-immunis-macrophage
    ports:
    - 8312:8030
    volumes:
    - ./backend/services/immunis_macrophage_service:/app
    environment:
    - PORT=8030
    - CUCKOO_API_URL=${CUCKOO_API_URL:-http://cuckoo:8090}
    - CUCKOO_API_KEY=${CUCKOO_API_KEY:-}
    - KAFKA_BOOTSTRAP_SERVERS=hcl-kafka:9092
    depends_on:
    - cuckoo
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8150/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  cuckoo:
    image: blacktop/cuckoo:latest
    container_name: vertice-cuckoo-sandbox
    ports:
    - 8090:8090
    - 2042:2042
    volumes:
    - cuckoo_data:/cuckoo
    - cuckoo_tmp:/tmp/cuckoo
    environment:
    - CUCKOO_API=yes
    - CUCKOO_WEB=yes
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
  immunis_neutrophil_service:
    build: ./backend/services/immunis_neutrophil_service
    container_name: vertice-immunis-neutrophil
    ports:
    - 8313:8031
    volumes:
    - ./backend/services/immunis_neutrophil_service:/app
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8031/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  immunis_dendritic_service:
    build: ./backend/services/immunis_dendritic_service
    container_name: vertice-immunis-dendritic
    ports:
    - 8314:8028
    volumes:
    - ./backend/services/immunis_dendritic_service:/app
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8028/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  immunis_bcell_service:
    build: ./backend/services/immunis_bcell_service
    container_name: vertice-immunis-bcell
    ports:
    - 8316:8026
    volumes:
    - ./backend/services/immunis_bcell_service:/app
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8026/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  immunis_helper_t_service:
    build: ./backend/services/immunis_helper_t_service
    container_name: vertice-immunis-helper-t
    ports:
    - 8317:8029
    volumes:
    - ./backend/services/immunis_helper_t_service:/app
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8029/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  immunis_cytotoxic_t_service:
    build: ./backend/services/immunis_cytotoxic_t_service
    container_name: vertice-immunis-cytotoxic-t
    ports:
    - 8318:8027
    volumes:
    - ./backend/services/immunis_cytotoxic_t_service:/app
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8027/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  immunis_nk_cell_service:
    build: ./backend/services/immunis_nk_cell_service
    container_name: vertice-immunis-nk-cell
    ports:
    - 8319:8032
    volumes:
    - ./backend/services/immunis_nk_cell_service:/app
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8032/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  auditory_cortex_service:
    build: ./backend/services/auditory_cortex_service
    container_name: vertice-auditory-cortex
    ports:
    - 8207:8005
    volumes:
    - ./backend/services/auditory_cortex_service:/app
    environment:
    - DIGITAL_THALAMUS_URL=http://digital_thalamus_service:8012
    # depends_on removed to break circular dependency with digital_thalamus_service
    # Service will connect via DIGITAL_THALAMUS_URL when thalamus is available
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  visual_cortex_service:
    build: ./backend/services/visual_cortex_service
    container_name: vertice-visual-cortex
    ports:
    - 8206:8061
    volumes:
    - ./backend/services/visual_cortex_service:/app
    environment:
    - DIGITAL_THALAMUS_URL=http://digital_thalamus_service:8012
    # depends_on removed to break circular dependency with digital_thalamus_service
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8061/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  somatosensory_service:
    build: ./backend/services/somatosensory_service
    container_name: vertice-somatosensory
    ports:
    - 8208:8056
    volumes:
    - ./backend/services/somatosensory_service:/app
    environment:
    - DIGITAL_THALAMUS_URL=http://digital_thalamus_service:8012
    # depends_on removed to break circular dependency with digital_thalamus_service
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8056/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  chemical_sensing_service:
    build: ./backend/services/chemical_sensing_service
    container_name: vertice-chemical-sensing
    ports:
    - 8209:8010
    volumes:
    - ./backend/services/chemical_sensing_service:/app
    environment:
    - DIGITAL_THALAMUS_URL=http://digital_thalamus_service:8012
    # depends_on removed to break circular dependency with digital_thalamus_service
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  vestibular_service:
    build: ./backend/services/vestibular_service
    container_name: vertice-vestibular
    ports:
    - 8210:8060
    volumes:
    - ./backend/services/vestibular_service:/app
    environment:
    - DIGITAL_THALAMUS_URL=http://digital_thalamus_service:8012
    # depends_on removed to break circular dependency with digital_thalamus_service
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8060/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  prefrontal_cortex_service:
    build: ./backend/services/prefrontal_cortex_service
    container_name: vertice-prefrontal-cortex
    ports:
    - 8211:8051
    volumes:
    - ./backend/services/prefrontal_cortex_service:/app
    environment:
    - VISUAL_CORTEX_URL=http://visual_cortex_service:8206
    - AUDITORY_CORTEX_URL=http://auditory_cortex_service:8207
    - SOMATOSENSORY_URL=http://somatosensory_service:8208
    - CHEMICAL_SENSING_URL=http://chemical_sensing_service:8209
    - VESTIBULAR_URL=http://vestibular_service:8210
    - KAFKA_BOOTSTRAP_SERVERS=kafka-immunity:9096
    - KAFKA_CONSCIOUSNESS_TOPIC=consciousness-events
    depends_on:
    - visual_cortex_service
    - kafka-immunity
    - auditory_cortex_service
    - somatosensory_service
    - chemical_sensing_service
    - vestibular_service
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8051/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  digital_thalamus_service:
    build: ./backend/services/digital_thalamus_service
    container_name: vertice-digital-thalamus
    ports:
    - 8212:8013
    volumes:
    - ./backend/services/digital_thalamus_service:/app
    environment:
    - VISUAL_CORTEX_URL=http://visual_cortex_service:8206
    - AUDITORY_CORTEX_URL=http://auditory_cortex_service:8207
    - SOMATOSENSORY_URL=http://somatosensory_service:8208
    - CHEMICAL_SENSING_URL=http://chemical_sensing_service:8209
    - VESTIBULAR_URL=http://vestibular_service:8210
    - KAFKA_BOOTSTRAP_SERVERS=kafka-immunity:9096
    - REDIS_URL=redis://redis:6379
    depends_on:
    - visual_cortex_service
    - auditory_cortex_service
    - somatosensory_service
    - chemical_sensing_service
    - vestibular_service
    - kafka-immunity
    - redis
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8013/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  narrative_manipulation_filter:
    build: ./backend/services/narrative_manipulation_filter
    container_name: vertice-narrative-filter
    ports:
    - 8213:8043
    volumes:
    - ./backend/services/narrative_manipulation_filter:/app
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8043/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  ai_immune_system:
    build: ./backend/services/ai_immune_system
    container_name: vertice-ai-immune
    ports:
    - 8214:8002
    volumes:
    - ./backend/services/ai_immune_system:/app
    environment:
    - PREFRONTAL_CORTEX_URL=http://prefrontal_cortex_service:8211
    - DIGITAL_THALAMUS_URL=http://digital_thalamus_service:8212
    - NARRATIVE_FILTER_URL=http://narrative_manipulation_filter:8213
    - VISUAL_CORTEX_URL=http://visual_cortex_service:8206
    - AUDITORY_CORTEX_URL=http://auditory_cortex_service:8207
    - SOMATOSENSORY_URL=http://somatosensory_service:8208
    - CHEMICAL_SENSING_URL=http://chemical_sensing_service:8209
    - VESTIBULAR_URL=http://vestibular_service:8210
    depends_on:
    - prefrontal_cortex_service
    - digital_thalamus_service
    - narrative_manipulation_filter
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  homeostatic_regulation:
    build: ./backend/services/homeostatic_regulation
    container_name: vertice-homeostatic-regulation
    ports:
    - 8215:8015
    volumes:
    - ./backend/services/homeostatic_regulation:/app
    environment:
    - VISUAL_CORTEX_URL=http://visual_cortex_service:8206
    - AUDITORY_CORTEX_URL=http://auditory_cortex_service:8207
    - SOMATOSENSORY_URL=http://somatosensory_service:8208
    - CHEMICAL_SENSING_URL=http://chemical_sensing_service:8209
    - VESTIBULAR_URL=http://vestibular_service:8210
    - PREFRONTAL_CORTEX_URL=http://prefrontal_cortex_service:8211
    - DIGITAL_THALAMUS_URL=http://digital_thalamus_service:8212
    - NARRATIVE_FILTER_URL=http://narrative_manipulation_filter:8213
    - AI_IMMUNE_SYSTEM_URL=http://ai_immune_system:8214
    depends_on:
    - visual_cortex_service
    - auditory_cortex_service
    - somatosensory_service
    - chemical_sensing_service
    - vestibular_service
    - prefrontal_cortex_service
    - digital_thalamus_service
    - narrative_manipulation_filter
    - ai_immune_system
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8015/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  rte_service:
    build: ./backend/services/rte_service
    container_name: vertice-rte
    ports:
    - 8605:8026
    volumes:
    - ./backend/services/rte_service:/app
    - rte_models:/models
    - rte_quarantine:/quarantine
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8026/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  hpc_service:
    build: ./backend/services/hpc_service
    container_name: vertice-hpc
    ports:
    - 8440:8027
    volumes:
    - ./backend/services/hpc_service:/app
    - hpc_models:/models
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8027/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  tataca_ingestion:
    build: ./backend/services/tataca_ingestion
    container_name: vertice-tataca-ingestion
    ports:
    - 8610:8028
    volumes:
    - ./backend/services/tataca_ingestion:/app
    environment:
    - SERVICE_NAME=tataca_ingestion
    - LOG_LEVEL=INFO
    - HOST=0.0.0.0
    - PORT=8028
    - POSTGRES_HOST=postgres
    - POSTGRES_PORT=5432
    - POSTGRES_USER=postgres
    - POSTGRES_PASSWORD=postgres
    - POSTGRES_DB=aurora
    - SERIEMA_GRAPH_URL=http://seriema_graph:8029
    - SINESP_SERVICE_URL=http://sinesp_service:8018
    - ENABLE_SINESP_CONNECTOR=true
    - ENABLE_PRISIONAL_CONNECTOR=false
    - ENABLE_ANTECEDENTES_CONNECTOR=false
    - ENABLE_SCHEDULER=true
    - SCHEDULER_INTERVAL_MINUTES=60
    - MAX_CONCURRENT_JOBS=3
    - JOB_TIMEOUT_SECONDS=300
    - RETRY_ATTEMPTS=3
    - RETRY_DELAY_SECONDS=5
    - BATCH_SIZE=100
    - ENABLE_PARALLEL_PROCESSING=true
    - CORS_ORIGINS=*
    depends_on:
    - postgres
    - sinesp_service
    - seriema_graph
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8028/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  seriema_graph:
    build: ./backend/services/seriema_graph
    container_name: vertice-seriema-graph
    ports:
    - 8611:8300
    volumes:
    - ./backend/services/seriema_graph:/app
    environment:
    - NEO4J_URI=${NEO4J_URI:-bolt://neo4j:7687}
    - NEO4J_USER=${NEO4J_USER:-neo4j}
    - NEO4J_PASSWORD=${NEO4J_PASSWORD:-neo4j123}
    - NEO4J_DATABASE=${NEO4J_DATABASE:-neo4j}
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8300/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  network_recon_service:
    build: ./backend/services/network_recon_service
    container_name: maximus-network-recon
    ports:
    - 8532:8032
    - 9032:9032
    cap_add:
    - NET_ADMIN
    - NET_RAW
    volumes:
    - ./backend/services/network_recon_service:/app
    - network_recon_logs:/var/log/network_recon
    - network_recon_data:/app/data
    environment:
    - SERVICE_NAME=network_reconnaissance
    - SERVICE_PORT=8032
    - LOG_LEVEL=INFO
    - DEFAULT_MASSCAN_RATE=10000
    - DEFAULT_NMAP_TIMING=3
    - MAX_SCAN_RATE=100000
    - DEFAULT_DEEP_SCAN_THRESHOLD=100
    - ENABLE_ASA_INTEGRATION=true
    - VISUAL_CORTEX_URL=http://visual_cortex_service:8206
    - AUDITORY_CORTEX_URL=http://auditory_cortex_service:8207
    - SOMATOSENSORY_URL=http://somatosensory_service:8208
    - CHEMICAL_SENSING_URL=http://chemical_sensing_service:8209
    - VESTIBULAR_URL=http://vestibular_service:8210
    - PREFRONTAL_CORTEX_URL=http://prefrontal_cortex_service:8211
    - DIGITAL_THALAMUS_URL=http://digital_thalamus_service:8212
    - NARRATIVE_FILTER_URL=http://narrative_manipulation_filter:8213
    - AI_IMMUNE_SYSTEM_URL=http://ai_immune_system:8214
    - HOMEOSTATIC_REGULATION_URL=http://homeostatic_regulation:8215
    - ASA_REQUEST_TIMEOUT=10.0
    - SCAN_TIMEOUT=3600
    - METRICS_ENABLED=true
    - METRICS_PORT=9032
    depends_on:
    - visual_cortex_service
    - digital_thalamus_service
    - homeostatic_regulation
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8032/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  vuln_intel_service:
    build: ./backend/services/vuln_intel_service
    container_name: vertice-vuln-intel
    ports:
    - 8533:8062
    - 9033:9033
    volumes:
    - ./backend/services/vuln_intel_service:/app
    - nuclei_templates:/app/nuclei-templates
    - vuln_intel_logs:/var/log/vuln_intel
    - vuln_intel_data:/app/data
    environment:
    - SERVICE_NAME=vulnerability_intelligence
    - SERVICE_PORT=8033
    - LOG_LEVEL=INFO
    - NUCLEI_BINARY=/usr/bin/nuclei
    - NUCLEI_TEMPLATES_DIR=/app/nuclei-templates
    - GITHUB_TOKEN=${GITHUB_TOKEN}
    - AUTO_SYNC_TEMPLATES=true
    - TEMPLATE_SYNC_INTERVAL=3600
    - DEFAULT_NUCLEI_CONCURRENCY=25
    - DEFAULT_NUCLEI_RATE_LIMIT=150
    - NVD_API_BASE=https://services.nvd.nist.gov/rest/json/cves/2.0
    - EPSS_API_BASE=https://api.first.org/data/v1/epss
    - CVE_CACHE_TTL=3600
    - ENABLE_ASA_INTEGRATION=true
    - CHEMICAL_SENSING_URL=http://chemical_sensing_service:8209
    - AI_IMMUNE_SYSTEM_URL=http://ai_immune_system:8214
    - HOMEOSTATIC_REGULATION_URL=http://homeostatic_regulation:8215
    - METRICS_ENABLED=true
    - METRICS_PORT=9033
    depends_on:
    - chemical_sensing_service
    - ai_immune_system
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8062/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  web_attack_service:
    build:
      context: ./backend
      dockerfile: services/web_attack_service/Dockerfile
    container_name: vertice-web-attack
    ports:
    - 8534:8034
    - 9034:9034
    volumes:
    - ./backend/services/web_attack_service:/app
    - web_attack_logs:/var/log/web_attack
    environment:
    - SERVICE_NAME=web_application_attack
    - SERVICE_PORT=8034
    - LOG_LEVEL=INFO
    - GEMINI_API_KEY=${GEMINI_API_KEY}
    - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    - AI_PROVIDER=auto
    - AI_TEMPERATURE=0.7
    - AI_MAX_TOKENS=2000
    - BURP_API_URL=http://host.docker.internal:1337
    - BURP_API_KEY=${BURP_API_KEY}
    - ZAP_API_URL=http://host.docker.internal:8080
    - ZAP_API_KEY=${ZAP_API_KEY}
    - ENABLE_ASA_INTEGRATION=true
    - PREFRONTAL_CORTEX_URL=http://prefrontal_cortex_service:8211
    - AUDITORY_CORTEX_URL=http://auditory_cortex_service:8207
    - SOMATOSENSORY_URL=http://somatosensory_service:8208
    - METRICS_ENABLED=true
    - METRICS_PORT=9034
    depends_on:
    - prefrontal_cortex_service
    - auditory_cortex_service
    - somatosensory_service
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8034/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  c2_orchestration_service:
    build:
      context: ./backend/services/c2_orchestration_service
      dockerfile: Dockerfile
    container_name: c2_orchestration_service
    ports:
    - 8535:8009
    - 9035:9035
    volumes:
    - ./backend/services/c2_orchestration_service:/app
    - c2_orchestration_logs:/var/log/c2_orchestration
    - c2_payloads:/tmp/c2_payloads
    environment:
    - SERVICE_NAME=c2_orchestration
    - SERVICE_PORT=8035
    - LOG_LEVEL=${LOG_LEVEL:-INFO}
    - COBALT_STRIKE_HOST=${COBALT_STRIKE_HOST:-localhost}
    - COBALT_STRIKE_PORT=${COBALT_STRIKE_PORT:-50050}
    - COBALT_STRIKE_PASSWORD=${COBALT_STRIKE_PASSWORD}
    - COBALT_STRIKE_USER=${COBALT_STRIKE_USER:-maximus_ai}
    - COBALT_STRIKE_SSL_VERIFY=false
    - METASPLOIT_HOST=${METASPLOIT_HOST:-localhost}
    - METASPLOIT_PORT=${METASPLOIT_PORT:-55553}
    - METASPLOIT_USER=${METASPLOIT_USER:-msf}
    - METASPLOIT_PASSWORD=${METASPLOIT_PASSWORD}
    - METASPLOIT_SSL=true
    - ENABLE_ASA_INTEGRATION=true
    - AUDITORY_CORTEX_URL=http://auditory_cortex_service:8207
    - SOMATOSENSORY_URL=http://somatosensory_service:8208
    - PREFRONTAL_CORTEX_URL=http://prefrontal_cortex_service:8211
    - MAX_CONCURRENT_BEACONS=100
    - MAX_CONCURRENT_SESSIONS=50
    - METRICS_ENABLED=true
    - METRICS_PORT=9035
    depends_on:
    - auditory_cortex_service
    - somatosensory_service
    - prefrontal_cortex_service
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  bas_service:
    build:
      context: ./backend/services/bas_service
      dockerfile: Dockerfile
    container_name: bas_service
    ports:
    - 8536:8008
    - 9036:9036
    volumes:
    - ./backend/services/bas_service:/app
    - bas_logs:/var/log/bas
    - bas_reports:/app/data/reports
    - atomic_red_team:/app/data/atomic-red-team
    environment:
    - SERVICE_NAME=breach_attack_simulation
    - SERVICE_PORT=8036
    - LOG_LEVEL=${LOG_LEVEL:-INFO}
    - ATOMIC_RED_TEAM_PATH=/app/data/atomic-red-team
    - ATOMIC_AUTO_UPDATE=true
    - DEFAULT_TIMEOUT_SECONDS=300
    - MAX_CONCURRENT_SIMULATIONS=10
    - ENABLE_CLEANUP=true
    - ENABLE_DETECTION_VALIDATION=true
    - DETECTION_TIMEOUT_SECONDS=60
    - SPLUNK_URL=${SPLUNK_URL:-}
    - SPLUNK_TOKEN=${SPLUNK_TOKEN:-}
    - ELASTIC_URL=${ELASTIC_URL:-}
    - ELASTIC_API_KEY=${ELASTIC_API_KEY:-}
    - ENABLE_ASA_INTEGRATION=true
    - SOMATOSENSORY_URL=http://somatosensory_service:8208
    - PREFRONTAL_CORTEX_URL=http://prefrontal_cortex_service:8211
    - AI_IMMUNE_SYSTEM_URL=http://ai_immune_system:8214
    - ENABLE_REMOTE_EXECUTION=true
    - SSH_DEFAULT_USER=${BAS_SSH_USER:-bas_runner}
    - ENABLE_WINRM=true
    - WINRM_DEFAULT_USER=${BAS_WINRM_USER:-bas_runner}
    - MAX_IMPACT_TECHNIQUES_PER_CAMPAIGN=5
    - REQUIRE_APPROVAL_FOR_IMPACT=true
    - METRICS_ENABLED=true
    - METRICS_PORT=9036
    depends_on:
    - somatosensory_service
    - prefrontal_cortex_service
    - ai_immune_system
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8056/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  offensive_gateway:
    build:
      context: ./backend
      dockerfile: services/offensive_gateway/Dockerfile
    container_name: offensive_gateway
    ports:
    - 8537:8037
    - 9037:9037
    volumes:
    - ./backend/services/offensive_gateway:/app
    - gateway_logs:/var/log/offensive_gateway
    environment:
    - SERVICE_NAME=offensive_gateway
    - SERVICE_PORT=8037
    - LOG_LEVEL=${LOG_LEVEL:-INFO}
    - NETWORK_RECON_URL=http://network_recon_service:8532
    - VULN_INTEL_URL=http://vuln_intel_service:8533
    - WEB_ATTACK_URL=http://web_attack_service:8534
    - C2_ORCHESTRATION_URL=http://c2_orchestration_service:8535
    - BAS_URL=http://bas_service:8536
    - MAX_CONCURRENT_WORKFLOWS=20
    - WORKFLOW_TIMEOUT_SECONDS=3600
    - ENABLE_WORKFLOW_PERSISTENCE=true
    - MAX_CONCURRENT_CHAINS=5
    - CHAIN_TIMEOUT_SECONDS=7200
    - AUTO_CLEANUP_CHAINS=true
    - ENABLE_RBAC=true
    - REQUIRE_API_KEY=true
    - API_KEY_HEADER=X-API-Key
    - ENABLE_RATE_LIMITING=true
    - DEFAULT_RATE_LIMIT=60
    - ENABLE_SAFETY_CHECKS=true
    - REQUIRE_APPROVAL_HIGH_IMPACT=true
    - MAX_SIMULTANEOUS_EXPLOITS=10
    - ENABLE_AUDIT_LOG=true
    - METRICS_ENABLED=true
    - METRICS_PORT=9037
    - ENABLE_ASA_INTEGRATION=true
    - PREFRONTAL_CORTEX_URL=http://prefrontal_cortex_service:8211
    depends_on:
    - network_recon_service
    - vuln_intel_service
    - web_attack_service
    - c2_orchestration_service
    - bas_service
    - prefrontal_cortex_service
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8037/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  narrative_analysis_service:
    build:
      context: ./backend/services/narrative_analysis_service
      dockerfile: Dockerfile
    container_name: narrative-analysis-service
    ports:
    - 8015:8042
    environment:
    - SERVICE_NAME=narrative_analysis
    - LOG_LEVEL=${LOG_LEVEL:-INFO}
    - ENABLE_SOCIAL_GRAPH_ANALYSIS=true
    - ENABLE_BOT_DETECTION=true
    - ENABLE_PROPAGANDA_ATTRIBUTION=true
    - ENABLE_MEME_TRACKING=true
    - MAX_GRAPH_NODES=100000
    - COMMUNITY_DETECTION_RESOLUTION=1.0
    - BOT_DETECTION_THRESHOLD=0.6
    - ATTRIBUTION_MIN_CONFIDENCE=0.7
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8058/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  predictive_threat_hunting_service:
    build:
      context: ./backend/services/predictive_threat_hunting_service
      dockerfile: Dockerfile
    container_name: predictive-threat-hunting-service
    ports:
    - 8016:8050
    environment:
    - SERVICE_NAME=predictive_threat_hunting
    - LOG_LEVEL=${LOG_LEVEL:-INFO}
    - DEFAULT_TIME_HORIZON_HOURS=24
    - MIN_PREDICTION_CONFIDENCE=0.6
    - ENABLE_ATTACK_PREDICTION=true
    - ENABLE_VULNERABILITY_FORECASTING=true
    - ENABLE_PROACTIVE_HUNTING=true
    - VULNERABILITY_FORECAST_WINDOW_DAYS=30
    - MIN_EXPLOIT_PROBABILITY=0.5
    - MIN_PATTERN_HISTORY=5
    - PERIODICITY_DETECTION_THRESHOLD=0.7
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8050/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  autonomous_investigation_service:
    build:
      context: ./backend/services/autonomous_investigation_service
      dockerfile: Dockerfile
    container_name: autonomous-investigation-service
    ports:
    - 8017:8007
    environment:
    - SERVICE_NAME=autonomous_investigation
    - LOG_LEVEL=${LOG_LEVEL:-INFO}
    - DEFAULT_PLAYBOOK=standard
    - ENABLE_ACTOR_PROFILING=true
    - ENABLE_CAMPAIGN_CORRELATION=true
    - ENABLE_AUTO_INVESTIGATION=true
    - ATTRIBUTION_MIN_CONFIDENCE=0.6
    - TTP_SIMILARITY_WEIGHT=0.7
    - INFRASTRUCTURE_SIMILARITY_WEIGHT=0.3
    - CAMPAIGN_TIME_WINDOW_DAYS=30
    - MIN_CAMPAIGN_SIZE=2
    - CORRELATION_THRESHOLD=0.6
    - ENABLE_EVIDENCE_CHAIN=true
    - ENABLE_AUTO_RECOMMENDATIONS=true
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  immunis_treg_service:
    build:
      context: ./backend/services/immunis_treg_service
      dockerfile: Dockerfile
    container_name: immunis-treg-service
    ports:
    - 8018:8033
    environment:
    - SERVICE_NAME=regulatory_t_cells
    - LOG_LEVEL=${LOG_LEVEL:-INFO}
    - DEFAULT_TOLERANCE_THRESHOLD=0.7
    - MIN_OBSERVATIONS_FOR_TOLERANCE=10
    - BEHAVIORAL_FINGERPRINT_WINDOW=100
    - FP_SUPPRESSION_THRESHOLD=0.6
    - ANOMALY_SCORE_THRESHOLD=3.0
    - ENABLE_ADAPTIVE_LEARNING=true
    - MAX_ENTITY_PROFILES=10000
    - PROFILE_CLEANUP_INTERVAL_HOURS=24
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8046/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  memory_consolidation_service:
    build:
      context: ./backend/services/memory_consolidation_service
      dockerfile: Dockerfile
    container_name: memory-consolidation-service
    ports:
    - 8019:8041
    environment:
    - SERVICE_NAME=memory_consolidation
    - LOG_LEVEL=${LOG_LEVEL:-INFO}
    - CONSOLIDATION_THRESHOLD=0.6
    - CIRCADIAN_INTERVAL_HOURS=6
    - ENABLE_CIRCADIAN_RHYTHM=true
    - MAX_STM_SIZE=10000
    - MAX_LTM_SIZE=100000
    - MEMORY_DECAY_RATE=0.05
    - KAFKA_BOOTSTRAP_SERVERS=kafka-immunity:9096
    - KAFKA_CONSCIOUSNESS_TOPIC=consciousness-events
    - MIN_PATTERN_SIZE=3
    - TEMPORAL_WINDOW_MINUTES=60
    - ENABLE_ATTACK_CHAIN_DETECTION=true
    - ENABLE_AUTO_CONSOLIDATION=true
    - CONSOLIDATION_BATCH_SIZE=1000
    depends_on:
    - kafka-immunity
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8041/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  adaptive_immunity_service:
    build:
      context: ./backend/services/adaptive_immunity_service
      dockerfile: Dockerfile
    container_name: adaptive-immunity-service
    ports:
    - 8020:8000
    environment:
    - SERVICE_NAME=adaptive_immunity
    - LOG_LEVEL=${LOG_LEVEL:-INFO}
    - INITIAL_REPERTOIRE_SIZE=100
    - ENABLE_VDJ_RECOMBINATION=true
    - DIVERSIFICATION_ENABLED=true
    - MUTATION_RATE=0.1
    - MUTATIONS_PER_CYCLE=5
    - ENABLE_SOMATIC_HYPERMUTATION=true
    - EXPANSION_THRESHOLD=0.8
    - MAX_CLONES_PER_ANTIBODY=10
    - ENABLE_CLONAL_EXPANSION=true
    - ENABLE_FEEDBACK_LEARNING=true
    - MIN_FEEDBACK_FOR_MATURATION=5
    - MAX_ANTIBODY_POOL_SIZE=1000
    - MATURATION_CYCLE_INTERVAL_HOURS=12
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  neuromodulation_service:
    build: ./backend/services/neuromodulation_service
    container_name: vertice-neuromodulation
    ports:
    - 9093:8046
    volumes:
    - ./backend/services/neuromodulation_service:/app
    environment:
    - SERVICE_NAME=neuromodulation
    - LOG_LEVEL=${LOG_LEVEL:-INFO}
    - ENABLE_DOPAMINE=true
    - ENABLE_SEROTONIN=true
    - ENABLE_NORADRENALINE=true
    - ENABLE_ACETYLCHOLINE=true
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8046/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  strategic_planning_service:
    build: ./backend/services/strategic_planning_service
    container_name: vertice-strategic-planning
    ports:
    - 9094:8058
    volumes:
    - ./backend/services/strategic_planning_service:/app
    environment:
    - SERVICE_NAME=strategic_planning
    - LOG_LEVEL=${LOG_LEVEL:-INFO}
    - ENABLE_GOAL_DECOMPOSITION=true
    - ENABLE_RESOURCE_ALLOCATION=true
    - ENABLE_RISK_ASSESSMENT=true
    - MAX_PLAN_DEPTH=10
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8058/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  cloud_coordinator_service:
    build: ./backend/services/cloud_coordinator_service
    container_name: vertice-cloud-coordinator
    ports:
    - 9095:8011
    volumes:
    - ./backend/services/cloud_coordinator_service:/app
    environment:
    - SERVICE_NAME=cloud_coordinator
    - LOG_LEVEL=${LOG_LEVEL:-INFO}
    - HEARTBEAT_TIMEOUT=60.0
    - ENABLE_MULTI_TENANT=true
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8051/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  hsas_service:
    build: ./backend/services/hsas_service
    container_name: vertice-hsas_service
    env_file: .env
    ports:
    - 9099:8024
    volumes:
    - ./backend/services/hsas_service:/app
    environment:
    - SERVICE_NAME=hsas_service
    - LOG_LEVEL=${LOG_LEVEL:-INFO}
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8024/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  edge_agent_service:
    build: ./backend/services/edge_agent_service
    container_name: vertice-edge_agent_service
    env_file: .env
    ports:
    - 9100:8015
    volumes:
    - ./backend/services/edge_agent_service:/app
    environment:
    - SERVICE_NAME=edge_agent_service
    - LOG_LEVEL=${LOG_LEVEL:-INFO}
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8015/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  maximus_eureka:
    build: ./backend/services/maximus_eureka
    container_name: vertice-maximus_eureka
    env_file: .env
    ports:
    - 9103:8200
    volumes:
    - ./backend/services/maximus_eureka:/app
    environment:
    - SERVICE_NAME=maximus_eureka
    - LOG_LEVEL=${LOG_LEVEL:-INFO}
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8200/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  reflex_triage_engine:
    build: ./backend/services/reflex_triage_engine
    container_name: vertice-reflex_triage_engine
    env_file: .env
    ports:
    - 9107:8052
    volumes:
    - ./backend/services/reflex_triage_engine:/app
    environment:
    - SERVICE_NAME=reflex_triage_engine
    - LOG_LEVEL=${LOG_LEVEL:-INFO}
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8052/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  zookeeper-immunity:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: maximus-zookeeper-immunity
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
    - 2181:2181
    volumes:
    - zookeeper-immunity-data:/var/lib/zookeeper/data
    - zookeeper-immunity-logs:/var/lib/zookeeper/log
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "echo srvr | nc -w 2 localhost 2181 | grep Mode"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  kafka-immunity:
    image: confluentinc/cp-kafka:7.5.0
    container_name: maximus-kafka-immunity
    depends_on:
      zookeeper-immunity:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-immunity:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-immunity:9092,PLAINTEXT_HOST://localhost:9096
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_DELETE_TOPIC_ENABLE: 'true'
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
    ports:
    - 9096:9096
    volumes:
    - kafka-immunity-data:/var/lib/kafka/data
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server=localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
  postgres-immunity:
    image: postgres:15-alpine
    container_name: maximus-postgres-immunity
    environment:
      POSTGRES_DB: adaptive_immunity
      POSTGRES_USER: maximus
      POSTGRES_PASSWORD: ${POSTGRES_IMMUNITY_PASSWORD:-maximus_immunity_2024}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
    - 5434:5432
    volumes:
    - postgres-immunity-data:/var/lib/postgresql/data
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U maximus -d adaptive_immunity"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  # DEPRECATED (FASE 1.2): Consolidated into wargaming_crisol
  # wargaming-crisol:
  #   build:
  #     context: ./backend
  #     dockerfile: services/wargaming_crisol/Dockerfile
  #   container_name: maximus-wargaming-crisol
  #   ports:
  #   - 8026:8026
  #   depends_on:
  #   - postgres-immunity
  #   environment:
  #   - POSTGRES_HOST=postgres-immunity
  #   - POSTGRES_PORT=5432
  #   - POSTGRES_DB=adaptive_immunity
  #   - POSTGRES_USER=maximus
  #   - POSTGRES_PASSWORD=${POSTGRES_IMMUNITY_PASSWORD:-maximus_immunity_2024}
  #   - REDIS_HOST=redis-immunity
  #   - REDIS_PORT=6379
  #   - REDIS_DB=2
  #   - REDIS_PASSWORD=${REDIS_PASSWORD:-maximus_immunity_redis}
  #   - DOCKER_HOST=unix:///var/run/docker.sock
  #   - LOG_LEVEL=INFO
  #   volumes:
  #   - ./backend/services/wargaming_crisol:/app
  #   - /var/run/docker.sock:/var/run/docker.sock
  #   - wargaming_logs:/app/logs
  #   networks:
  #   - maximus-network
  #   - maximus-immunity-network
  #   restart: unless-stopped
  #   privileged: true
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8026/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 40s
  # DEPRECATED (FASE 1.2): Consolidated into hitl_patch_service
  # hitl-patch-service:
  #   build:
  #     context: ./backend/services
  #     dockerfile: hitl_patch_service/Dockerfile
  #   container_name: maximus-hitl-patch
  #   ports:
  #   - 8027:8027
  #   depends_on:
  #   - postgres-immunity
  #   environment:
  #   - POSTGRES_HOST=postgres-immunity
  #   - POSTGRES_PORT=5432
  #   - POSTGRES_DB=adaptive_immunity
  #   - POSTGRES_USER=maximus
  #   - POSTGRES_PASSWORD=${POSTGRES_IMMUNITY_PASSWORD:-maximus_immunity_2024}
  #   - PORT=8027
  #   - LOG_LEVEL=INFO
  #   volumes:
  #   - ./backend/services/hitl_patch_service:/app
  #   networks:
  #   - maximus-network
  #   - maximus-immunity-network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8027/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 40s
  kafka-ui-immunity:
    image: provectuslabs/kafka-ui:latest
    container_name: maximus-kafka-ui-immunity
    depends_on:
    - kafka-immunity
    environment:
      KAFKA_CLUSTERS_0_NAME: maximus-immunity
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-immunity:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper-immunity:2181
    ports:
    - 8091:8080
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  adaptive_immune_system:
    build: ./backend/services/adaptive_immune_system
    container_name: vertice-adaptive-immune
    ports:
    - 8003:8003
    volumes:
    - ./backend/services/adaptive_immune_system:/app
    environment:
    - APP_NAME=Adaptive Immune System - HITL API
    - APP_VERSION=1.0.0
    - DEBUG=false
    - HOST=0.0.0.0
    - PORT=8003
    - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/adaptive_immune
    - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    - REDIS_URL=redis://redis:6379/0
    - GITHUB_TOKEN=${GITHUB_TOKEN:-}
    - GITHUB_REPO_OWNER=${GITHUB_REPO_OWNER:-vertice-ai}
    - GITHUB_REPO_NAME=${GITHUB_REPO_NAME:-adaptive-immune}
    - CORS_ORIGINS=http://localhost:5173,http://localhost:3000,http://localhost:8080
    - LOG_LEVEL=info
    - PROMETHEUS_ENABLED=true
    - WEBSOCKET_ENABLED=true
    - WARGAMING_ENABLED=true
    depends_on:
    - postgres
    - redis
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  reactive_fabric_core:
    build: ./backend/services/reactive_fabric_core
    container_name: reactive-fabric-core
    ports:
    - 8600:8600
    environment:
    - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/aurora
    - KAFKA_BROKERS=hcl-kafka:9092
    - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    - REDIS_URL=redis://redis:6379/0
    - LOG_LEVEL=INFO
    - FORENSIC_CAPTURE_PATH=/forensics
    volumes:
    - ./backend/services/reactive_fabric_core:/app
    - forensic_captures:/forensics
    networks:
    - maximus-network
    - reactive-fabric-bridge
    depends_on:
    - postgres
    - hcl-kafka
    - rabbitmq
    - redis
    restart: unless-stopped
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8600/health
      interval: 30s
      timeout: 10s
      retries: 3
  reactive_fabric_analysis:
    build: ./backend/services/reactive_fabric_analysis
    container_name: reactive-fabric-analysis
    ports:
    - 8601:8601
    environment:
    - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/aurora
    - KAFKA_BROKERS=hcl-kafka:9092
    - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
    - LOG_LEVEL=INFO
    - FORENSIC_CAPTURE_PATH=/forensics
    - POLLING_INTERVAL=30
    volumes:
    - ./backend/services/reactive_fabric_analysis:/app
    - forensic_captures:/forensics:ro
    networks:
    - maximus-network
    depends_on:
    - postgres
    - hcl-kafka
    - rabbitmq
    - reactive_fabric_core
    restart: unless-stopped
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8601/health
      interval: 30s
      timeout: 10s
      retries: 3
  active_immune_core:
    build: ./backend/services/active_immune_core
    container_name: active-immune-core
    ports:
    - 8200:8200
    environment:
    - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/aurora
    - ACTIVE_IMMUNE_KAFKA_BOOTSTRAP_SERVERS=hcl-kafka:9092
    - REDIS_URL=redis://redis:6379/2
    - LOG_LEVEL=INFO
    volumes:
    - ./backend/services/active_immune_core:/app
    networks:
    - maximus-network
    depends_on:
      hcl-kafka:
        condition: service_healthy
      postgres:
        condition: service_started
      redis:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8200/health
      interval: 30s
      timeout: 10s
      retries: 3
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: vertice-rabbitmq
    ports:
    - 5672:5672
    - 15672:15672
    environment:
    - RABBITMQ_DEFAULT_USER=guest
    - RABBITMQ_DEFAULT_PASS=guest
    volumes:
    - rabbitmq_data:/var/lib/rabbitmq
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test:
      - CMD
      - rabbitmqctl
      - status
      interval: 30s
      timeout: 10s
      retries: 5
  threat_intel_bridge:
    build: ./backend/services/threat_intel_bridge
    container_name: threat-intel-bridge
    ports:
    - 8710:8000
    environment:
    - KAFKA_REACTIVE_FABRIC=hcl-kafka:9092
    - KAFKA_IMMUNE_SYSTEM=hcl-kafka:9092
    - CIRCUIT_BREAKER_THRESHOLD=10
    - CIRCUIT_BREAKER_TIMEOUT=60
    - LOG_LEVEL=INFO
    networks:
    - maximus-network
    - reactive-fabric-bridge
    depends_on:
      hcl-kafka:
        condition: service_healthy
      reactive_fabric_core:
        condition: service_healthy
      reactive_fabric_analysis:
        condition: service_healthy
      active_immune_core:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test:
      - CMD
      - curl
      - -f
      - http://localhost:8000/health
      interval: 30s
      timeout: 10s
      retries: 3
  # ========================================
  # NEW SERVICES - Added during air gap fix
  # ========================================
  adaptive_immunity_db:
    build: ./backend/services/adaptive_immunity_db
    container_name: vertice-adaptive-immunity-db
    ports:
    - "8801:8000"
    environment:
    - SERVICE_NAME=adaptive_immunity_db
    - LOG_LEVEL=INFO
    - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/adaptive_immunity
    depends_on:
    - postgres
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  agent_communication:
    build: ./backend/services/agent_communication
    container_name: vertice-agent-communication
    ports:
    - "8802:8000"
    environment:
    - SERVICE_NAME=agent_communication
    - LOG_LEVEL=INFO
    - REDIS_URL=redis://redis:6379
    depends_on:
    - redis
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  command_bus_service:
    build: ./backend/services/command_bus_service
    container_name: vertice-command-bus
    ports:
    - "8803:8000"
    environment:
    - SERVICE_NAME=command_bus
    - LOG_LEVEL=INFO
    - REDIS_URL=redis://redis:6379
    depends_on:
    - redis
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  narrative_filter_service:
    build: ./backend/services/narrative_filter_service
    container_name: vertice-narrative-filter-v2
    ports:
    - "8804:8000"
    environment:
    - SERVICE_NAME=narrative_filter
    - LOG_LEVEL=INFO
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  offensive_orchestrator_service:
    build: ./backend/services/offensive_orchestrator_service
    container_name: vertice-offensive-orchestrator
    ports:
    - "8805:8000"
    environment:
    - SERVICE_NAME=offensive_orchestrator
    - LOG_LEVEL=INFO
    - OFFENSIVE_GATEWAY_URL=http://offensive_gateway:8537
    depends_on:
    - offensive_gateway
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  purple_team:
    build: ./backend/services/purple_team
    container_name: vertice-purple-team
    ports:
    - "8806:8000"
    environment:
    - SERVICE_NAME=purple_team
    - LOG_LEVEL=INFO
    - OFFENSIVE_GATEWAY_URL=http://offensive_gateway:8537
    depends_on:
    - offensive_gateway
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  tegumentar_service:
    build: ./backend/services/tegumentar_service
    container_name: vertice-tegumentar
    ports:
    - "8807:8000"
    environment:
    - SERVICE_NAME=tegumentar
    - LOG_LEVEL=INFO
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  verdict_engine_service:
    build: ./backend/services/verdict_engine_service
    container_name: vertice-verdict-engine
    ports:
    - "8808:8000"
    environment:
    - SERVICE_NAME=verdict_engine
    - LOG_LEVEL=INFO
    - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/aurora
    depends_on:
    - postgres
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  maximus_oraculo_v2_service:
    build: ./backend/services/maximus_oraculo_v2
    container_name: vertice-maximus-oraculo-v2
    ports:
    - "8809:8000"
    environment:
    - SERVICE_NAME=maximus_oraculo_v2
    - LOG_LEVEL=INFO
    - GEMINI_API_KEY=${GEMINI_API_KEY}
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  mock_vulnerable_apps:
    build: ./backend/services/mock_vulnerable_apps
    container_name: vertice-mock-vulns
    ports:
    - "8810:8000"
    environment:
    - SERVICE_NAME=mock_vulnerable_apps
    - LOG_LEVEL=INFO
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  hitl_patch_service:
    build: ./backend/services/hitl_patch_service
    container_name: vertice-hitl-patch
    ports:
    - "8811:8000"
    environment:
    - SERVICE_NAME=hitl_patch
    - LOG_LEVEL=INFO
    - PORT=8000
    - POSTGRES_URL=postgresql://postgres:postgres@postgres-immunity:5432/adaptive_immunity
    depends_on:
    - postgres-immunity
    networks:
    - maximus-network
    - maximus-immunity-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  wargaming_crisol:
    build: ./backend/services/wargaming_crisol
    container_name: vertice-wargaming-crisol
    ports:
    - "8812:8000"
    environment:
    - SERVICE_NAME=wargaming_crisol
    - LOG_LEVEL=INFO
    - PORT=8000
    - POSTGRES_URL=postgresql://postgres:postgres@postgres-immunity:5432/adaptive_immunity
    - REDIS_URL=redis://:${REDIS_PASSWORD:-maximus_immunity_redis}@redis:6379/2
    - DOCKER_HOST=unix:///var/run/docker.sock
    depends_on:
    - postgres-immunity
    - redis
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - wargaming_logs:/app/logs
    networks:
    - maximus-network
    - maximus-immunity-network
    restart: unless-stopped
    privileged: true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  maximus_oraculo_filesystem:
    build: ./backend/services/maximus_oraculo
    container_name: vertice-maximus-oraculo-fs
    ports:
    - "8813:8000"
    environment:
    - SERVICE_NAME=maximus_oraculo_fs
    - LOG_LEVEL=INFO
    - GEMINI_API_KEY=${GEMINI_API_KEY}
    networks:
    - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # =============================================================================
  # COAGULATION CASCADE - Bio-inspired Breach Containment System
  # =============================================================================

  # NATS JetStream Cluster (Event Bus for Coagulation Services)
  nats-jetstream:
    image: nats:2.10-alpine
    container_name: vertice-nats-jetstream
    ports:
      - "4222:4222"  # Client connections
      - "8222:8222"  # HTTP monitoring
      - "6222:6222"  # Cluster routing
    command:
      - "--config"
      - "/etc/nats/nats.conf"
    volumes:
      - nats-jetstream-data:/data
      - ./backend/config/nats/nats.conf:/etc/nats/nats.conf:ro
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8222/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Factor Xa Service - Quarantine Activator (Cascade Amplification)
  factor_xa_service:
    build:
      context: ./backend/coagulation
      dockerfile: cascade/factor_xa/Dockerfile
    container_name: vertice-factor-xa
    ports:
      - "8050:8050"
    environment:
      - PORT=8050
      - NATS_URL=nats://nats-jetstream:4222
      - LOG_LEVEL=INFO
    depends_on:
      - nats-jetstream
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8050/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Factor VIIa Service - Breach Detection Trigger (Extrinsic Pathway)
  factor_viia_service:
    build:
      context: ./backend/coagulation
      dockerfile: cascade/factor_viia/Dockerfile
    container_name: vertice-factor-viia
    ports:
      - "8051:8051"
    environment:
      - PORT=8051
      - NATS_URL=nats://nats-jetstream:4222
      - LOG_LEVEL=INFO
    depends_on:
      - nats-jetstream
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8051/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Antithrombin Service - Global Circuit Breaker (Emergency Dampening)
  antithrombin_service:
    build:
      context: ./backend/coagulation
      dockerfile: regulation/antithrombin/Dockerfile
    container_name: vertice-antithrombin
    ports:
      - "8052:8052"
    environment:
      - PORT=8052
      - NATS_URL=nats://nats-jetstream:4222
      - LOG_LEVEL=INFO
      - IMPACT_THRESHOLD=0.7
    depends_on:
      - nats-jetstream
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8052/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # Protein C Service - Context-Aware Regulation (Spatial Dampening)
  protein_c_service:
    build:
      context: ./backend/coagulation
      dockerfile: regulation/protein_c/Dockerfile
    container_name: vertice-protein-c
    ports:
      - "8053:8053"
    environment:
      - PORT=8053
      - NATS_URL=nats://nats-jetstream:4222
      - LOG_LEVEL=INFO
      - MAXIMUS_CORE_URL=http://maximus_core_service:8150
    depends_on:
      - nats-jetstream
      - maximus_core_service
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8053/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  # TFPI Service - Tissue Factor Pathway Inhibitor (Early Regulation)
  tfpi_service:
    build:
      context: ./backend/coagulation
      dockerfile: regulation/tfpi/Dockerfile
    container_name: vertice-tfpi
    ports:
      - "8054:8054"
    environment:
      - PORT=8054
      - NATS_URL=nats://nats-jetstream:4222
      - LOG_LEVEL=INFO
    depends_on:
      - nats-jetstream
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8054/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

networks:
  maximus-network:
    name: maximus-ai-network
    driver: bridge
  maximus-immunity-network:
    external: true
  reactive-fabric-bridge:
    name: reactive-fabric-bridge
    driver: bridge
    internal: false
volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  osint-data:
    driver: local
  maximus-models:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  hcl_postgres_data:
    driver: local
  hcl_kafka_data:
    driver: local
  hcl_analyzer_models:
    driver: local
  hcl_planner_models:
    driver: local
  rte_models:
    driver: local
  rte_quarantine:
    driver: local
  hpc_models:
    driver: local
  eureka_reports:
    driver: local
  eureka_playbooks:
    driver: local
  oraculo_sessions:
    driver: local
  qdrant-data:
    driver: local
  network_recon_logs:
    driver: local
  network_recon_data:
    driver: local
  nuclei_templates:
    driver: local
  vuln_intel_logs:
    driver: local
  vuln_intel_data:
    driver: local
  web_attack_logs:
    driver: local
  c2_orchestration_logs:
    driver: local
  c2_payloads:
    driver: local
  bas_logs:
    driver: local
  bas_reports:
    driver: local
  atomic_red_team:
    driver: local
  gateway_logs:
    driver: local
  zookeeper-immunity-data:
    driver: local
  zookeeper-immunity-logs:
    driver: local
  kafka-immunity-data:
    driver: local
  postgres-immunity-data:
    driver: local
  wargaming_logs:
    driver: local
  forensic_captures:
    driver: local
  rabbitmq_data:
    driver: local
  cuckoo_data:
    driver: local
  cuckoo_tmp:
    driver: local
  nats-jetstream-data:
    driver: local
