# /home/juan/vertice-dev/docker-compose.yml

services:
  # ============================
  # API GATEWAY
  # ============================
  api_gateway:
    build: ./backend/api_gateway
    container_name: vertice-api-gateway
    ports:
      - "8000:8000"
    volumes:
      - ./backend/api_gateway:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    environment:
      - SINESP_SERVICE_URL=http://sinesp_service:80
      - CYBER_SERVICE_URL=http://cyber_service:80
      - DOMAIN_SERVICE_URL=http://domain_service:80
      - IP_INTELLIGENCE_SERVICE_URL=http://ip_intelligence_service:80
      - NETWORK_MONITOR_SERVICE_URL=http://network_monitor_service:80
      - NMAP_SERVICE_URL=http://nmap_service:80
      - OSINT_SERVICE_URL=http://osint-service:8007
      - MAXIMUS_PREDICT_URL=http://maximus_predict:80
      - ATLAS_SERVICE_URL=http://atlas_service:8000 # <-- ADICIONADO
      - AUTH_SERVICE_URL=http://auth_service:80
      - VULN_SCANNER_SERVICE_URL=http://vuln_scanner_service:80
      - SOCIAL_ENG_SERVICE_URL=http://social_eng_service:80
      - THREAT_INTEL_SERVICE_URL=http://threat_intel_service:80
      - MALWARE_ANALYSIS_SERVICE_URL=http://malware_analysis_service:80
      - SSL_MONITOR_SERVICE_URL=http://ssl_monitor_service:80
      - MAXIMUS_ORCHESTRATOR_URL=http://maximus_orchestrator_service:80
      - MAXIMUS_CORE_SERVICE_URL=http://maximus_core_service:8001
    depends_on:
      - redis
      - sinesp_service
      - cyber_service
      - domain_service
      - ip_intelligence_service
      - network_monitor_service
      - nmap_service
      - osint-service
      - maximus_predict
      - auth_service
      - atlas_service # <-- ADICIONADO
      - vuln_scanner_service
      - social_eng_service
      - threat_intel_service
      - malware_analysis_service
      - ssl_monitor_service
      - maximus_orchestrator_service
    networks:
      - vertice-network
    restart: unless-stopped

  # ============================
  # REDIS CACHE
  # ============================
  redis:
    image: "redis:alpine"
    container_name: vertice-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - vertice-network
    restart: unless-stopped

  # ============================
  # POSTGRESQL DATABASE
  # ============================
  postgres:
    image: "postgres:15-alpine"
    container_name: vertice-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=aurora
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - vertice-network
    restart: unless-stopped

  # ... (todos os outros serviÃ§os permanecem iguais) ...
  
  sinesp_service:
    build: ./backend/services/sinesp_service
    container_name: vertice-sinesp
    ports:
      - "8001:80"
    volumes:
      - ./backend/services/sinesp_service:/code
    command: uvicorn main:app --host 0.0.0.0 --port 80 --reload
    networks:
      - vertice-network
    restart: unless-stopped

  cyber_service:
    build: ./backend/services/cyber_service
    container_name: vertice-cyber
    volumes:
      - ./backend/services/cyber_service:/app
      - /var/log:/var/log:ro
      - /etc:/etc:ro
    privileged: true
    ports:
      - "8002:80"
    command: uvicorn main:app --host 0.0.0.0 --port 80 --reload
    networks:
      - vertice-network
    restart: unless-stopped

  domain_service:
    build: ./backend/services/domain_service
    container_name: vertice-domain
    volumes:
      - ./backend/services/domain_service:/app
    ports:
      - "8003:80"
    command: uvicorn main:app --host 0.0.0.0 --port 80 --reload
    networks:
      - vertice-network
    restart: unless-stopped

  ip_intelligence_service:
    build: ./backend/services/ip_intelligence_service
    container_name: vertice-ip-intel
    volumes:
      - ./backend/services/ip_intelligence_service:/app
    ports:
      - "8004:80"
    environment:
      - CACHE_TTL_SECONDS=86400
    command: uvicorn main:app --host 0.0.0.0 --port 80
    networks:
      - vertice-network
    restart: unless-stopped

  network_monitor_service:
    build: ./backend/services/network_monitor_service
    container_name: vertice-network-monitor
    volumes:
      - ./backend/services/network_monitor_service:/app
    ports:
      - "8005:80"
    command: uvicorn main:app --host 0.0.0.0 --port 80 --reload
    cap_add:
      - NET_ADMIN
      - NET_RAW
    networks:
      - vertice-network
    restart: unless-stopped

  nmap_service:
    build: ./backend/services/nmap_service
    container_name: vertice-nmap
    volumes:
      - ./backend/services/nmap_service:/app
    ports:
      - "8006:80"
    command: uvicorn main:app --host 0.0.0.0 --port 80 --reload
    cap_add:
      - NET_ADMIN
      - NET_RAW
    networks:
      - vertice-network
    restart: unless-stopped

  osint-service:
    build: ./backend/services/osint_service
    container_name: vertice-osint
    ports:
      - "8007:8007"
    environment:
      - REDIS_HOST=redis
      - MAXIMUS_HOST=maximus_predict
      - PYTHONUNBUFFERED=1
      - CHROME_BIN=/usr/bin/chromium
      - CHROMEDRIVER_PATH=/usr/bin/chromedriver
    depends_on:
      - redis
      - maximus_predict
    volumes:
      - ./backend/services/osint_service:/app
      - osint-data:/app/data
    command: uvicorn main:app --host 0.0.0.0 --port 8007 --reload
    networks:
      - vertice-network
    restart: unless-stopped

  maximus_predict:
    build: ./backend/services/maximus_predict
    container_name: maximus-predict
    volumes:
      - ./backend/services/maximus_predict:/code
      - maximus-models:/models
    ports:
      - "8008:80"
    environment:
      - MODEL_PATH=/models
      - PYTHONUNBUFFERED=1
    command: uvicorn main:app --host 0.0.0.0 --port 80 --reload
    networks:
      - vertice-network
    restart: unless-stopped

  # ============================
  # ATLAS SERVICE (NOVO)
  # ============================
  atlas_service:
    build: ./backend/services/atlas_service
    container_name: vertice-atlas
    volumes:
      - ./backend/services/atlas_service:/app
    ports:
      - "8009:8000" # Expondo numa porta externa livre
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - vertice-network
    restart: unless-stopped

  # ============================
  # AUTH SERVICE
  # ============================
  auth_service:
    build: ./backend/services/auth_service
    container_name: vertice-auth
    volumes:
      - ./backend/services/auth_service:/app
    ports:
      - "8010:80"
    command: uvicorn main:app --host 0.0.0.0 --port 80 --reload
    environment:
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - JWT_SECRET=${JWT_SECRET:-vertice-super-secret-key-2024}
      - REDIS_URL=redis://redis:6379
      - AUTHORIZED_DOMAINS=${AUTHORIZED_DOMAINS:-}
      - AUTHORIZED_EMAILS=${AUTHORIZED_EMAILS:-}
      - ADMIN_EMAILS=${ADMIN_EMAILS:-}
    depends_on:
      - redis
    networks:
      - vertice-network
    restart: unless-stopped

  # ============================
  # VULNERABILITY SCANNER SERVICE
  # ============================
  vuln_scanner_service:
    build: ./backend/services/vuln_scanner_service
    container_name: vertice-vuln-scanner
    volumes:
      - ./backend/services/vuln_scanner_service:/app
    ports:
      - "8011:80"
    command: uvicorn main:app --host 0.0.0.0 --port 80 --reload
    cap_add:
      - NET_ADMIN
      - NET_RAW
    networks:
      - vertice-network
    restart: unless-stopped

  # ============================
  # SOCIAL ENGINEERING SERVICE
  # ============================
  social_eng_service:
    build: ./backend/services/social_eng_service
    container_name: vertice-social-eng
    volumes:
      - ./backend/services/social_eng_service:/app
    ports:
      - "8012:80"
    command: uvicorn main:app --host 0.0.0.0 --port 80 --reload
    networks:
      - vertice-network
    restart: unless-stopped

  # ... (Prometheus e Grafana permanecem iguais) ...

  prometheus:
    image: prom/prometheus:latest
    container_name: vertice-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - vertice-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: vertice-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=vertice2024
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - vertice-network
    restart: unless-stopped

  # ============================
  # NSA-GRADE AURORA AI SERVICES
  # ============================

  threat_intel_service:
    build: ./backend/services/threat_intel_service
    container_name: vertice-threat-intel
    ports:
      - "8013:8013"
    volumes:
      - ./backend/services/threat_intel_service:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8013 --reload
    environment:
      - ABUSEIPDB_API_KEY=${ABUSEIPDB_API_KEY}
      - VIRUSTOTAL_API_KEY=${VIRUSTOTAL_API_KEY}
      - GREYNOISE_API_KEY=${GREYNOISE_API_KEY}
      - OTX_API_KEY=${OTX_API_KEY}
    networks:
      - vertice-network
    restart: unless-stopped

  malware_analysis_service:
    build: ./backend/services/malware_analysis_service
    container_name: vertice-malware-analysis
    ports:
      - "8014:8014"
    volumes:
      - ./backend/services/malware_analysis_service:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8014 --reload
    environment:
      - VIRUSTOTAL_API_KEY=${VIRUSTOTAL_API_KEY}
      - HYBRID_ANALYSIS_API_KEY=${HYBRID_ANALYSIS_API_KEY}
    networks:
      - vertice-network
    restart: unless-stopped

  ssl_monitor_service:
    build: ./backend/services/ssl_monitor_service
    container_name: vertice-ssl-monitor
    ports:
      - "8015:8015"
    volumes:
      - ./backend/services/ssl_monitor_service:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8015 --reload
    networks:
      - vertice-network
    restart: unless-stopped

  # ============================
  # MAXIMUS INTEGRATION SERVICE - API GATEWAY FOR AI
  # ============================
  maximus_integration_service:
    build: ./backend/services/maximus_integration_service
    container_name: maximus-integration
    ports:
      - "8099:8099"
    volumes:
      - ./backend/services/maximus_integration_service:/app
      - ./backend/services/maximus_oraculo:/app/maximus_oraculo
      - ./backend/services/maximus_eureka:/app/maximus_eureka
    command: uvicorn main:app --host 0.0.0.0 --port 8099 --reload
    environment:
      - ORACULO_TARGET_PATH=/app/maximus_oraculo
      - EUREKA_SCAN_PATH=/tmp/malware_samples
      - ADR_CORE_URL=http://adr_core_service:8011
      - MAXIMUS_CORE_URL=http://maximus_core_service:8001
    depends_on:
      - adr_core_service
      - maximus_core_service
    networks:
      - vertice-network
    restart: unless-stopped

  maximus_orchestrator_service:
    build: ./backend/services/maximus_orchestrator_service
    container_name: maximus-orchestrator
    ports:
      - "8016:8016"
    volumes:
      - ./backend/services/maximus_orchestrator_service:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8016 --reload
    environment:
      - IP_INTEL_SERVICE_URL=http://ip_intelligence_service:80
      - THREAT_INTEL_SERVICE_URL=http://threat_intel_service:80
      - MALWARE_ANALYSIS_SERVICE_URL=http://malware_analysis_service:80
      - SSL_MONITOR_SERVICE_URL=http://ssl_monitor_service:80
      - NMAP_SERVICE_URL=http://nmap_service:80
      - VULN_SCANNER_SERVICE_URL=http://vuln_scanner_service:80
      - SOCIAL_ENG_SERVICE_URL=http://social_eng_service:80
      - DOMAIN_SERVICE_URL=http://domain_service:80
    depends_on:
      - threat_intel_service
      - malware_analysis_service
      - ssl_monitor_service
      - ip_intelligence_service
      - nmap_service
    networks:
      - vertice-network
    restart: unless-stopped

  # ============================
  # MAXIMUS CORE SERVICE - THE BRAIN ð§ 
  # ============================
  maximus_core_service:
    build: ./backend/services/maximus_core_service
    container_name: maximus-core
    ports:
      - "8001:8001"
    volumes:
      - ./backend/services/maximus_core_service:/app
    command: python main.py
    environment:
      - LLM_PROVIDER=${LLM_PROVIDER:-gemini}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/aurora
      - THREAT_INTEL_SERVICE_URL=http://threat_intel_service:80
      - MALWARE_ANALYSIS_SERVICE_URL=http://malware_analysis_service:80
      - SSL_MONITOR_SERVICE_URL=http://ssl_monitor_service:80
      - IP_INTEL_SERVICE_URL=http://ip_intelligence_service:80
      - NMAP_SERVICE_URL=http://nmap_service:80
      - VULN_SCANNER_SERVICE_URL=http://vuln_scanner_service:80
      - DOMAIN_SERVICE_URL=http://domain_service:80
      - MAXIMUS_PREDICT_URL=http://maximus_predict:80
      - OSINT_SERVICE_URL=http://osint-service:8007
    depends_on:
      - redis
      - postgres
      - threat_intel_service
      - malware_analysis_service
      - ssl_monitor_service
      - ip_intelligence_service
      - nmap_service
      - vuln_scanner_service
      - domain_service
      - maximus_predict
      - osint-service
    networks:
      - vertice-network
    restart: unless-stopped

  # ============================================================================
  # HCL SERVICES - Homeostatic Control Loop (Production Ready)
  # ============================================================================

  # TimescaleDB for HCL knowledge base
  hcl-postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: hcl-postgres
    environment:
      POSTGRES_DB: hcl_knowledge
      POSTGRES_USER: hcl_user
      POSTGRES_PASSWORD: hcl_password
    ports:
      - "5433:5432"
    volumes:
      - hcl_postgres_data:/var/lib/postgresql/data
      - ./backend/services/hcl_kb_service/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hcl_user -d hcl_knowledge"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - vertice-network
    restart: unless-stopped

  # Kafka for HCL event streaming
  hcl-kafka:
    image: apache/kafka:latest
    container_name: hcl-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://hcl-kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@hcl-kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      CLUSTER_ID: VerticeHCLCluster123456
    volumes:
      - hcl_kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "/opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server localhost:9092 || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 20s
    networks:
      - vertice-network
    restart: unless-stopped

  # HCL Knowledge Base API
  hcl-kb-service:
    build:
      context: ./backend/services/hcl_kb_service
      dockerfile: Dockerfile
    container_name: hcl-kb-service
    ports:
      - "8100:8000"
    environment:
      SERVICE_NAME: hcl_kb
      DATABASE_URL: postgresql+asyncpg://hcl_user:hcl_password@hcl-postgres/hcl_knowledge
      LOG_LEVEL: INFO
    depends_on:
      hcl-postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - vertice-network
    restart: unless-stopped

  # HCL Monitor (System metrics collection)
  hcl-monitor:
    build:
      context: ./backend/services/hcl_monitor_service
      dockerfile: Dockerfile
    container_name: hcl-monitor
    ports:
      - "8101:8001"
    environment:
      SERVICE_NAME: hcl_monitor
      KB_API_URL: http://hcl-kb-service:8000
      KAFKA_BROKERS: hcl-kafka:9092
      COLLECTION_INTERVAL: 15
      LOG_LEVEL: INFO
    depends_on:
      hcl-kafka:
        condition: service_healthy
      hcl-kb-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8001/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - vertice-network
    restart: unless-stopped
    privileged: true
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro

  # HCL Analyzer (ML predictions)
  hcl-analyzer:
    build:
      context: ./backend/services/hcl_analyzer_service
      dockerfile: Dockerfile
    container_name: hcl-analyzer
    ports:
      - "8102:8002"
    environment:
      SERVICE_NAME: hcl_analyzer
      KB_API_URL: http://hcl-kb-service:8000
      KAFKA_BROKERS: hcl-kafka:9092
      MODEL_DIR: /app/models
      LOG_LEVEL: INFO
    depends_on:
      hcl-kafka:
        condition: service_healthy
      hcl-kb-service:
        condition: service_healthy
    volumes:
      - hcl_analyzer_models:/app/models
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8002/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - vertice-network
    restart: unless-stopped

  # HCL Planner (Fuzzy Logic + RL)
  hcl-planner:
    build:
      context: ./backend/services/hcl_planner_service
      dockerfile: Dockerfile
    container_name: hcl-planner
    ports:
      - "8103:8003"
    environment:
      SERVICE_NAME: hcl_planner
      KB_API_URL: http://hcl-kb-service:8000
      KAFKA_BROKERS: hcl-kafka:9092
      MODEL_DIR: /app/models
      LOG_LEVEL: INFO
    depends_on:
      hcl-kafka:
        condition: service_healthy
      hcl-kb-service:
        condition: service_healthy
      hcl-analyzer:
        condition: service_healthy
    volumes:
      - hcl_planner_models:/app/models
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8003/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - vertice-network
    restart: unless-stopped

  # HCL Executor (Kubernetes actions)
  hcl-executor:
    build:
      context: ./backend/services/hcl_executor_service
      dockerfile: Dockerfile
    container_name: hcl-executor
    ports:
      - "8104:8004"
    environment:
      SERVICE_NAME: hcl_executor
      KB_API_URL: http://hcl-kb-service:8000
      KAFKA_BROKERS: hcl-kafka:9092
      K8S_NAMESPACE: default
      IN_CLUSTER: "false"
      DRY_RUN: "true"
      ENABLE_ROLLBACK: "true"
      LOG_LEVEL: INFO
    depends_on:
      hcl-kafka:
        condition: service_healthy
      hcl-kb-service:
        condition: service_healthy
      hcl-planner:
        condition: service_healthy
    volumes:
      - ${HOME}/.kube:/home/vertice/.kube:ro
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8004/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - vertice-network
    restart: unless-stopped

  # ============================================================================
  # NEUROMORPHIC SERVICES - RTE + hPC (Production Ready)
  # ============================================================================

  # RTE - Reflex Triage Engine (<50ms threat detection)
  rte-service:
    build:
      context: ./backend/services/rte_service
      dockerfile: Dockerfile
    container_name: rte-service
    ports:
      - "8105:8005"
    environment:
      RTE_HOST: 0.0.0.0
      RTE_PORT: 8005
      LOG_LEVEL: INFO
    volumes:
      - rte_models:/app/models
      - rte_quarantine:/var/quarantine
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - vertice-network
    restart: unless-stopped

  # hPC - Hierarchical Predictive Coding (Bayesian inference)
  hpc-service:
    build:
      context: ./backend/services/hpc_service
      dockerfile: Dockerfile
    container_name: hpc-service
    ports:
      - "8106:8006"
    environment:
      HPC_HOST: 0.0.0.0
      HPC_PORT: 8006
      NUM_FEATURES: 30
      HIERARCHY_LEVELS: 4
      LEARNING_RATE: 0.1
      EXPLORATION_BUDGET: 100.0
      LOG_LEVEL: INFO
    volumes:
      - hpc_models:/app/models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - vertice-network
    restart: unless-stopped

  # ============================================================================
  # MAXIMUS ADVANCED SERVICES - Eureka + OrÃ¡culo (Production Ready)
  # ============================================================================

  # MAXIMUS EUREKA - Deep Malware Analysis
  maximus-eureka:
    build:
      context: ./backend/services/maximus_eureka
      dockerfile: Dockerfile
    container_name: maximus-eureka
    ports:
      - "8200:8200"
    environment:
      SERVICE_NAME: maximus_eureka
      LOG_LEVEL: INFO
    volumes:
      - eureka_reports:/app/reports
      - eureka_playbooks:/app/playbooks
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8200/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - vertice-network
    restart: unless-stopped

  # MAXIMUS ORÃCULO - Self-Improvement Engine
  maximus-oraculo:
    build:
      context: ./backend/services/maximus_oraculo
      dockerfile: Dockerfile
    container_name: maximus-oraculo
    ports:
      - "8201:8201"
    environment:
      SERVICE_NAME: maximus_oraculo
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      LOG_LEVEL: INFO
    volumes:
      - ../:/workspace:ro
      - ${HOME}/.gitconfig:/home/vertice/.gitconfig:ro
      - oraculo_sessions:/app/sessions
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8201/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - vertice-network
    restart: unless-stopped

# ============================
# NETWORKS
# ============================
networks:
  vertice-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================
# VOLUMES
# ============================
volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  osint-data:
    driver: local
  maximus-models:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  # HCL volumes
  hcl_postgres_data:
    driver: local
  hcl_kafka_data:
    driver: local
  hcl_analyzer_models:
    driver: local
  hcl_planner_models:
    driver: local
  # Neuromorphic volumes
  rte_models:
    driver: local
  rte_quarantine:
    driver: local
  hpc_models:
    driver: local
  # MAXIMUS Advanced volumes
  eureka_reports:
    driver: local
  eureka_playbooks:
    driver: local
  oraculo_sessions:
    driver: local
