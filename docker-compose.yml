# /home/juan/vertice-dev/docker-compose.yml

services:
  # ============================
  # API GATEWAY
  # ============================
  api_gateway:
    build: ./backend/api_gateway
    container_name: vertice-api-gateway
    ports:
      - "8000:8000"
    volumes:
      - ./backend/api_gateway:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    environment:
      - SINESP_SERVICE_URL=http://sinesp_service:80
      - CYBER_SERVICE_URL=http://cyber_service:80
      - DOMAIN_SERVICE_URL=http://domain_service:80
      - IP_INTELLIGENCE_SERVICE_URL=http://ip_intelligence_service:80
      - NETWORK_MONITOR_SERVICE_URL=http://network_monitor_service:80
      - NMAP_SERVICE_URL=http://nmap_service:80
      - OSINT_SERVICE_URL=http://osint_service:8007
      - GOOGLE_OSINT_SERVICE_URL=http://google_osint_service:8008
      - MAXIMUS_PREDICT_URL=http://maximus_predict:80
      - ATLAS_SERVICE_URL=http://atlas_service:8000
      - AUTH_SERVICE_URL=http://auth_service:80
      - VULN_SCANNER_SERVICE_URL=http://vuln_scanner_service:80
      - SOCIAL_ENG_SERVICE_URL=http://social_eng_service:80
      - THREAT_INTEL_SERVICE_URL=http://threat_intel_service:80
      - MALWARE_ANALYSIS_SERVICE_URL=http://malware_analysis_service:80
      - SSL_MONITOR_SERVICE_URL=http://ssl_monitor_service:8015
      - MAXIMUS_ORCHESTRATOR_URL=http://maximus_orchestrator_service:80
      - MAXIMUS_CORE_SERVICE_URL=http://maximus_core_service:8001
      - MAXIMUS_EUREKA_URL=http://maximus_eureka:8200
      - MAXIMUS_ORACULO_URL=http://maximus_oraculo:8201
      - IMMUNIS_API_URL=http://immunis_api_service:8005
      - HCL_ANALYZER_URL=http://hcl_analyzer_service:8020
      - HCL_EXECUTOR_URL=http://hcl_executor_service:8021
      - HCL_KB_URL=http://hcl_kb_service:8022
      - HCL_MONITOR_URL=http://hcl_monitor_service:8023
      - HCL_PLANNER_URL=http://hcl_planner_service:8024
      - VISUAL_CORTEX_URL=http://visual_cortex_service:8006
      - AUDITORY_CORTEX_URL=http://auditory_cortex_service:8007
      - SOMATOSENSORY_URL=http://somatosensory_service:8008
      - CHEMICAL_SENSING_URL=http://chemical_sensing_service:8009
      - VESTIBULAR_URL=http://vestibular_service:8010
      - PREFRONTAL_CORTEX_URL=http://prefrontal_cortex_service:8011
      - DIGITAL_THALAMUS_URL=http://digital_thalamus_service:8012
      - NARRATIVE_FILTER_URL=http://narrative_manipulation_filter:8013
      - AI_IMMUNE_SYSTEM_URL=http://ai_immune_system:8014
      - HOMEOSTATIC_REGULATION_URL=http://homeostatic_regulation:8015
      - NETWORK_RECON_URL=http://network_recon_service:8032
      - VULN_INTEL_URL=http://vuln_intel_service:8033
      - WEB_ATTACK_URL=http://web_attack_service:8034
      - C2_ORCHESTRATION_URL=http://c2_orchestration_service:8035
      - BAS_URL=http://bas_service:8036
      - OFFENSIVE_GATEWAY_URL=http://offensive_gateway:8037
    depends_on:
      - redis
      - sinesp_service
      - cyber_service
      - domain_service
      - ip_intelligence_service
      - network_monitor_service
      - nmap_service
      - osint-service
      - maximus_predict
      - auth_service
      - atlas_service # <-- ADICIONADO
      - vuln_scanner_service
      - social_eng_service
      - threat_intel_service
      - malware_analysis_service
      - ssl_monitor_service
      - maximus_orchestrator_service
    networks:
      - vertice-network
    restart: unless-stopped

  # ============================
  # REDIS CACHE
  # ============================
  redis:
    image: "redis:alpine"
    container_name: vertice-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - vertice-network
    restart: unless-stopped

  # ============================
  # POSTGRESQL DATABASE
  # ============================
  postgres:
    image: "postgres:15-alpine"
    container_name: vertice-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=aurora
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - vertice-network
    restart: unless-stopped

  # ============================
  # QDRANT VECTOR DB
  # ============================
  qdrant:
    image: qdrant/qdrant:latest
    container_name: vertice-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant-data:/qdrant/storage
    networks:
      - vertice-network
    restart: unless-stopped

  # ============================
  # CUCKOO SANDBOX (optional)
  # ============================
  # cuckoo:
  #   image: blacktop/cuckoo:latest
  #   container_name: vertice-cuckoo
  #   ports:
  #     - "8090:8090"
  #   volumes:
  #     - cuckoo-data:/cuckoo
  #   networks:
  #     - vertice-network
  #   restart: unless-stopped
  #   privileged: true

  # ... (todos os outros serviÃ§os permanecem iguais) ...
  
  sinesp_service:
    build: ./backend/services/sinesp_service
    container_name: vertice-sinesp
    ports:
      - "8001:80"
    volumes:
      - ./backend/services/sinesp_service:/code
    command: uvicorn main:app --host 0.0.0.0 --port 80 --reload
    networks:
      - vertice-network
    restart: unless-stopped

  cyber_service:
    build: ./backend/services/cyber_service
    container_name: vertice-cyber
    volumes:
      - ./backend/services/cyber_service:/app
      - /var/log:/var/log:ro
      - /etc:/etc:ro
    privileged: true
    ports:
      - "8002:80"
    command: uvicorn main:app --host 0.0.0.0 --port 80 --reload
    networks:
      - vertice-network
    restart: unless-stopped

  domain_service:
    build: ./backend/services/domain_service
    container_name: vertice-domain
    volumes:
      - ./backend/services/domain_service:/app
    ports:
      - "8003:80"
    command: uvicorn main:app --host 0.0.0.0 --port 80 --reload
    networks:
      - vertice-network
    restart: unless-stopped

  ip_intelligence_service:
    build: ./backend/services/ip_intelligence_service
    container_name: vertice-ip-intel
    volumes:
      - ./backend/services/ip_intelligence_service:/app
    ports:
      - "8004:80"
    environment:
      - CACHE_TTL_SECONDS=86400
    command: uvicorn main:app --host 0.0.0.0 --port 80
    networks:
      - vertice-network
    restart: unless-stopped

  network_monitor_service:
    build: ./backend/services/network_monitor_service
    container_name: vertice-network-monitor
    volumes:
      - ./backend/services/network_monitor_service:/app
    ports:
      - "8005:80"
    command: uvicorn main:app --host 0.0.0.0 --port 80 --reload
    cap_add:
      - NET_ADMIN
      - NET_RAW
    networks:
      - vertice-network
    restart: unless-stopped

  nmap_service:
    build: ./backend/services/nmap_service
    container_name: vertice-nmap
    volumes:
      - ./backend/services/nmap_service:/app
    ports:
      - "8006:80"
    command: uvicorn main:app --host 0.0.0.0 --port 80 --reload
    cap_add:
      - NET_ADMIN
      - NET_RAW
    networks:
      - vertice-network
    restart: unless-stopped

  osint-service:
    build: ./backend/services/osint_service
    container_name: vertice-osint
    ports:
      - "8007:8007"
    environment:
      - REDIS_HOST=redis
      - MAXIMUS_HOST=maximus_predict
      - PYTHONUNBUFFERED=1
      - CHROME_BIN=/usr/bin/chromium
      - CHROMEDRIVER_PATH=/usr/bin/chromedriver
    depends_on:
      - redis
      - maximus_predict
    volumes:
      - ./backend/services/osint_service:/app
      - osint-data:/app/data
    command: uvicorn main:app --host 0.0.0.0 --port 8007 --reload
    networks:
      - vertice-network
    restart: unless-stopped

  maximus_predict:
    build: ./backend/services/maximus_predict
    container_name: maximus-predict
    volumes:
      - ./backend/services/maximus_predict:/code
      - maximus-models:/models
    ports:
      - "8008:80"
    environment:
      - MODEL_PATH=/models
      - PYTHONUNBUFFERED=1
    command: uvicorn main:app --host 0.0.0.0 --port 80 --reload
    networks:
      - vertice-network
    restart: unless-stopped

  # ============================
  # ATLAS SERVICE (NOVO)
  # ============================
  atlas_service:
    build: ./backend/services/atlas_service
    container_name: vertice-atlas
    volumes:
      - ./backend/services/atlas_service:/app
    ports:
      - "8009:8000" # Expondo numa porta externa livre
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - vertice-network
    restart: unless-stopped

  # ============================
  # AUTH SERVICE
  # ============================
  auth_service:
    build: ./backend/services/auth_service
    container_name: vertice-auth
    volumes:
      - ./backend/services/auth_service:/app
    ports:
      - "8010:80"
    command: uvicorn main:app --host 0.0.0.0 --port 80 --reload
    environment:
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - JWT_SECRET=${JWT_SECRET:-vertice-super-secret-key-2024}
      - REDIS_URL=redis://redis:6379
      - AUTHORIZED_DOMAINS=${AUTHORIZED_DOMAINS:-}
      - AUTHORIZED_EMAILS=${AUTHORIZED_EMAILS:-}
      - ADMIN_EMAILS=${ADMIN_EMAILS:-}
    depends_on:
      - redis
    networks:
      - vertice-network
    restart: unless-stopped

  # ============================
  # VULNERABILITY SCANNER SERVICE
  # ============================
  vuln_scanner_service:
    build: ./backend/services/vuln_scanner_service
    container_name: vertice-vuln-scanner
    volumes:
      - ./backend/services/vuln_scanner_service:/app
    ports:
      - "8011:80"
    command: uvicorn main:app --host 0.0.0.0 --port 80 --reload
    cap_add:
      - NET_ADMIN
      - NET_RAW
    networks:
      - vertice-network
    restart: unless-stopped

  # ============================
  # SOCIAL ENGINEERING SERVICE
  # ============================
  social_eng_service:
    build: ./backend/services/social_eng_service
    container_name: vertice-social-eng
    volumes:
      - ./backend/services/social_eng_service:/app
    ports:
      - "8012:80"
    command: uvicorn main:app --host 0.0.0.0 --port 80 --reload
    networks:
      - vertice-network
    restart: unless-stopped

  # ... (Prometheus e Grafana permanecem iguais) ...

  prometheus:
    image: prom/prometheus:latest
    container_name: vertice-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - vertice-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: vertice-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=vertice2024
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - vertice-network
    restart: unless-stopped

  # ============================
  # NSA-GRADE AURORA AI SERVICES
  # ============================

  threat_intel_service:
    build: ./backend/services/threat_intel_service
    container_name: vertice-threat-intel
    ports:
      - "8013:8013"
    volumes:
      - ./backend/services/threat_intel_service:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8013 --reload
    environment:
      - ABUSEIPDB_API_KEY=${ABUSEIPDB_API_KEY}
      - VIRUSTOTAL_API_KEY=${VIRUSTOTAL_API_KEY}
      - GREYNOISE_API_KEY=${GREYNOISE_API_KEY}
      - OTX_API_KEY=${OTX_API_KEY}
    networks:
      - vertice-network
    restart: unless-stopped

  malware_analysis_service:
    build: ./backend/services/malware_analysis_service
    container_name: vertice-malware-analysis
    ports:
      - "8014:8014"
    volumes:
      - ./backend/services/malware_analysis_service:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8014 --reload
    environment:
      - VIRUSTOTAL_API_KEY=${VIRUSTOTAL_API_KEY}
      - HYBRID_ANALYSIS_API_KEY=${HYBRID_ANALYSIS_API_KEY}
    networks:
      - vertice-network
    restart: unless-stopped

  ssl_monitor_service:
    build: ./backend/services/ssl_monitor_service
    container_name: vertice-ssl-monitor
    ports:
      - "8015:8015"
    volumes:
      - ./backend/services/ssl_monitor_service:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8015 --reload
    networks:
      - vertice-network
    restart: unless-stopped

  # ============================
  # ADR CORE SERVICE
  # ============================
  adr_core_service:
    build: ./backend/services/adr_core_service
    container_name: vertice-adr-core
    ports:
      - "8030:8030"
    volumes:
      - ./backend/services/adr_core_service:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8030 --reload
    networks:
      - vertice-network
    restart: unless-stopped

  # ============================
  # MAXIMUS INTEGRATION SERVICE - API GATEWAY FOR AI
  # ============================
  maximus_integration_service:
    build: ./backend/services/maximus_integration_service
    container_name: maximus-integration
    ports:
      - "8099:8099"
    volumes:
      - ./backend/services/maximus_integration_service:/app
      - ./backend/services/maximus_oraculo:/app/maximus_oraculo
      - ./backend/services/maximus_eureka:/app/maximus_eureka
    command: uvicorn main:app --host 0.0.0.0 --port 8099 --reload
    environment:
      - ORACULO_TARGET_PATH=/app/maximus_oraculo
      - EUREKA_SCAN_PATH=/tmp/malware_samples
      - ADR_CORE_URL=http://adr_core_service:8030
      - MAXIMUS_CORE_URL=http://maximus_core_service:8001
    depends_on:
      - adr_core_service
      - maximus_core_service
    networks:
      - vertice-network
    restart: unless-stopped

  maximus_orchestrator_service:
    build: ./backend/services/maximus_orchestrator_service
    container_name: maximus-orchestrator
    ports:
      - "8016:8016"
    volumes:
      - ./backend/services/maximus_orchestrator_service:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8016 --reload
    environment:
      - IP_INTEL_SERVICE_URL=http://ip_intelligence_service:80
      - THREAT_INTEL_SERVICE_URL=http://threat_intel_service:80
      - MALWARE_ANALYSIS_SERVICE_URL=http://malware_analysis_service:80
      - SSL_MONITOR_SERVICE_URL=http://ssl_monitor_service:80
      - NMAP_SERVICE_URL=http://nmap_service:80
      - VULN_SCANNER_SERVICE_URL=http://vuln_scanner_service:80
      - SOCIAL_ENG_SERVICE_URL=http://social_eng_service:80
      - DOMAIN_SERVICE_URL=http://domain_service:80
    depends_on:
      - threat_intel_service
      - malware_analysis_service
      - ssl_monitor_service
      - ip_intelligence_service
      - nmap_service
    networks:
      - vertice-network
    restart: unless-stopped

  # ============================
  # MAXIMUS CORE SERVICE - THE BRAIN ð§ 
  # ============================
  maximus_core_service:
    build: ./backend/services/maximus_core_service
    container_name: maximus-core
    ports:
      - "8001:8001"
    volumes:
      - ./backend/services/maximus_core_service:/app
    command: python main.py
    environment:
      - LLM_PROVIDER=${LLM_PROVIDER:-gemini}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/aurora
      - THREAT_INTEL_SERVICE_URL=http://threat_intel_service:80
      - MALWARE_ANALYSIS_SERVICE_URL=http://malware_analysis_service:80
      - SSL_MONITOR_SERVICE_URL=http://ssl_monitor_service:80
      - IP_INTEL_SERVICE_URL=http://ip_intelligence_service:80
      - NMAP_SERVICE_URL=http://nmap_service:80
      - VULN_SCANNER_SERVICE_URL=http://vuln_scanner_service:80
      - DOMAIN_SERVICE_URL=http://domain_service:80
      - MAXIMUS_PREDICT_URL=http://maximus_predict:80
      - OSINT_SERVICE_URL=http://osint-service:8007
    depends_on:
      - redis
      - postgres
      - threat_intel_service
      - malware_analysis_service
      - ssl_monitor_service
      - ip_intelligence_service
      - nmap_service
      - vuln_scanner_service
      - domain_service
      - maximus_predict
      - osint-service
    networks:
      - vertice-network
    restart: unless-stopped

  # ============================================================================
  # HCL SERVICES - Homeostatic Control Loop (Production Ready)
  # ============================================================================

  # TimescaleDB for HCL knowledge base
  hcl-postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: hcl-postgres
    environment:
      POSTGRES_DB: hcl_knowledge
      POSTGRES_USER: hcl_user
      POSTGRES_PASSWORD: hcl_password
    ports:
      - "5433:5432"
    volumes:
      - hcl_postgres_data:/var/lib/postgresql/data
      - ./backend/services/hcl_kb_service/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hcl_user -d hcl_knowledge"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - vertice-network
    restart: unless-stopped

  # Kafka for HCL event streaming
  hcl-kafka:
    image: apache/kafka:latest
    container_name: hcl-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://hcl-kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@hcl-kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      CLUSTER_ID: VerticeHCLCluster123456
    volumes:
      - hcl_kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "/opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server localhost:9092 || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 20s
    networks:
      - vertice-network
    restart: unless-stopped

  # HCL Knowledge Base API
  hcl-kb-service:
    build:
      context: ./backend/services/hcl_kb_service
      dockerfile: Dockerfile
    container_name: hcl-kb-service
    ports:
      - "8100:8000"
    environment:
      SERVICE_NAME: hcl_kb
      DATABASE_URL: postgresql+asyncpg://hcl_user:hcl_password@hcl-postgres/hcl_knowledge
      LOG_LEVEL: INFO
    depends_on:
      hcl-postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - vertice-network
    restart: unless-stopped

  # HCL Monitor (System metrics collection)
  hcl-monitor:
    build:
      context: ./backend/services/hcl_monitor_service
      dockerfile: Dockerfile
    container_name: hcl-monitor
    ports:
      - "8101:8001"
    environment:
      SERVICE_NAME: hcl_monitor
      KB_API_URL: http://hcl-kb-service:8000
      KAFKA_BROKERS: hcl-kafka:9092
      COLLECTION_INTERVAL: 15
      LOG_LEVEL: INFO
    depends_on:
      hcl-kafka:
        condition: service_healthy
      hcl-kb-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8001/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - vertice-network
    restart: unless-stopped
    privileged: true
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro

  # HCL Analyzer (ML predictions)
  hcl-analyzer:
    build:
      context: ./backend/services/hcl_analyzer_service
      dockerfile: Dockerfile
    container_name: hcl-analyzer
    ports:
      - "8102:8002"
    environment:
      SERVICE_NAME: hcl_analyzer
      KB_API_URL: http://hcl-kb-service:8000
      KAFKA_BROKERS: hcl-kafka:9092
      MODEL_DIR: /app/models
      LOG_LEVEL: INFO
    depends_on:
      hcl-kafka:
        condition: service_healthy
      hcl-kb-service:
        condition: service_healthy
    volumes:
      - hcl_analyzer_models:/app/models
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8002/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - vertice-network
    restart: unless-stopped

  # HCL Planner (Fuzzy Logic + RL)
  hcl-planner:
    build:
      context: ./backend/services/hcl_planner_service
      dockerfile: Dockerfile
    container_name: hcl-planner
    ports:
      - "8103:8003"
    environment:
      SERVICE_NAME: hcl_planner
      KB_API_URL: http://hcl-kb-service:8000
      KAFKA_BROKERS: hcl-kafka:9092
      MODEL_DIR: /app/models
      LOG_LEVEL: INFO
    depends_on:
      hcl-kafka:
        condition: service_healthy
      hcl-kb-service:
        condition: service_healthy
      hcl-analyzer:
        condition: service_healthy
    volumes:
      - hcl_planner_models:/app/models
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8003/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - vertice-network
    restart: unless-stopped

  # HCL Executor (Kubernetes actions)
  hcl-executor:
    build:
      context: ./backend/services/hcl_executor_service
      dockerfile: Dockerfile
    container_name: hcl-executor
    ports:
      - "8104:8004"
    environment:
      SERVICE_NAME: hcl_executor
      KB_API_URL: http://hcl-kb-service:8000
      KAFKA_BROKERS: hcl-kafka:9092
      K8S_NAMESPACE: default
      IN_CLUSTER: "false"
      DRY_RUN: "true"
      ENABLE_ROLLBACK: "true"
      LOG_LEVEL: INFO
    depends_on:
      hcl-kafka:
        condition: service_healthy
      hcl-kb-service:
        condition: service_healthy
      hcl-planner:
        condition: service_healthy
    volumes:
      - ${HOME}/.kube:/home/vertice/.kube:ro
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8004/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - vertice-network
    restart: unless-stopped

  # ============================================================================
  # NEUROMORPHIC SERVICES - RTE + hPC (Production Ready)
  # ============================================================================

  # RTE - Reflex Triage Engine (<50ms threat detection)
  rte-service:
    build:
      context: ./backend/services/rte_service
      dockerfile: Dockerfile
    container_name: rte-service
    ports:
      - "8105:8005"
    environment:
      RTE_HOST: 0.0.0.0
      RTE_PORT: 8005
      LOG_LEVEL: INFO
    volumes:
      - rte_models:/app/models
      - rte_quarantine:/var/quarantine
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - vertice-network
    restart: unless-stopped

  # hPC - Hierarchical Predictive Coding (Bayesian inference)
  hpc-service:
    build:
      context: ./backend/services/hpc_service
      dockerfile: Dockerfile
    container_name: hpc-service
    ports:
      - "8106:8006"
    environment:
      HPC_HOST: 0.0.0.0
      HPC_PORT: 8006
      NUM_FEATURES: 30
      HIERARCHY_LEVELS: 4
      LEARNING_RATE: 0.1
      EXPLORATION_BUDGET: 100.0
      LOG_LEVEL: INFO
    volumes:
      - hpc_models:/app/models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - vertice-network
    restart: unless-stopped

  # ============================================================================
  # MAXIMUS ADVANCED SERVICES - Eureka + OrÃ¡culo (Production Ready)
  # ============================================================================

  # MAXIMUS EUREKA - Deep Malware Analysis
  maximus-eureka:
    build:
      context: ./backend/services/maximus_eureka
      dockerfile: Dockerfile
    container_name: maximus-eureka
    ports:
      - "8200:8200"
    environment:
      SERVICE_NAME: maximus_eureka
      LOG_LEVEL: INFO
    volumes:
      - eureka_reports:/app/reports
      - eureka_playbooks:/app/playbooks
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8200/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - vertice-network
    restart: unless-stopped

  # MAXIMUS ORÃCULO - Self-Improvement Engine
  maximus-oraculo:
    build:
      context: ./backend/services/maximus_oraculo
      dockerfile: Dockerfile
    container_name: maximus-oraculo
    ports:
      - "8201:8201"
    environment:
      SERVICE_NAME: maximus_oraculo
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      LOG_LEVEL: INFO
    volumes:
      - ../:/workspace:ro
      - ${HOME}/.gitconfig:/home/vertice/.gitconfig:ro
      - oraculo_sessions:/app/sessions
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8201/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - vertice-network
    restart: unless-stopped

  # ============================
  # OSINT DASHBOARD - MISSING SERVICES
  # ============================

  google_osint_service:
    build: ./backend/services/google_osint_service
    container_name: vertice-google-osint
    ports:
      - "8031:8031"
    volumes:
      - ./backend/services/google_osint_service:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8031 --reload
    environment:
      - REDIS_URL=redis://redis:6379/3
    depends_on:
      - redis
    networks:
      - vertice-network
    restart: unless-stopped

  # ============================
  # CYBER DASHBOARD - MISSING SERVICES
  # ============================
  # IMMUNIS SYSTEM (8 SERVICES)
  # ============================

  immunis_api_service:
    build: ./backend/services/immunis_api_service
    container_name: vertice-immunis-api
    ports:
      - "8005:8005"
    volumes:
      - ./backend/services/immunis_api_service:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8005 --reload
    environment:
      - MACROPHAGE_URL=http://immunis_macrophage_service:8012
      - NEUTROPHIL_URL=http://immunis_neutrophil_service:8013
      - DENDRITIC_URL=http://immunis_dendritic_service:8014
      - BCELL_URL=http://immunis_bcell_service:8016
    depends_on:
      - immunis_macrophage_service
      - immunis_neutrophil_service
      - immunis_dendritic_service
      - immunis_bcell_service
    networks:
      - vertice-network
    restart: unless-stopped

  immunis_macrophage_service:
    build: ./backend/services/immunis_macrophage_service
    container_name: vertice-immunis-macrophage
    ports:
      - "8012:8012"
    volumes:
      - ./backend/services/immunis_macrophage_service:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8012 --reload
    environment:
      - CUCKOO_API_URL=${CUCKOO_API_URL:-http://cuckoo:8090}
      - CUCKOO_API_KEY=${CUCKOO_API_KEY:-}
    networks:
      - vertice-network
    restart: unless-stopped

  immunis_neutrophil_service:
    build: ./backend/services/immunis_neutrophil_service
    container_name: vertice-immunis-neutrophil
    ports:
      - "8013:8013"
    volumes:
      - ./backend/services/immunis_neutrophil_service:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8013 --reload
    networks:
      - vertice-network
    restart: unless-stopped

  immunis_dendritic_service:
    build: ./backend/services/immunis_dendritic_service
    container_name: vertice-immunis-dendritic
    ports:
      - "8014:8014"
    volumes:
      - ./backend/services/immunis_dendritic_service:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8014 --reload
    networks:
      - vertice-network
    restart: unless-stopped

  immunis_bcell_service:
    build: ./backend/services/immunis_bcell_service
    container_name: vertice-immunis-bcell
    ports:
      - "8016:8016"
    volumes:
      - ./backend/services/immunis_bcell_service:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8016 --reload
    networks:
      - vertice-network
    restart: unless-stopped

  immunis_helper_t_service:
    build: ./backend/services/immunis_helper_t_service
    container_name: vertice-immunis-helper-t
    ports:
      - "8017:8017"
    volumes:
      - ./backend/services/immunis_helper_t_service:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8017 --reload
    networks:
      - vertice-network
    restart: unless-stopped

  immunis_cytotoxic_t_service:
    build: ./backend/services/immunis_cytotoxic_t_service
    container_name: vertice-immunis-cytotoxic-t
    ports:
      - "8018:8018"
    volumes:
      - ./backend/services/immunis_cytotoxic_t_service:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8018 --reload
    networks:
      - vertice-network
    restart: unless-stopped

  immunis_nk_cell_service:
    build: ./backend/services/immunis_nk_cell_service
    container_name: vertice-immunis-nk-cell
    ports:
      - "8019:8019"
    volumes:
      - ./backend/services/immunis_nk_cell_service:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8019 --reload
    networks:
      - vertice-network
    restart: unless-stopped

  # ============================
  # HCL (HOLOCRON) SYSTEM (5 SERVICES)
  # ============================

  hcl_analyzer_service:
    build: ./backend/services/hcl_analyzer_service
    container_name: vertice-hcl-analyzer
    ports:
      - "8020:8020"
    volumes:
      - ./backend/services/hcl_analyzer_service:/app
      - hcl_analyzer_models:/models
    command: uvicorn main:app --host 0.0.0.0 --port 8020 --reload
    environment:
      - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/aurora
    depends_on:
      - postgres
    networks:
      - vertice-network
    restart: unless-stopped

  hcl_executor_service:
    build: ./backend/services/hcl_executor_service
    container_name: vertice-hcl-executor
    ports:
      - "8021:8021"
    volumes:
      - ./backend/services/hcl_executor_service:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8021 --reload
    environment:
      - KUBERNETES_SERVICE_HOST=${KUBERNETES_SERVICE_HOST:-}
      - KUBERNETES_SERVICE_PORT=${KUBERNETES_SERVICE_PORT:-}
    networks:
      - vertice-network
    restart: unless-stopped

  hcl_kb_service:
    build: ./backend/services/hcl_kb_service
    container_name: vertice-hcl-kb
    ports:
      - "8022:8022"
    volumes:
      - ./backend/services/hcl_kb_service:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8022 --reload
    environment:
      - QDRANT_URL=http://qdrant:6333
      - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/aurora
    depends_on:
      - qdrant
      - postgres
    networks:
      - vertice-network
    restart: unless-stopped

  hcl_monitor_service:
    build: ./backend/services/hcl_monitor_service
    container_name: vertice-hcl-monitor
    ports:
      - "8023:8023"
    volumes:
      - ./backend/services/hcl_monitor_service:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8023 --reload
    environment:
      - PROMETHEUS_URL=http://prometheus:9090
    networks:
      - vertice-network
    restart: unless-stopped

  hcl_planner_service:
    build: ./backend/services/hcl_planner_service
    container_name: vertice-hcl-planner
    ports:
      - "8024:8024"
    volumes:
      - ./backend/services/hcl_planner_service:/app
      - hcl_planner_models:/models
    command: uvicorn main:app --host 0.0.0.0 --port 8024 --reload
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    networks:
      - vertice-network
    restart: unless-stopped

  # ============================
  # AUTONOMIC SAFETY ARCHITECTURE (Maximus AI 3.0)
  # Sensory Layer (5) + Executive Control (5)
  # ============================

  auditory_cortex_service:
    build: ./backend/services/auditory_cortex_service
    container_name: vertice-auditory-cortex
    ports:
      - "8007:8007"
    volumes:
      - ./backend/services/auditory_cortex_service:/app
    command: uvicorn api:app --host 0.0.0.0 --port 8007
    networks:
      - vertice-network
    restart: unless-stopped

  visual_cortex_service:
    build: ./backend/services/visual_cortex_service
    container_name: vertice-visual-cortex
    ports:
      - "8006:8006"
    volumes:
      - ./backend/services/visual_cortex_service:/app
    command: uvicorn api:app --host 0.0.0.0 --port 8006
    networks:
      - vertice-network
    restart: unless-stopped

  somatosensory_service:
    build: ./backend/services/somatosensory_service
    container_name: vertice-somatosensory
    ports:
      - "8008:8008"
    volumes:
      - ./backend/services/somatosensory_service:/app
    command: uvicorn api:app --host 0.0.0.0 --port 8008
    networks:
      - vertice-network
    restart: unless-stopped

  chemical_sensing_service:
    build: ./backend/services/chemical_sensing_service
    container_name: vertice-chemical-sensing
    ports:
      - "8009:8009"
    volumes:
      - ./backend/services/chemical_sensing_service:/app
    command: uvicorn api:app --host 0.0.0.0 --port 8009
    networks:
      - vertice-network
    restart: unless-stopped

  vestibular_service:
    build: ./backend/services/vestibular_service
    container_name: vertice-vestibular
    ports:
      - "8010:8010"
    volumes:
      - ./backend/services/vestibular_service:/app
    command: uvicorn api:app --host 0.0.0.0 --port 8010
    networks:
      - vertice-network
    restart: unless-stopped

  prefrontal_cortex_service:
    build: ./backend/services/prefrontal_cortex_service
    container_name: vertice-prefrontal-cortex
    ports:
      - "8011:8011"
    volumes:
      - ./backend/services/prefrontal_cortex_service:/app
    command: uvicorn api:app --host 0.0.0.0 --port 8011
    environment:
      - VISUAL_CORTEX_URL=http://visual_cortex_service:8006
      - AUDITORY_CORTEX_URL=http://auditory_cortex_service:8007
      - SOMATOSENSORY_URL=http://somatosensory_service:8008
      - CHEMICAL_SENSING_URL=http://chemical_sensing_service:8009
      - VESTIBULAR_URL=http://vestibular_service:8010
    depends_on:
      - visual_cortex_service
      - auditory_cortex_service
      - somatosensory_service
      - chemical_sensing_service
      - vestibular_service
    networks:
      - vertice-network
    restart: unless-stopped

  digital_thalamus_service:
    build: ./backend/services/digital_thalamus_service
    container_name: vertice-digital-thalamus
    ports:
      - "8012:8012"
    volumes:
      - ./backend/services/digital_thalamus_service:/app
    command: uvicorn api:app --host 0.0.0.0 --port 8012
    environment:
      - VISUAL_CORTEX_URL=http://visual_cortex_service:8006
      - AUDITORY_CORTEX_URL=http://auditory_cortex_service:8007
      - SOMATOSENSORY_URL=http://somatosensory_service:8008
      - CHEMICAL_SENSING_URL=http://chemical_sensing_service:8009
      - VESTIBULAR_URL=http://vestibular_service:8010
    depends_on:
      - visual_cortex_service
      - auditory_cortex_service
      - somatosensory_service
      - chemical_sensing_service
      - vestibular_service
    networks:
      - vertice-network
    restart: unless-stopped

  narrative_manipulation_filter:
    build: ./backend/services/narrative_manipulation_filter
    container_name: vertice-narrative-filter
    ports:
      - "8013:8013"
    volumes:
      - ./backend/services/narrative_manipulation_filter:/app
    command: uvicorn api:app --host 0.0.0.0 --port 8013
    networks:
      - vertice-network
    restart: unless-stopped

  ai_immune_system:
    build: ./backend/services/ai_immune_system
    container_name: vertice-ai-immune
    ports:
      - "8014:8014"
    volumes:
      - ./backend/services/ai_immune_system:/app
    command: uvicorn api:app --host 0.0.0.0 --port 8014
    environment:
      - PREFRONTAL_CORTEX_URL=http://prefrontal_cortex_service:8011
      - DIGITAL_THALAMUS_URL=http://digital_thalamus_service:8012
      - NARRATIVE_FILTER_URL=http://narrative_manipulation_filter:8013
      - VISUAL_CORTEX_URL=http://visual_cortex_service:8006
      - AUDITORY_CORTEX_URL=http://auditory_cortex_service:8007
      - SOMATOSENSORY_URL=http://somatosensory_service:8008
      - CHEMICAL_SENSING_URL=http://chemical_sensing_service:8009
      - VESTIBULAR_URL=http://vestibular_service:8010
    depends_on:
      - prefrontal_cortex_service
      - digital_thalamus_service
      - narrative_manipulation_filter
    networks:
      - vertice-network
    restart: unless-stopped

  homeostatic_regulation:
    build: ./backend/services/homeostatic_regulation
    container_name: vertice-homeostatic-regulation
    ports:
      - "8015:8015"
    volumes:
      - ./backend/services/homeostatic_regulation:/app
    command: uvicorn api:app --host 0.0.0.0 --port 8015
    environment:
      - VISUAL_CORTEX_URL=http://visual_cortex_service:8006
      - AUDITORY_CORTEX_URL=http://auditory_cortex_service:8007
      - SOMATOSENSORY_URL=http://somatosensory_service:8008
      - CHEMICAL_SENSING_URL=http://chemical_sensing_service:8009
      - VESTIBULAR_URL=http://vestibular_service:8010
      - PREFRONTAL_CORTEX_URL=http://prefrontal_cortex_service:8011
      - DIGITAL_THALAMUS_URL=http://digital_thalamus_service:8012
      - NARRATIVE_FILTER_URL=http://narrative_manipulation_filter:8013
      - AI_IMMUNE_SYSTEM_URL=http://ai_immune_system:8014
    depends_on:
      - visual_cortex_service
      - auditory_cortex_service
      - somatosensory_service
      - chemical_sensing_service
      - vestibular_service
      - prefrontal_cortex_service
      - digital_thalamus_service
      - narrative_manipulation_filter
      - ai_immune_system
    networks:
      - vertice-network
    restart: unless-stopped

  # ============================
  # INFRASTRUCTURE - MISSING
  # ============================

  rte_service:
    build: ./backend/services/rte_service
    container_name: vertice-rte
    ports:
      - "8026:8026"
    volumes:
      - ./backend/services/rte_service:/app
      - rte_models:/models
      - rte_quarantine:/quarantine
    command: uvicorn main:app --host 0.0.0.0 --port 8026 --reload
    networks:
      - vertice-network
    restart: unless-stopped

  hpc_service:
    build: ./backend/services/hpc_service
    container_name: vertice-hpc
    ports:
      - "8027:8027"
    volumes:
      - ./backend/services/hpc_service:/app
      - hpc_models:/models
    command: uvicorn main:app --host 0.0.0.0 --port 8027 --reload
    networks:
      - vertice-network
    restart: unless-stopped

  # ============================
  # DATA INGESTION - MISSING
  # ============================

  tataca_ingestion:
    build: ./backend/services/tataca_ingestion
    container_name: vertice-tataca-ingestion
    ports:
      - "8028:8028"
    volumes:
      - ./backend/services/tataca_ingestion:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8028 --reload
    environment:
      - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/aurora
    depends_on:
      - postgres
    networks:
      - vertice-network
    restart: unless-stopped

  seriema_graph:
    build: ./backend/services/seriema_graph
    container_name: vertice-seriema-graph
    ports:
      - "8029:8029"
    volumes:
      - ./backend/services/seriema_graph:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8029 --reload
    environment:
      - NEO4J_URL=${NEO4J_URL:-bolt://neo4j:7687}
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-password}
    networks:
      - vertice-network
    restart: unless-stopped

  # ============================
  # OFFENSIVE SECURITY ARSENAL (Maximus AI 3.0)
  # Strategic Implementation: The 2025 Offensive Security Roadmap
  # ============================

  network_recon_service:
    build: ./backend/services/network_recon_service
    container_name: vertice-network-recon
    ports:
      - "8032:8032"  # Service API
      - "9032:9032"  # Prometheus metrics
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - ./backend/services/network_recon_service:/app
      - network_recon_logs:/var/log/network_recon
      - network_recon_data:/app/data
    command: uvicorn api:app --host 0.0.0.0 --port 8032 --reload
    environment:
      - SERVICE_NAME=network_reconnaissance
      - SERVICE_PORT=8032
      - LOG_LEVEL=INFO
      - DEFAULT_MASSCAN_RATE=10000
      - DEFAULT_NMAP_TIMING=3
      - MAX_SCAN_RATE=100000
      - DEFAULT_DEEP_SCAN_THRESHOLD=100
      - ENABLE_ASA_INTEGRATION=true
      - VISUAL_CORTEX_URL=http://visual_cortex_service:8006
      - AUDITORY_CORTEX_URL=http://auditory_cortex_service:8007
      - SOMATOSENSORY_URL=http://somatosensory_service:8008
      - CHEMICAL_SENSING_URL=http://chemical_sensing_service:8009
      - VESTIBULAR_URL=http://vestibular_service:8010
      - PREFRONTAL_CORTEX_URL=http://prefrontal_cortex_service:8011
      - DIGITAL_THALAMUS_URL=http://digital_thalamus_service:8012
      - NARRATIVE_FILTER_URL=http://narrative_manipulation_filter:8013
      - AI_IMMUNE_SYSTEM_URL=http://ai_immune_system:8014
      - HOMEOSTATIC_REGULATION_URL=http://homeostatic_regulation:8015
      - ASA_REQUEST_TIMEOUT=10.0
      - SCAN_TIMEOUT=3600
      - METRICS_ENABLED=true
      - METRICS_PORT=9032
    depends_on:
      - visual_cortex_service
      - digital_thalamus_service
      - homeostatic_regulation
    networks:
      - vertice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8032/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  vuln_intel_service:
    build: ./backend/services/vuln_intel_service
    container_name: vertice-vuln-intel
    ports:
      - "8033:8033"  # Service API
      - "9033:9033"  # Prometheus metrics
    volumes:
      - ./backend/services/vuln_intel_service:/app
      - nuclei_templates:/app/nuclei-templates
      - vuln_intel_logs:/var/log/vuln_intel
      - vuln_intel_data:/app/data
    command: uvicorn api:app --host 0.0.0.0 --port 8033 --reload
    environment:
      - SERVICE_NAME=vulnerability_intelligence
      - SERVICE_PORT=8033
      - LOG_LEVEL=INFO
      - NUCLEI_BINARY=/usr/bin/nuclei
      - NUCLEI_TEMPLATES_DIR=/app/nuclei-templates
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - AUTO_SYNC_TEMPLATES=true
      - TEMPLATE_SYNC_INTERVAL=3600
      - DEFAULT_NUCLEI_CONCURRENCY=25
      - DEFAULT_NUCLEI_RATE_LIMIT=150
      - NVD_API_BASE=https://services.nvd.nist.gov/rest/json/cves/2.0
      - EPSS_API_BASE=https://api.first.org/data/v1/epss
      - CVE_CACHE_TTL=3600
      - ENABLE_ASA_INTEGRATION=true
      - CHEMICAL_SENSING_URL=http://chemical_sensing_service:8009
      - AI_IMMUNE_SYSTEM_URL=http://ai_immune_system:8014
      - HOMEOSTATIC_REGULATION_URL=http://homeostatic_regulation:8015
      - METRICS_ENABLED=true
      - METRICS_PORT=9033
    depends_on:
      - chemical_sensing_service
      - ai_immune_system
    networks:
      - vertice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8033/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  web_attack_service:
    build: ./backend/services/web_attack_service
    container_name: vertice-web-attack
    ports:
      - "8034:8034"  # Service API
      - "9034:9034"  # Prometheus metrics
    volumes:
      - ./backend/services/web_attack_service:/app
      - web_attack_logs:/var/log/web_attack
    command: uvicorn api:app --host 0.0.0.0 --port 8034 --reload
    environment:
      - SERVICE_NAME=web_application_attack
      - SERVICE_PORT=8034
      - LOG_LEVEL=INFO
      # AI Configuration (Hybrid Gemini/Anthropic)
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - AI_PROVIDER=auto
      - AI_TEMPERATURE=0.7
      - AI_MAX_TOKENS=2000
      # Burp Suite
      - BURP_API_URL=http://localhost:1337
      - BURP_API_KEY=${BURP_API_KEY}
      # OWASP ZAP
      - ZAP_API_URL=http://localhost:8080
      - ZAP_API_KEY=${ZAP_API_KEY}
      # ASA Integration
      - ENABLE_ASA_INTEGRATION=true
      - PREFRONTAL_CORTEX_URL=http://prefrontal_cortex_service:8011
      - AUDITORY_CORTEX_URL=http://auditory_cortex_service:8007
      - SOMATOSENSORY_URL=http://somatosensory_service:8008
      - METRICS_ENABLED=true
      - METRICS_PORT=9034
    depends_on:
      - prefrontal_cortex_service
      - auditory_cortex_service
      - somatosensory_service
    networks:
      - vertice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8034/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # C2 Orchestration Service (Port 8035)
  c2_orchestration_service:
    build:
      context: ./backend/services/c2_orchestration_service
      dockerfile: Dockerfile
    container_name: c2_orchestration_service
    ports:
      - "8035:8035"  # API
      - "9035:9035"  # Prometheus metrics
    volumes:
      - ./backend/services/c2_orchestration_service:/app
      - c2_orchestration_logs:/var/log/c2_orchestration
      - c2_payloads:/tmp/c2_payloads
    environment:
      - SERVICE_NAME=c2_orchestration
      - SERVICE_PORT=8035
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # Cobalt Strike Team Server
      - COBALT_STRIKE_HOST=${COBALT_STRIKE_HOST:-localhost}
      - COBALT_STRIKE_PORT=${COBALT_STRIKE_PORT:-50050}
      - COBALT_STRIKE_PASSWORD=${COBALT_STRIKE_PASSWORD}
      - COBALT_STRIKE_USER=${COBALT_STRIKE_USER:-maximus_ai}
      - COBALT_STRIKE_SSL_VERIFY=false
      # Metasploit RPC
      - METASPLOIT_HOST=${METASPLOIT_HOST:-localhost}
      - METASPLOIT_PORT=${METASPLOIT_PORT:-55553}
      - METASPLOIT_USER=${METASPLOIT_USER:-msf}
      - METASPLOIT_PASSWORD=${METASPLOIT_PASSWORD}
      - METASPLOIT_SSL=true
      # ASA Integration
      - ENABLE_ASA_INTEGRATION=true
      - AUDITORY_CORTEX_URL=http://auditory_cortex_service:8007
      - SOMATOSENSORY_URL=http://somatosensory_service:8008
      - PREFRONTAL_CORTEX_URL=http://prefrontal_cortex_service:8011
      # Operational
      - MAX_CONCURRENT_BEACONS=100
      - MAX_CONCURRENT_SESSIONS=50
      # Metrics
      - METRICS_ENABLED=true
      - METRICS_PORT=9035
    depends_on:
      - auditory_cortex_service
      - somatosensory_service
      - prefrontal_cortex_service
    networks:
      - vertice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8035/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Breach & Attack Simulation Service (Port 8036)
  bas_service:
    build:
      context: ./backend/services/bas_service
      dockerfile: Dockerfile
    container_name: bas_service
    ports:
      - "8036:8036"  # API
      - "9036:9036"  # Prometheus metrics
    volumes:
      - ./backend/services/bas_service:/app
      - bas_logs:/var/log/bas
      - bas_reports:/app/data/reports
      - atomic_red_team:/app/data/atomic-red-team
    environment:
      - SERVICE_NAME=breach_attack_simulation
      - SERVICE_PORT=8036
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # Atomic Red Team
      - ATOMIC_RED_TEAM_PATH=/app/data/atomic-red-team
      - ATOMIC_AUTO_UPDATE=true
      # Execution
      - DEFAULT_TIMEOUT_SECONDS=300
      - MAX_CONCURRENT_SIMULATIONS=10
      - ENABLE_CLEANUP=true
      # Purple Team
      - ENABLE_DETECTION_VALIDATION=true
      - DETECTION_TIMEOUT_SECONDS=60
      # SIEM Integration (opcional - configurar via .env)
      - SPLUNK_URL=${SPLUNK_URL:-}
      - SPLUNK_TOKEN=${SPLUNK_TOKEN:-}
      - ELASTIC_URL=${ELASTIC_URL:-}
      - ELASTIC_API_KEY=${ELASTIC_API_KEY:-}
      # ASA Integration
      - ENABLE_ASA_INTEGRATION=true
      - SOMATOSENSORY_URL=http://somatosensory_service:8008
      - PREFRONTAL_CORTEX_URL=http://prefrontal_cortex_service:8011
      - AI_IMMUNE_SYSTEM_URL=http://ai_immune_system:8014
      # Remote Execution
      - ENABLE_REMOTE_EXECUTION=true
      - SSH_DEFAULT_USER=${BAS_SSH_USER:-bas_runner}
      - ENABLE_WINRM=true
      - WINRM_DEFAULT_USER=${BAS_WINRM_USER:-bas_runner}
      # Safety
      - MAX_IMPACT_TECHNIQUES_PER_CAMPAIGN=5
      - REQUIRE_APPROVAL_FOR_IMPACT=true
      # Metrics
      - METRICS_ENABLED=true
      - METRICS_PORT=9036
    depends_on:
      - somatosensory_service
      - prefrontal_cortex_service
      - ai_immune_system
    networks:
      - vertice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8036/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Offensive Security Gateway (Port 8037)
  offensive_gateway:
    build:
      context: ./backend/services/offensive_gateway
      dockerfile: Dockerfile
    container_name: offensive_gateway
    ports:
      - "8037:8037"  # API
      - "9037:9037"  # Prometheus metrics
    volumes:
      - ./backend/services/offensive_gateway:/app
      - gateway_logs:/var/log/offensive_gateway
    environment:
      - SERVICE_NAME=offensive_gateway
      - SERVICE_PORT=8037
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # Backend Services
      - NETWORK_RECON_URL=http://network_recon_service:8032
      - VULN_INTEL_URL=http://vuln_intel_service:8033
      - WEB_ATTACK_URL=http://web_attack_service:8034
      - C2_ORCHESTRATION_URL=http://c2_orchestration_service:8035
      - BAS_URL=http://bas_service:8036
      # Workflows
      - MAX_CONCURRENT_WORKFLOWS=20
      - WORKFLOW_TIMEOUT_SECONDS=3600
      - ENABLE_WORKFLOW_PERSISTENCE=true
      # Attack Chains
      - MAX_CONCURRENT_CHAINS=5
      - CHAIN_TIMEOUT_SECONDS=7200
      - AUTO_CLEANUP_CHAINS=true
      # RBAC
      - ENABLE_RBAC=true
      - REQUIRE_API_KEY=true
      - API_KEY_HEADER=X-API-Key
      # Rate Limiting
      - ENABLE_RATE_LIMITING=true
      - DEFAULT_RATE_LIMIT=60
      # Safety
      - ENABLE_SAFETY_CHECKS=true
      - REQUIRE_APPROVAL_HIGH_IMPACT=true
      - MAX_SIMULTANEOUS_EXPLOITS=10
      # Audit
      - ENABLE_AUDIT_LOG=true
      # Metrics
      - METRICS_ENABLED=true
      - METRICS_PORT=9037
      # ASA
      - ENABLE_ASA_INTEGRATION=true
      - PREFRONTAL_CORTEX_URL=http://prefrontal_cortex_service:8011
    depends_on:
      - network_recon_service
      - vuln_intel_service
      - web_attack_service
      - c2_orchestration_service
      - bas_service
      - prefrontal_cortex_service
    networks:
      - vertice-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8037/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# ============================
# NETWORKS
# ============================
networks:
  vertice-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================
# VOLUMES
# ============================
volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  osint-data:
    driver: local
  maximus-models:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  # HCL volumes
  hcl_postgres_data:
    driver: local
  hcl_kafka_data:
    driver: local
  hcl_analyzer_models:
    driver: local
  hcl_planner_models:
    driver: local
  # Neuromorphic volumes
  rte_models:
    driver: local
  rte_quarantine:
    driver: local
  hpc_models:
    driver: local
  # MAXIMUS Advanced volumes
  eureka_reports:
    driver: local
  eureka_playbooks:
    driver: local
  oraculo_sessions:
    driver: local
  # Vector DB
  qdrant-data:
    driver: local
  # Offensive Security Arsenal
  network_recon_logs:
    driver: local
  network_recon_data:
    driver: local
  nuclei_templates:
    driver: local
  vuln_intel_logs:
    driver: local
  vuln_intel_data:
    driver: local
  web_attack_logs:
    driver: local
  c2_orchestration_logs:
    driver: local
  c2_payloads:
    driver: local
  bas_logs:
    driver: local
  bas_reports:
    driver: local
  atomic_red_team:
    driver: local
  gateway_logs:
    driver: local
  # Sandbox (optional)
  # cuckoo-data:
  #   driver: local
