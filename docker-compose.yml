# /home/juan/vertice-dev/docker-compose.yml

services:
  # ============================
  # API GATEWAY
  # ============================
  api_gateway:
    build:
      context: ./backend
      dockerfile: services/api_gateway/Dockerfile
    container_name: vertice-api-gateway
    ports:
      - "8000:8000"
    environment:
      - SINESP_SERVICE_URL=http://sinesp_service:80
      - CYBER_SERVICE_URL=http://cyber_service:80
      - DOMAIN_SERVICE_URL=http://domain_service:8014
      - IP_INTELLIGENCE_SERVICE_URL=http://ip_intelligence_service:8034
      - NETWORK_MONITOR_SERVICE_URL=http://network_monitor_service:8120
      - NMAP_SERVICE_URL=http://nmap_service:80
      - OSINT_SERVICE_URL=http://osint-service:8007
      - GOOGLE_OSINT_SERVICE_URL=http://google_osint_service:8016
      - MAXIMUS_PREDICT_URL=http://maximus_predict:80
      - ATLAS_SERVICE_URL=http://atlas_service:8000
      - AUTH_SERVICE_URL=http://auth_service:80
      - VULN_SCANNER_SERVICE_URL=http://vuln_scanner_service:80
      - SOCIAL_ENG_SERVICE_URL=http://social_eng_service:80
      - THREAT_INTEL_SERVICE_URL=http://threat_intel_service:8013
      - MALWARE_ANALYSIS_SERVICE_URL=http://malware_analysis_service:8014
      - SSL_MONITOR_SERVICE_URL=http://ssl_monitor_service:8015
      - MAXIMUS_ORCHESTRATOR_URL=http://maximus_orchestrator_service:8125
      - MAXIMUS_CORE_SERVICE_URL=http://maximus_core_service:8100
      - MAXIMUS_EUREKA_URL=http://maximus_eureka:8200
      - MAXIMUS_ORACULO_URL=http://maximus_oraculo:8201
      - ETHICAL_AUDIT_SERVICE_URL=http://ethical_audit_service:8612
      - IMMUNIS_API_URL=http://immunis_api_service:8300
      - HCL_ANALYZER_URL=http://hcl_analyzer_service:8426
      - HCL_EXECUTOR_URL=http://hcl_executor_service:8432
      - HCL_KB_URL=http://hcl_kb_service:8420
      - HCL_MONITOR_URL=http://hcl_monitor_service:8423
      - HCL_PLANNER_URL=http://hcl_planner_service:8429
      - VISUAL_CORTEX_URL=http://visual_cortex_service:8206
      - AUDITORY_CORTEX_URL=http://auditory_cortex_service:8207
      - SOMATOSENSORY_URL=http://somatosensory_service:8208
      - CHEMICAL_SENSING_URL=http://chemical_sensing_service:8209
      - VESTIBULAR_URL=http://vestibular_service:8210
      - PREFRONTAL_CORTEX_URL=http://prefrontal_cortex_service:8211
      - DIGITAL_THALAMUS_URL=http://digital_thalamus_service:8212
      - NARRATIVE_FILTER_URL=http://narrative_manipulation_filter:8213
      - AI_IMMUNE_SYSTEM_URL=http://ai_immune_system:8214
      - HOMEOSTATIC_REGULATION_URL=http://homeostatic_regulation:8215
      - NETWORK_RECON_URL=http://network_recon_service:8532
      - VULN_INTEL_URL=http://vuln_intel_service:8533
      - WEB_ATTACK_URL=http://web_attack_service:8534
      - C2_ORCHESTRATION_URL=http://c2_orchestration_service:8535
      - BAS_URL=http://bas_service:8536
      - OFFENSIVE_GATEWAY_URL=http://offensive_gateway:8537
      # FASE 8: Enhanced Cognition
      - NARRATIVE_ANALYSIS_URL=http://narrative_analysis_service:8015
      - PREDICTIVE_THREAT_HUNTING_URL=http://predictive_threat_hunting_service:8016
      - AUTONOMOUS_INVESTIGATION_URL=http://autonomous_investigation_service:8017
      # FASE 9: Immune Enhancement
      - IMMUNIS_TREG_URL=http://immunis_treg_service:8018
      - MEMORY_CONSOLIDATION_URL=http://memory_consolidation_service:8019
      - ADAPTIVE_IMMUNITY_URL=http://adaptive_immunity_service:8020
    depends_on:
      - redis
      - sinesp_service
      - cyber_service
      - domain_service
      - ip_intelligence_service
      - network_monitor_service
      - nmap_service
      - osint-service
      - maximus_predict
      - auth_service
      - atlas_service # <-- ADICIONADO
      - vuln_scanner_service
      - social_eng_service
      - threat_intel_service
      - malware_analysis_service
      - ssl_monitor_service
      - maximus_orchestrator_service
    networks:
      - maximus-network
    restart: unless-stopped

  # ============================
  # OFFENSIVE TOOLS SERVICE
  # ============================
  offensive_tools_service:
    build:
      context: ./backend
      dockerfile: services/offensive_tools_service/Dockerfile
    container_name: vertice-offensive-tools
    ports:
      - "8010:8010"
    environment:
      - PORT=8010
      - LOG_LEVEL=info
      - CORS_ORIGINS=*
    volumes:
      - ./backend/security:/app/security:ro
    networks:
      - maximus-network
    restart: unless-stopped
  # ============================
  # REDIS CACHE
  # ============================
  redis:
    image: "redis:alpine"
    container_name: vertice-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - maximus-network
    restart: unless-stopped

  # ============================
  # POSTGRESQL DATABASE
  # ============================
  postgres:
    image: "postgres:15-alpine"
    container_name: vertice-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=aurora
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - maximus-network
    restart: unless-stopped

  # ============================
  # QDRANT VECTOR DB
  # ============================
  qdrant:
    image: qdrant/qdrant:latest
    container_name: vertice-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant-data:/qdrant/storage
    networks:
      - maximus-network
    restart: unless-stopped

  # ============================
  # CUCKOO SANDBOX (optional)
  # ============================
  # cuckoo:
  #   image: blacktop/cuckoo:latest
  #   container_name: vertice-cuckoo
  #   ports:
  #     - "8090:8090"
  #   volumes:
  #     - cuckoo-data:/cuckoo
  #   networks:
  #     - maximus-network
  #   restart: unless-stopped
  #   privileged: true

  # ... (todos os outros serviÃ§os permanecem iguais) ...
  
  sinesp_service:
    build: ./backend/services/sinesp_service
    container_name: vertice-sinesp
    ports:
      - "8102:80"
    volumes:
      - ./backend/services/sinesp_service:/code
    networks:
      - maximus-network
    restart: unless-stopped

  cyber_service:
    build: ./backend/services/cyber_service
    container_name: vertice-cyber
    volumes:
      - ./backend/services/cyber_service:/app
      - /var/log:/var/log:ro
      - /etc:/etc:ro
    privileged: true
    ports:
      - "8103:80"
    networks:
      - maximus-network
    restart: unless-stopped

  domain_service:
    build: ./backend/services/domain_service
    container_name: vertice-domain
    volumes:
      - ./backend/services/domain_service:/app
    ports:
      - "8104:80"
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 45s
      timeout: 15s
      retries: 5
      start_period: 60s

  ip_intelligence_service:
    build: ./backend/services/ip_intelligence_service
    container_name: vertice-ip-intel
    volumes:
      - ./backend/services/ip_intelligence_service:/app
    ports:
      - "8105:8034"
    environment:
      - CACHE_TTL_SECONDS=86400
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8034/health"]
      interval: 45s
      timeout: 15s
      retries: 5
      start_period: 60s

  network_monitor_service:
    build: ./backend/services/network_monitor_service
    container_name: maximus-network-monitor
    volumes:
      - ./backend/services/network_monitor_service:/app
    ports:
      - "8120:80"
    cap_add:
      - NET_ADMIN
      - NET_RAW
    networks:
      - maximus-network
    restart: unless-stopped

  nmap_service:
    build: ./backend/services/nmap_service
    container_name: vertice-nmap
    volumes:
      - ./backend/services/nmap_service:/app
    ports:
      - "8106:80"
    cap_add:
      - NET_ADMIN
      - NET_RAW
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 45s
      timeout: 15s
      retries: 5
      start_period: 60s

  osint-service:
    build: ./backend/services/osint_service
    container_name: vertice-osint
    ports:
      - "8036:8007"
    environment:
      - REDIS_HOST=redis
      - MAXIMUS_HOST=maximus_predict
      - PYTHONUNBUFFERED=1
      - CHROME_BIN=/usr/bin/chromium
      - CHROMEDRIVER_PATH=/usr/bin/chromedriver
    depends_on:
      - redis
      - maximus_predict
    volumes:
      - ./backend/services/osint_service:/app
      - osint-data:/app/data
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 45s
      timeout: 15s
      retries: 5
      start_period: 60s

  maximus_predict:
    build: ./backend/services/maximus_predict
    container_name: maximus-predict
    volumes:
      - ./backend/services/maximus_predict:/code
      - maximus-models:/models
    ports:
      - "8126:80"
    environment:
      - MODEL_PATH=/models
      - PYTHONUNBUFFERED=1
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 45s
      timeout: 15s
      retries: 5
      start_period: 60s

  # ============================
  # ATLAS SERVICE (NOVO)
  # ============================
  atlas_service:
    build: ./backend/services/atlas_service
    container_name: vertice-atlas
    volumes:
      - ./backend/services/atlas_service:/app
    ports:
      - "8109:8000" # Expondo numa porta externa livre
    networks:
      - maximus-network
    restart: unless-stopped

  # ============================
  # AUTH SERVICE
  # ============================
  auth_service:
    build: ./backend/services/auth_service
    container_name: vertice-auth
    volumes:
      - ./backend/services/auth_service:/app
    ports:
      - "8110:80"
    environment:
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - JWT_SECRET=${JWT_SECRET:-vertice-super-secret-key-2024}
      - REDIS_URL=redis://redis:6379
      - AUTHORIZED_DOMAINS=${AUTHORIZED_DOMAINS:-}
      - AUTHORIZED_EMAILS=${AUTHORIZED_EMAILS:-}
      - ADMIN_EMAILS=${ADMIN_EMAILS:-}
    depends_on:
      - redis
    networks:
      - maximus-network
    restart: unless-stopped

  # ============================
  # VULNERABILITY SCANNER SERVICE
  # ============================
  vuln_scanner_service:
    build: ./backend/services/vuln_scanner_service
    container_name: vertice-vuln-scanner
    volumes:
      - ./backend/services/vuln_scanner_service:/app
    ports:
      - "8111:80"
    cap_add:
      - NET_ADMIN
      - NET_RAW
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 45s
      timeout: 15s
      retries: 5
      start_period: 60s

  # ============================
  # SOCIAL ENGINEERING SERVICE
  # ============================
  social_eng_service:
    build: ./backend/services/social_eng_service
    container_name: vertice-social-eng
    volumes:
      - ./backend/services/social_eng_service:/app
    ports:
      - "8112:80"
    networks:
      - maximus-network
    restart: unless-stopped

  # ... (Prometheus e Grafana permanecem iguais) ...

  prometheus:
    image: prom/prometheus:latest
    container_name: vertice-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - maximus-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: vertice-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=vertice2024
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - maximus-network
    restart: unless-stopped

  # ============================
  # NSA-GRADE AURORA AI SERVICES
  # ============================

  threat_intel_service:
    build: ./backend/services/threat_intel_service
    container_name: vertice-threat-intel
    ports:
      - "8113:8013"
    volumes:
      - ./backend/services/threat_intel_service:/app
    environment:
      - ABUSEIPDB_API_KEY=${ABUSEIPDB_API_KEY}
      - VIRUSTOTAL_API_KEY=${VIRUSTOTAL_API_KEY}
      - GREYNOISE_API_KEY=${GREYNOISE_API_KEY}
      - OTX_API_KEY=${OTX_API_KEY}
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8013/health"]
      interval: 45s
      timeout: 15s
      retries: 5
      start_period: 60s

  malware_analysis_service:
    build: ./backend/services/malware_analysis_service
    container_name: vertice-malware-analysis
    ports:
      - "8114:8014"
    volumes:
      - ./backend/services/malware_analysis_service:/app
    environment:
      - VIRUSTOTAL_API_KEY=${VIRUSTOTAL_API_KEY}
      - HYBRID_ANALYSIS_API_KEY=${HYBRID_ANALYSIS_API_KEY}
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8014/health"]
      interval: 45s
      timeout: 15s
      retries: 5
      start_period: 60s

  ssl_monitor_service:
    build: ./backend/services/ssl_monitor_service
    container_name: vertice-ssl-monitor
    ports:
      - "8115:8015"
    volumes:
      - ./backend/services/ssl_monitor_service:/app
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8015/health"]
      interval: 45s
      timeout: 15s
      retries: 5
      start_period: 60s

  # ============================
  # ADR CORE SERVICE
  # ============================
  adr_core_service:
    build: ./backend/services/adr_core_service
    container_name: vertice-adr-core
    ports:
      - "8130:8030"
    volumes:
      - ./backend/services/adr_core_service:/app
    networks:
      - maximus-network
    restart: unless-stopped

  # ============================
  # MAXIMUS INTEGRATION SERVICE - API GATEWAY FOR AI
  # ============================
  maximus_integration_service:
    build: ./backend/services/maximus_integration_service
    container_name: maximus-integration
    ports:
      - "8127:8099"
    volumes:
      - ./backend/services/maximus_integration_service:/app
      - ./backend/services/maximus_oraculo:/app/maximus_oraculo
      - ./backend/services/maximus_eureka:/app/maximus_eureka
    environment:
      - ORACULO_TARGET_PATH=/app/maximus_oraculo
      - EUREKA_SCAN_PATH=/tmp/malware_samples
      - ADR_CORE_URL=http://adr_core_service:8130
      - MAXIMUS_CORE_URL=http://maximus_core_service:8150
    depends_on:
      - adr_core_service
      - maximus_core_service
    networks:
      - maximus-network
    restart: unless-stopped

  maximus_orchestrator_service:
    build: ./backend/services/maximus_orchestrator_service
    container_name: maximus-orchestrator
    ports:
      - "8125:8016"
    volumes:
      - ./backend/services/maximus_orchestrator_service:/app
    environment:
      - IP_INTEL_SERVICE_URL=http://ip_intelligence_service:8034
      - THREAT_INTEL_SERVICE_URL=http://threat_intel_service:8013
      - MALWARE_ANALYSIS_SERVICE_URL=http://malware_analysis_service:8014
      - SSL_MONITOR_SERVICE_URL=http://ssl_monitor_service:8015
      - NMAP_SERVICE_URL=http://nmap_service:80
      - VULN_SCANNER_SERVICE_URL=http://vuln_scanner_service:80
      - SOCIAL_ENG_SERVICE_URL=http://social_eng_service:80
      - DOMAIN_SERVICE_URL=http://domain_service:80
    depends_on:
      - threat_intel_service
      - malware_analysis_service
      - ssl_monitor_service
      - ip_intelligence_service
      - nmap_service
    networks:
      - maximus-network
    restart: unless-stopped

  # ============================
  # MAXIMUS CORE SERVICE - THE BRAIN ð§ 
  # ============================
  maximus_core_service:
    build: ./backend/services/maximus_core_service
    container_name: maximus-core
    ports:
      - "8150:8150"  # Fixed: Server runs on 8150 internally
      - "8151:8001"  # Prometheus metrics
    volumes:
      - ./backend/services/maximus_core_service:/app
    environment:
      - LLM_PROVIDER=${LLM_PROVIDER:-gemini}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_URL=redis://redis:6379
      - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/aurora
      - THREAT_INTEL_SERVICE_URL=http://threat_intel_service:8013
      - MALWARE_ANALYSIS_SERVICE_URL=http://malware_analysis_service:8014
      - SSL_MONITOR_SERVICE_URL=http://ssl_monitor_service:8015
      - IP_INTEL_SERVICE_URL=http://ip_intelligence_service:8034
      - NMAP_SERVICE_URL=http://nmap_service:80
      - VULN_SCANNER_SERVICE_URL=http://vuln_scanner_service:80
      - DOMAIN_SERVICE_URL=http://domain_service:80
      - MAXIMUS_PREDICT_URL=http://maximus_predict:80
      - OSINT_SERVICE_URL=http://osint-service:8100
    depends_on:
      - redis
      - postgres
      - threat_intel_service
      - malware_analysis_service
      - ssl_monitor_service
      - ip_intelligence_service
      - nmap_service
      - vuln_scanner_service
      - domain_service
      - maximus_predict
      - osint-service
    networks:
      - maximus-network
    restart: unless-stopped

  # ============================================================================
  # ETHICAL AI SERVICES - Audit & Compliance
  # ============================================================================

  ethical_audit_service:
    build: ./backend/services/ethical_audit_service
    container_name: ethical-audit
    ports:
      - "8612:8612"
    volumes:
      - ./backend/services/ethical_audit_service:/app
    environment:
      - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/aurora
    depends_on:
      - postgres
    networks:
      - maximus-network
    restart: unless-stopped
  # ============================================================================
  # HCL SERVICES - Homeostatic Control Loop (Production Ready)
  # ============================================================================

  # TimescaleDB for HCL knowledge base
  hcl-postgres:
    image: timescale/timescaledb:latest-pg15
    container_name: hcl-postgres
    environment:
      POSTGRES_DB: hcl_knowledge
      POSTGRES_USER: hcl_user
      POSTGRES_PASSWORD: hcl_password
    ports:
      - "5433:5432"
    volumes:
      - hcl_postgres_data:/var/lib/postgresql/data
      - ./backend/services/hcl_kb_service/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hcl_user -d hcl_knowledge"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - maximus-network
    restart: unless-stopped

  # Kafka for HCL event streaming
  hcl-kafka:
    image: apache/kafka:latest
    container_name: hcl-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://hcl-kafka:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@hcl-kafka:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      CLUSTER_ID: VerticeHCLCluster123456
    volumes:
      - hcl_kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "/opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server localhost:9092 || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 20s
    networks:
      - maximus-network
    restart: unless-stopped

  # HCL Knowledge Base API
  hcl-kb-service:
    build:
      context: ./backend/services/hcl_kb_service
      dockerfile: Dockerfile
    container_name: hcl-kb-service
    ports:
      - "8421:8000"
    environment:
      SERVICE_NAME: hcl_kb
      DATABASE_URL: postgresql+asyncpg://hcl_user:hcl_password@hcl-postgres/hcl_knowledge
      LOG_LEVEL: INFO
    depends_on:
      hcl-postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - maximus-network
    restart: unless-stopped

  # HCL Monitor (System metrics collection)
  hcl-monitor:
    build:
      context: ./backend/services/hcl_monitor_service
      dockerfile: Dockerfile
    container_name: hcl-monitor
    ports:
      - "8424:8001"
    environment:
      SERVICE_NAME: hcl_monitor
      KB_API_URL: http://hcl-kb-service:8000
      KAFKA_BROKERS: hcl-kafka:9092
      COLLECTION_INTERVAL: 15
      LOG_LEVEL: INFO
    depends_on:
      hcl-kafka:
        condition: service_healthy
      hcl-kb-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8001/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - maximus-network
    restart: unless-stopped
    privileged: true
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro

  # HCL Analyzer (ML predictions)
  hcl-analyzer:
    build:
      context: ./backend/services/hcl_analyzer_service
      dockerfile: Dockerfile
    container_name: hcl-analyzer
    ports:
      - "8427:8002"
    environment:
      SERVICE_NAME: hcl_analyzer
      KB_API_URL: http://hcl-kb-service:8000
      KAFKA_BROKERS: hcl-kafka:9092
      MODEL_DIR: /app/models
      LOG_LEVEL: INFO
    depends_on:
      hcl-kafka:
        condition: service_healthy
      hcl-kb-service:
        condition: service_healthy
    volumes:
      - hcl_analyzer_models:/app/models
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8002/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - maximus-network
    restart: unless-stopped

  # HCL Planner (Fuzzy Logic + RL)
  hcl-planner:
    build:
      context: ./backend/services/hcl_planner_service
      dockerfile: Dockerfile
    container_name: hcl-planner
    ports:
      - "8430:8003"
    environment:
      SERVICE_NAME: hcl_planner
      KB_API_URL: http://hcl-kb-service:8000
      KAFKA_BROKERS: hcl-kafka:9092
      MODEL_DIR: /app/models
      LOG_LEVEL: INFO
    depends_on:
      hcl-kafka:
        condition: service_healthy
      hcl-kb-service:
        condition: service_healthy
      hcl-analyzer:
        condition: service_healthy
    volumes:
      - hcl_planner_models:/app/models
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8003/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - maximus-network
    restart: unless-stopped

  # HCL Executor (Kubernetes actions)
  hcl-executor:
    build:
      context: ./backend/services/hcl_executor_service
      dockerfile: Dockerfile
    container_name: hcl-executor
    ports:
      - "8433:8004"
    environment:
      SERVICE_NAME: hcl_executor
      KB_API_URL: http://hcl-kb-service:8000
      KAFKA_BROKERS: hcl-kafka:9092
      K8S_NAMESPACE: default
      IN_CLUSTER: "false"
      DRY_RUN: "true"
      ENABLE_ROLLBACK: "true"
      LOG_LEVEL: INFO
    depends_on:
      hcl-kafka:
        condition: service_healthy
      hcl-kb-service:
        condition: service_healthy
      hcl-planner:
        condition: service_healthy
    volumes:
      - ${HOME}/.kube:/home/vertice/.kube:ro
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8004/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - maximus-network
    restart: unless-stopped

  # ============================================================================
  # NEUROMORPHIC SERVICES - RTE + hPC (Production Ready)
  # ============================================================================

  # RTE - Reflex Triage Engine (<50ms threat detection)
  rte-service:
    build:
      context: ./backend/services/rte_service
      dockerfile: Dockerfile
    container_name: rte-service
    ports:
      - "8606:8005"
    environment:
      RTE_HOST: 0.0.0.0
      RTE_PORT: 8005
      LOG_LEVEL: INFO
    volumes:
      - rte_models:/app/models
      - rte_quarantine:/var/quarantine
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - maximus-network
    restart: unless-stopped

  # hPC - Hierarchical Predictive Coding (Bayesian inference)

  # ============================================================================
  # MAXIMUS ADVANCED SERVICES - Eureka + OrÃ¡culo (Production Ready)
  # ============================================================================

  # MAXIMUS EUREKA - Deep Malware Analysis
  maximus-eureka:
    build:
      context: ./backend
      dockerfile: services/maximus_eureka/Dockerfile
    container_name: maximus-eureka
    ports:
      - "8153:8036"  # Fixed: Dockerfile uses 8036, not 8200
    environment:
      SERVICE_NAME: maximus_eureka
      LOG_LEVEL: INFO
      PYTHONPATH: "/app:/app/backend"
    volumes:
      - eureka_reports:/app/reports
      - eureka_playbooks:/app/playbooks
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8036/health"]  # Fixed: Use correct port
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - maximus-network
    restart: unless-stopped

  # MAXIMUS ORÃCULO - Self-Improvement Engine
  maximus-oraculo:
    build:
      context: ./backend/services/maximus_oraculo
      dockerfile: Dockerfile
    container_name: maximus-oraculo
    ports:
      - "8152:8201"
    environment:
      SERVICE_NAME: maximus_oraculo
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      LOG_LEVEL: INFO
    volumes:
      - ../:/workspace:ro
      - ${HOME}/.gitconfig:/home/vertice/.gitconfig:ro
      - oraculo_sessions:/app/sessions
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8201/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - maximus-network
    restart: unless-stopped

  # ============================
  # OSINT DASHBOARD - MISSING SERVICES
  # ============================

  google_osint_service:
    build: ./backend/services/google_osint_service
    container_name: vertice-google-osint
    ports:
      - "8101:8031"
    volumes:
      - ./backend/services/google_osint_service:/app
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8031/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    environment:
      - REDIS_URL=redis://redis:6379/3
      - PYTHONPATH=/app:/app/backend
    depends_on:
      - redis
    networks:
      - maximus-network
    restart: unless-stopped

  # ============================
  # CYBER DASHBOARD - MISSING SERVICES
  # ============================
  # IMMUNIS SYSTEM (8 SERVICES)
  # ============================

  immunis_api_service:
    build: ./backend/services/immunis_api_service
    container_name: vertice-immunis-api
    ports:
      - "8300:8005"
    volumes:
      - ./backend/services/immunis_api_service:/app
    environment:
      - MACROPHAGE_URL=http://immunis_macrophage_service:8312
      - NEUTROPHIL_URL=http://immunis_neutrophil_service:8313
      - DENDRITIC_URL=http://immunis_dendritic_service:8314
      - BCELL_URL=http://immunis_bcell_service:8316
    depends_on:
      - immunis_macrophage_service
      - immunis_neutrophil_service
      - immunis_dendritic_service
      - immunis_bcell_service
    networks:
      - maximus-network
    restart: unless-stopped

  immunis_macrophage_service:
    build: ./backend/services/immunis_macrophage_service
    container_name: vertice-immunis-macrophage
    ports:
      - "8312:8012"
    volumes:
      - ./backend/services/immunis_macrophage_service:/app
    environment:
      - CUCKOO_API_URL=${CUCKOO_API_URL:-http://cuckoo:8090}
      - CUCKOO_API_KEY=${CUCKOO_API_KEY:-}
      - KAFKA_BOOTSTRAP_SERVERS=hcl-kafka:9092
    networks:
      - maximus-network
    restart: unless-stopped

  immunis_neutrophil_service:
    build: ./backend/services/immunis_neutrophil_service
    container_name: vertice-immunis-neutrophil
    ports:
      - "8313:8013"
    volumes:
      - ./backend/services/immunis_neutrophil_service:/app
    networks:
      - maximus-network
    restart: unless-stopped

  immunis_dendritic_service:
    build: ./backend/services/immunis_dendritic_service
    container_name: vertice-immunis-dendritic
    ports:
      - "8314:8014"
    volumes:
      - ./backend/services/immunis_dendritic_service:/app
    networks:
      - maximus-network
    restart: unless-stopped

  immunis_bcell_service:
    build: ./backend/services/immunis_bcell_service
    container_name: vertice-immunis-bcell
    ports:
      - "8316:8016"
    volumes:
      - ./backend/services/immunis_bcell_service:/app
    networks:
      - maximus-network
    restart: unless-stopped

  immunis_helper_t_service:
    build: ./backend/services/immunis_helper_t_service
    container_name: vertice-immunis-helper-t
    ports:
      - "8317:8017"
    volumes:
      - ./backend/services/immunis_helper_t_service:/app
    networks:
      - maximus-network
    restart: unless-stopped

  immunis_cytotoxic_t_service:
    build: ./backend/services/immunis_cytotoxic_t_service
    container_name: vertice-immunis-cytotoxic-t
    ports:
      - "8318:8018"
    volumes:
      - ./backend/services/immunis_cytotoxic_t_service:/app
    networks:
      - maximus-network
    restart: unless-stopped

  immunis_nk_cell_service:
    build: ./backend/services/immunis_nk_cell_service
    container_name: vertice-immunis-nk-cell
    ports:
      - "8319:8019"
    volumes:
      - ./backend/services/immunis_nk_cell_service:/app
    networks:
      - maximus-network
    restart: unless-stopped

  # ============================
  # HCL (HOLOCRON) SYSTEM (5 SERVICES)
  # ============================

  hcl_analyzer_service:
    build: ./backend/services/hcl_analyzer_service
    container_name: vertice-hcl-analyzer
    ports:
      - "8426:8020"
    volumes:
      - ./backend/services/hcl_analyzer_service:/app
      - hcl_analyzer_models:/models
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8020/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    environment:
      - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/aurora
    depends_on:
      - postgres
    networks:
      - maximus-network
    restart: unless-stopped

  hcl_executor_service:
    build: ./backend/services/hcl_executor_service
    container_name: vertice-hcl-executor
    ports:
      - "8432:8021"
    volumes:
      - ./backend/services/hcl_executor_service:/app
    environment:
      - KUBERNETES_SERVICE_HOST=${KUBERNETES_SERVICE_HOST:-}
      - KUBERNETES_SERVICE_PORT=${KUBERNETES_SERVICE_PORT:-}
      - PYTHONPATH=/app:/app/backend
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8021/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  hcl_kb_service:
    build: ./backend/services/hcl_kb_service
    container_name: vertice-hcl-kb
    ports:
      - "8420:8022"
    volumes:
      - ./backend/services/hcl_kb_service:/app
    environment:
      - QDRANT_URL=http://qdrant:6333
      - POSTGRES_URL=postgresql://postgres:postgres@postgres:5432/aurora
    depends_on:
      - qdrant
      - postgres
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8022/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  hcl_monitor_service:
    build: ./backend/services/hcl_monitor_service
    container_name: vertice-hcl-monitor
    ports:
      - "8423:8023"
    volumes:
      - ./backend/services/hcl_monitor_service:/app
    environment:
      - PROMETHEUS_URL=http://prometheus:9090
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8023/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  hcl_planner_service:
    build: ./backend/services/hcl_planner_service
    container_name: vertice-hcl-planner
    ports:
      - "8429:8024"
    volumes:
      - ./backend/services/hcl_planner_service:/app
      - hcl_planner_models:/models
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8024/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # ============================
  # AUTONOMIC SAFETY ARCHITECTURE (Maximus AI 3.0)
  # Sensory Layer (5) + Executive Control (5)
  # ============================

  auditory_cortex_service:
    build: ./backend/services/auditory_cortex_service
    container_name: vertice-auditory-cortex
    ports:
      - "8207:8007"
    volumes:
      - ./backend/services/auditory_cortex_service:/app
    networks:
      - maximus-network
    restart: unless-stopped

  visual_cortex_service:
    build: ./backend/services/visual_cortex_service
    container_name: vertice-visual-cortex
    ports:
      - "8206:8006"
    volumes:
      - ./backend/services/visual_cortex_service:/app
    networks:
      - maximus-network
    restart: unless-stopped

  somatosensory_service:
    build: ./backend/services/somatosensory_service
    container_name: vertice-somatosensory
    ports:
      - "8208:8008"
    volumes:
      - ./backend/services/somatosensory_service:/app
    networks:
      - maximus-network
    restart: unless-stopped

  chemical_sensing_service:
    build: ./backend/services/chemical_sensing_service
    container_name: vertice-chemical-sensing
    ports:
      - "8209:8009"
    volumes:
      - ./backend/services/chemical_sensing_service:/app
    networks:
      - maximus-network
    restart: unless-stopped

  vestibular_service:
    build: ./backend/services/vestibular_service
    container_name: vertice-vestibular
    ports:
      - "8210:8010"
    volumes:
      - ./backend/services/vestibular_service:/app
    networks:
      - maximus-network
    restart: unless-stopped

  prefrontal_cortex_service:
    build: ./backend/services/prefrontal_cortex_service
    container_name: vertice-prefrontal-cortex
    ports:
      - "8211:8011"
    volumes:
      - ./backend/services/prefrontal_cortex_service:/app
    environment:
      - VISUAL_CORTEX_URL=http://visual_cortex_service:8206
      - AUDITORY_CORTEX_URL=http://auditory_cortex_service:8207
      - SOMATOSENSORY_URL=http://somatosensory_service:8208
      - CHEMICAL_SENSING_URL=http://chemical_sensing_service:8209
      - VESTIBULAR_URL=http://vestibular_service:8210
    depends_on:
      - visual_cortex_service
      - auditory_cortex_service
      - somatosensory_service
      - chemical_sensing_service
      - vestibular_service
    networks:
      - maximus-network
    restart: unless-stopped

  digital_thalamus_service:
    build: ./backend/services/digital_thalamus_service
    container_name: vertice-digital-thalamus
    ports:
      - "8212:8012"
    volumes:
      - ./backend/services/digital_thalamus_service:/app
    environment:
      - VISUAL_CORTEX_URL=http://visual_cortex_service:8206
      - AUDITORY_CORTEX_URL=http://auditory_cortex_service:8207
      - SOMATOSENSORY_URL=http://somatosensory_service:8208
      - CHEMICAL_SENSING_URL=http://chemical_sensing_service:8209
      - VESTIBULAR_URL=http://vestibular_service:8210
    depends_on:
      - visual_cortex_service
      - auditory_cortex_service
      - somatosensory_service
      - chemical_sensing_service
      - vestibular_service
    networks:
      - maximus-network
    restart: unless-stopped

  narrative_manipulation_filter:
    build: ./backend/services/narrative_manipulation_filter
    container_name: vertice-narrative-filter
    ports:
      - "8213:8013"
    volumes:
      - ./backend/services/narrative_manipulation_filter:/app
    networks:
      - maximus-network
    restart: unless-stopped
  ai_immune_system:
    build: ./backend/services/ai_immune_system
    container_name: vertice-ai-immune
    ports:
      - "8214:8014"
    volumes:
      - ./backend/services/ai_immune_system:/app
    environment:
      - PREFRONTAL_CORTEX_URL=http://prefrontal_cortex_service:8211
      - DIGITAL_THALAMUS_URL=http://digital_thalamus_service:8212
      - NARRATIVE_FILTER_URL=http://narrative_manipulation_filter:8213
      - VISUAL_CORTEX_URL=http://visual_cortex_service:8206
      - AUDITORY_CORTEX_URL=http://auditory_cortex_service:8207
      - SOMATOSENSORY_URL=http://somatosensory_service:8208
      - CHEMICAL_SENSING_URL=http://chemical_sensing_service:8209
      - VESTIBULAR_URL=http://vestibular_service:8210
    depends_on:
      - prefrontal_cortex_service
      - digital_thalamus_service
      - narrative_manipulation_filter
    networks:
      - maximus-network
    restart: unless-stopped

  homeostatic_regulation:
    build: ./backend/services/homeostatic_regulation
    container_name: vertice-homeostatic-regulation
    ports:
      - "8215:8015"
    volumes:
      - ./backend/services/homeostatic_regulation:/app
    environment:
      - VISUAL_CORTEX_URL=http://visual_cortex_service:8206
      - AUDITORY_CORTEX_URL=http://auditory_cortex_service:8207
      - SOMATOSENSORY_URL=http://somatosensory_service:8208
      - CHEMICAL_SENSING_URL=http://chemical_sensing_service:8209
      - VESTIBULAR_URL=http://vestibular_service:8210
      - PREFRONTAL_CORTEX_URL=http://prefrontal_cortex_service:8211
      - DIGITAL_THALAMUS_URL=http://digital_thalamus_service:8212
      - NARRATIVE_FILTER_URL=http://narrative_manipulation_filter:8213
      - AI_IMMUNE_SYSTEM_URL=http://ai_immune_system:8214
    depends_on:
      - visual_cortex_service
      - auditory_cortex_service
      - somatosensory_service
      - chemical_sensing_service
      - vestibular_service
      - prefrontal_cortex_service
      - digital_thalamus_service
      - narrative_manipulation_filter
      - ai_immune_system
    networks:
      - maximus-network
    restart: unless-stopped

  # ============================
  # INFRASTRUCTURE - MISSING
  # ============================

  rte_service:
    build: ./backend/services/rte_service
    container_name: vertice-rte
    ports:
      - "8605:8026"
    volumes:
      - ./backend/services/rte_service:/app
      - rte_models:/models
      - rte_quarantine:/quarantine
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8026/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - maximus-network
    restart: unless-stopped

  hpc_service:
    build: ./backend/services/hpc_service
    container_name: vertice-hpc
    ports:
      - "8440:8027"
    volumes:
      - ./backend/services/hpc_service:/app
      - hpc_models:/models
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8027/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - maximus-network
    restart: unless-stopped

  # ============================
  # DATA INGESTION & GRAPH SERVICES
  # ============================
  # TATACÃ INGESTION & GRAPH SERVICES
  # - tataca_ingestion: ETL pipeline para ingestÃ£o de dados criminais
  # - seriema_graph: REST API para Neo4j knowledge graph
  # ============================

  tataca_ingestion:
    build: ./backend/services/tataca_ingestion
    container_name: vertice-tataca-ingestion
    ports:
      - "8610:8028"
    volumes:
      - ./backend/services/tataca_ingestion:/app
    environment:
      # Service config
      - SERVICE_NAME=tataca_ingestion
      - LOG_LEVEL=INFO
      - HOST=0.0.0.0
      - PORT=8028
      # PostgreSQL
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=aurora
      # Neo4j via Seriema Graph
      - SERIEMA_GRAPH_URL=http://seriema_graph:8029
      # SINESP
      - SINESP_SERVICE_URL=http://sinesp_service:8018
      # Data sources
      - ENABLE_SINESP_CONNECTOR=true
      - ENABLE_PRISIONAL_CONNECTOR=false
      - ENABLE_ANTECEDENTES_CONNECTOR=false
      # Scheduler
      - ENABLE_SCHEDULER=true
      - SCHEDULER_INTERVAL_MINUTES=60
      # Job config
      - MAX_CONCURRENT_JOBS=3
      - JOB_TIMEOUT_SECONDS=300
      - RETRY_ATTEMPTS=3
      - RETRY_DELAY_SECONDS=5
      # Batch processing
      - BATCH_SIZE=100
      - ENABLE_PARALLEL_PROCESSING=true
      # CORS
      - CORS_ORIGINS=*
    depends_on:
      - postgres
      - sinesp_service
      - seriema_graph
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8028/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  seriema_graph:
    build: ./backend/services/seriema_graph
    container_name: vertice-seriema-graph
    ports:
      - "8611:8029"
    volumes:
      - ./backend/services/seriema_graph:/app
    environment:
      - NEO4J_URI=${NEO4J_URI:-bolt://neo4j:7687}
      - NEO4J_USER=${NEO4J_USER:-neo4j}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-neo4j123}
      - NEO4J_DATABASE=${NEO4J_DATABASE:-neo4j}
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8029/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - maximus-network
    restart: unless-stopped

  # ============================
  # OFFENSIVE SECURITY ARSENAL (Maximus AI 3.0)
  # Strategic Implementation: The 2025 Offensive Security Roadmap
  # ============================

  network_recon_service:
    build: ./backend/services/network_recon_service
    container_name: maximus-network-recon
    ports:
      - "8532:8032"  # Service API
      - "9032:9032"  # Prometheus metrics
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - ./backend/services/network_recon_service:/app
      - network_recon_logs:/var/log/network_recon
      - network_recon_data:/app/data
    environment:
      - SERVICE_NAME=network_reconnaissance
      - SERVICE_PORT=8032
      - LOG_LEVEL=INFO
      - DEFAULT_MASSCAN_RATE=10000
      - DEFAULT_NMAP_TIMING=3
      - MAX_SCAN_RATE=100000
      - DEFAULT_DEEP_SCAN_THRESHOLD=100
      - ENABLE_ASA_INTEGRATION=true
      - VISUAL_CORTEX_URL=http://visual_cortex_service:8206
      - AUDITORY_CORTEX_URL=http://auditory_cortex_service:8207
      - SOMATOSENSORY_URL=http://somatosensory_service:8208
      - CHEMICAL_SENSING_URL=http://chemical_sensing_service:8209
      - VESTIBULAR_URL=http://vestibular_service:8210
      - PREFRONTAL_CORTEX_URL=http://prefrontal_cortex_service:8211
      - DIGITAL_THALAMUS_URL=http://digital_thalamus_service:8212
      - NARRATIVE_FILTER_URL=http://narrative_manipulation_filter:8213
      - AI_IMMUNE_SYSTEM_URL=http://ai_immune_system:8214
      - HOMEOSTATIC_REGULATION_URL=http://homeostatic_regulation:8215
      - ASA_REQUEST_TIMEOUT=10.0
      - SCAN_TIMEOUT=3600
      - METRICS_ENABLED=true
      - METRICS_PORT=9032
    depends_on:
      - visual_cortex_service
      - digital_thalamus_service
      - homeostatic_regulation
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8032/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  vuln_intel_service:
    build: ./backend/services/vuln_intel_service
    container_name: vertice-vuln-intel
    ports:
      - "8533:8033"  # Service API
      - "9033:9033"  # Prometheus metrics
    volumes:
      - ./backend/services/vuln_intel_service:/app
      - nuclei_templates:/app/nuclei-templates
      - vuln_intel_logs:/var/log/vuln_intel
      - vuln_intel_data:/app/data
    environment:
      - SERVICE_NAME=vulnerability_intelligence
      - SERVICE_PORT=8033
      - LOG_LEVEL=INFO
      - NUCLEI_BINARY=/usr/bin/nuclei
      - NUCLEI_TEMPLATES_DIR=/app/nuclei-templates
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - AUTO_SYNC_TEMPLATES=true
      - TEMPLATE_SYNC_INTERVAL=3600
      - DEFAULT_NUCLEI_CONCURRENCY=25
      - DEFAULT_NUCLEI_RATE_LIMIT=150
      - NVD_API_BASE=https://services.nvd.nist.gov/rest/json/cves/2.0
      - EPSS_API_BASE=https://api.first.org/data/v1/epss
      - CVE_CACHE_TTL=3600
      - ENABLE_ASA_INTEGRATION=true
      - CHEMICAL_SENSING_URL=http://chemical_sensing_service:8209
      - AI_IMMUNE_SYSTEM_URL=http://ai_immune_system:8214
      - HOMEOSTATIC_REGULATION_URL=http://homeostatic_regulation:8215
      - METRICS_ENABLED=true
      - METRICS_PORT=9033
    depends_on:
      - chemical_sensing_service
      - ai_immune_system
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8033/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  web_attack_service:
    build:
      context: ./backend
      dockerfile: services/web_attack_service/Dockerfile
    container_name: vertice-web-attack
    ports:
      - "8534:8034"  # Service API
      - "9034:9034"  # Prometheus metrics
    volumes:
      - ./backend/services/web_attack_service:/app
      - web_attack_logs:/var/log/web_attack
    environment:
      - SERVICE_NAME=web_application_attack
      - SERVICE_PORT=8034
      - LOG_LEVEL=INFO
      # AI Configuration (Hybrid Gemini/Anthropic)
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - AI_PROVIDER=auto
      - AI_TEMPERATURE=0.7
      - AI_MAX_TOKENS=2000
      # Burp Suite
      - BURP_API_URL=http://localhost:1337
      - BURP_API_KEY=${BURP_API_KEY}
      # OWASP ZAP
      - ZAP_API_URL=http://localhost:8080
      - ZAP_API_KEY=${ZAP_API_KEY}
      # ASA Integration
      - ENABLE_ASA_INTEGRATION=true
      - PREFRONTAL_CORTEX_URL=http://prefrontal_cortex_service:8211
      - AUDITORY_CORTEX_URL=http://auditory_cortex_service:8207
      - SOMATOSENSORY_URL=http://somatosensory_service:8208
      - METRICS_ENABLED=true
      - METRICS_PORT=9034
    depends_on:
      - prefrontal_cortex_service
      - auditory_cortex_service
      - somatosensory_service
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8034/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # C2 Orchestration Service (Port 8035)
  c2_orchestration_service:
    build:
      context: ./backend/services/c2_orchestration_service
      dockerfile: Dockerfile
    container_name: c2_orchestration_service
    ports:
      - "8535:8035"  # API
      - "9035:9035"  # Prometheus metrics
    volumes:
      - ./backend/services/c2_orchestration_service:/app
      - c2_orchestration_logs:/var/log/c2_orchestration
      - c2_payloads:/tmp/c2_payloads
    environment:
      - SERVICE_NAME=c2_orchestration
      - SERVICE_PORT=8035
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # Cobalt Strike Team Server
      - COBALT_STRIKE_HOST=${COBALT_STRIKE_HOST:-localhost}
      - COBALT_STRIKE_PORT=${COBALT_STRIKE_PORT:-50050}
      - COBALT_STRIKE_PASSWORD=${COBALT_STRIKE_PASSWORD}
      - COBALT_STRIKE_USER=${COBALT_STRIKE_USER:-maximus_ai}
      - COBALT_STRIKE_SSL_VERIFY=false
      # Metasploit RPC
      - METASPLOIT_HOST=${METASPLOIT_HOST:-localhost}
      - METASPLOIT_PORT=${METASPLOIT_PORT:-55553}
      - METASPLOIT_USER=${METASPLOIT_USER:-msf}
      - METASPLOIT_PASSWORD=${METASPLOIT_PASSWORD}
      - METASPLOIT_SSL=true
      # ASA Integration
      - ENABLE_ASA_INTEGRATION=true
      - AUDITORY_CORTEX_URL=http://auditory_cortex_service:8207
      - SOMATOSENSORY_URL=http://somatosensory_service:8208
      - PREFRONTAL_CORTEX_URL=http://prefrontal_cortex_service:8211
      # Operational
      - MAX_CONCURRENT_BEACONS=100
      - MAX_CONCURRENT_SESSIONS=50
      # Metrics
      - METRICS_ENABLED=true
      - METRICS_PORT=9035
    depends_on:
      - auditory_cortex_service
      - somatosensory_service
      - prefrontal_cortex_service
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8035/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Breach & Attack Simulation Service (Port 8036)
  bas_service:
    build:
      context: ./backend/services/bas_service
      dockerfile: Dockerfile
    container_name: bas_service
    ports:
      - "8536:8036"  # API
      - "9036:9036"  # Prometheus metrics
    volumes:
      - ./backend/services/bas_service:/app
      - bas_logs:/var/log/bas
      - bas_reports:/app/data/reports
      - atomic_red_team:/app/data/atomic-red-team
    environment:
      - SERVICE_NAME=breach_attack_simulation
      - SERVICE_PORT=8036
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # Atomic Red Team
      - ATOMIC_RED_TEAM_PATH=/app/data/atomic-red-team
      - ATOMIC_AUTO_UPDATE=true
      # Execution
      - DEFAULT_TIMEOUT_SECONDS=300
      - MAX_CONCURRENT_SIMULATIONS=10
      - ENABLE_CLEANUP=true
      # Purple Team
      - ENABLE_DETECTION_VALIDATION=true
      - DETECTION_TIMEOUT_SECONDS=60
      # SIEM Integration (opcional - configurar via .env)
      - SPLUNK_URL=${SPLUNK_URL:-}
      - SPLUNK_TOKEN=${SPLUNK_TOKEN:-}
      - ELASTIC_URL=${ELASTIC_URL:-}
      - ELASTIC_API_KEY=${ELASTIC_API_KEY:-}
      # ASA Integration
      - ENABLE_ASA_INTEGRATION=true
      - SOMATOSENSORY_URL=http://somatosensory_service:8208
      - PREFRONTAL_CORTEX_URL=http://prefrontal_cortex_service:8211
      - AI_IMMUNE_SYSTEM_URL=http://ai_immune_system:8214
      # Remote Execution
      - ENABLE_REMOTE_EXECUTION=true
      - SSH_DEFAULT_USER=${BAS_SSH_USER:-bas_runner}
      - ENABLE_WINRM=true
      - WINRM_DEFAULT_USER=${BAS_WINRM_USER:-bas_runner}
      # Safety
      - MAX_IMPACT_TECHNIQUES_PER_CAMPAIGN=5
      - REQUIRE_APPROVAL_FOR_IMPACT=true
      # Metrics
      - METRICS_ENABLED=true
      - METRICS_PORT=9036
    depends_on:
      - somatosensory_service
      - prefrontal_cortex_service
      - ai_immune_system
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8036/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Offensive Security Gateway (Port 8037)
  offensive_gateway:
    build:
      context: ./backend
      dockerfile: services/offensive_gateway/Dockerfile
    container_name: offensive_gateway
    ports:
      - "8537:8037"  # API
      - "9037:9037"  # Prometheus metrics
    volumes:
      - ./backend/services/offensive_gateway:/app
      - gateway_logs:/var/log/offensive_gateway
    environment:
      - SERVICE_NAME=offensive_gateway
      - SERVICE_PORT=8037
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # Backend Services
      - NETWORK_RECON_URL=http://network_recon_service:8532
      - VULN_INTEL_URL=http://vuln_intel_service:8533
      - WEB_ATTACK_URL=http://web_attack_service:8534
      - C2_ORCHESTRATION_URL=http://c2_orchestration_service:8535
      - BAS_URL=http://bas_service:8536
      # Workflows
      - MAX_CONCURRENT_WORKFLOWS=20
      - WORKFLOW_TIMEOUT_SECONDS=3600
      - ENABLE_WORKFLOW_PERSISTENCE=true
      # Attack Chains
      - MAX_CONCURRENT_CHAINS=5
      - CHAIN_TIMEOUT_SECONDS=7200
      - AUTO_CLEANUP_CHAINS=true
      # RBAC
      - ENABLE_RBAC=true
      - REQUIRE_API_KEY=true
      - API_KEY_HEADER=X-API-Key
      # Rate Limiting
      - ENABLE_RATE_LIMITING=true
      - DEFAULT_RATE_LIMIT=60
      # Safety
      - ENABLE_SAFETY_CHECKS=true
      - REQUIRE_APPROVAL_HIGH_IMPACT=true
      - MAX_SIMULTANEOUS_EXPLOITS=10
      # Audit
      - ENABLE_AUDIT_LOG=true
      # Metrics
      - METRICS_ENABLED=true
      - METRICS_PORT=9037
      # ASA
      - ENABLE_ASA_INTEGRATION=true
      - PREFRONTAL_CORTEX_URL=http://prefrontal_cortex_service:8211
    depends_on:
      - network_recon_service
      - vuln_intel_service
      - web_attack_service
      - c2_orchestration_service
      - bas_service
      - prefrontal_cortex_service
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8037/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ============================================================================
  # FASE 8: ENHANCED COGNITION (Q1-Q2 2026)
  # Advanced narrative analysis, predictive threat hunting, autonomous investigation
  # ============================================================================

  # Narrative Analysis Service
  narrative_analysis_service:
    build:
      context: ./backend/services/narrative_analysis_service
      dockerfile: Dockerfile
    container_name: narrative-analysis-service
    ports:
      - "8015:8015"
    environment:
      - SERVICE_NAME=narrative_analysis
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # Analytics config
      - ENABLE_SOCIAL_GRAPH_ANALYSIS=true
      - ENABLE_BOT_DETECTION=true
      - ENABLE_PROPAGANDA_ATTRIBUTION=true
      - ENABLE_MEME_TRACKING=true
      # Performance tuning
      - MAX_GRAPH_NODES=100000
      - COMMUNITY_DETECTION_RESOLUTION=1.0
      - BOT_DETECTION_THRESHOLD=0.6
      - ATTRIBUTION_MIN_CONFIDENCE=0.7
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8015/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Predictive Threat Hunting Service
  predictive_threat_hunting_service:
    build:
      context: ./backend/services/predictive_threat_hunting_service
      dockerfile: Dockerfile
    container_name: predictive-threat-hunting-service
    ports:
      - "8016:8016"
    environment:
      - SERVICE_NAME=predictive_threat_hunting
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # Prediction config
      - DEFAULT_TIME_HORIZON_HOURS=24
      - MIN_PREDICTION_CONFIDENCE=0.6
      - ENABLE_ATTACK_PREDICTION=true
      - ENABLE_VULNERABILITY_FORECASTING=true
      - ENABLE_PROACTIVE_HUNTING=true
      # Forecasting parameters
      - VULNERABILITY_FORECAST_WINDOW_DAYS=30
      - MIN_EXPLOIT_PROBABILITY=0.5
      # Pattern detection
      - MIN_PATTERN_HISTORY=5
      - PERIODICITY_DETECTION_THRESHOLD=0.7
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8016/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Autonomous Investigation Service
  autonomous_investigation_service:
    build:
      context: ./backend/services/autonomous_investigation_service
      dockerfile: Dockerfile
    container_name: autonomous-investigation-service
    ports:
      - "8017:8017"
    environment:
      - SERVICE_NAME=autonomous_investigation
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # Investigation config
      - DEFAULT_PLAYBOOK=standard
      - ENABLE_ACTOR_PROFILING=true
      - ENABLE_CAMPAIGN_CORRELATION=true
      - ENABLE_AUTO_INVESTIGATION=true
      # Attribution settings
      - ATTRIBUTION_MIN_CONFIDENCE=0.6
      - TTP_SIMILARITY_WEIGHT=0.7
      - INFRASTRUCTURE_SIMILARITY_WEIGHT=0.3
      # Campaign correlation
      - CAMPAIGN_TIME_WINDOW_DAYS=30
      - MIN_CAMPAIGN_SIZE=2
      - CORRELATION_THRESHOLD=0.6
      # Evidence collection
      - ENABLE_EVIDENCE_CHAIN=true
      - ENABLE_AUTO_RECOMMENDATIONS=true
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8017/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # ============================================================================
  # FASE 9: IMMUNE ENHANCEMENT (Q3-Q4 2026)
  # Regulatory T-Cells, Memory Consolidation, Adaptive Immunity
  # Bio-inspired adaptive learning and false positive suppression
  # ============================================================================

  # Regulatory T-Cells Service (Treg)
  immunis_treg_service:
    build:
      context: ./backend/services/immunis_treg_service
      dockerfile: Dockerfile
    container_name: immunis-treg-service
    ports:
      - "8018:8018"
    environment:
      - SERVICE_NAME=regulatory_t_cells
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # Tolerance learning
      - DEFAULT_TOLERANCE_THRESHOLD=0.7
      - MIN_OBSERVATIONS_FOR_TOLERANCE=10
      - BEHAVIORAL_FINGERPRINT_WINDOW=100
      # False positive suppression
      - FP_SUPPRESSION_THRESHOLD=0.6
      - ANOMALY_SCORE_THRESHOLD=3.0
      - ENABLE_ADAPTIVE_LEARNING=true
      # Performance
      - MAX_ENTITY_PROFILES=10000
      - PROFILE_CLEANUP_INTERVAL_HOURS=24
    networks:
      - maximus-network
    restart: unless-stopped
  # Memory Consolidation Service
  memory_consolidation_service:
    build:
      context: ./backend/services/memory_consolidation_service
      dockerfile: Dockerfile
    container_name: memory-consolidation-service
    ports:
      - "8019:8019"
    environment:
      - SERVICE_NAME=memory_consolidation
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # Consolidation parameters
      - CONSOLIDATION_THRESHOLD=0.6
      - CIRCADIAN_INTERVAL_HOURS=6
      - ENABLE_CIRCADIAN_RHYTHM=true
      # Memory management
      - MAX_STM_SIZE=10000
      - MAX_LTM_SIZE=100000
      - MEMORY_DECAY_RATE=0.05
      # Pattern extraction
      - MIN_PATTERN_SIZE=3
      - TEMPORAL_WINDOW_MINUTES=60
      - ENABLE_ATTACK_CHAIN_DETECTION=true
      # Performance
      - ENABLE_AUTO_CONSOLIDATION=true
      - CONSOLIDATION_BATCH_SIZE=1000
    networks:
      - maximus-network
    restart: unless-stopped
  # Adaptive Immunity Service
  adaptive_immunity_service:
    build:
      context: ./backend/services/adaptive_immunity_service
      dockerfile: Dockerfile
    container_name: adaptive-immunity-service
    ports:
      - "8020:8020"
    environment:
      - SERVICE_NAME=adaptive_immunity
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      # Antibody generation
      - INITIAL_REPERTOIRE_SIZE=100
      - ENABLE_VDJ_RECOMBINATION=true
      - DIVERSIFICATION_ENABLED=true
      # Affinity maturation
      - MUTATION_RATE=0.1
      - MUTATIONS_PER_CYCLE=5
      - ENABLE_SOMATIC_HYPERMUTATION=true
      # Clonal selection
      - EXPANSION_THRESHOLD=0.8
      - MAX_CLONES_PER_ANTIBODY=10
      - ENABLE_CLONAL_EXPANSION=true
      # Learning
      - ENABLE_FEEDBACK_LEARNING=true
      - MIN_FEEDBACK_FOR_MATURATION=5
      # Performance
      - MAX_ANTIBODY_POOL_SIZE=1000
      - MATURATION_CYCLE_INTERVAL_HOURS=12
    networks:
      - maximus-network
    restart: unless-stopped
  # Neuromodulation Service (FASE 8)
  neuromodulation_service:
    build: ./backend/services/neuromodulation_service
    container_name: vertice-neuromodulation
    ports:
      - "9093:8033"
    volumes:
      - ./backend/services/neuromodulation_service:/app
    environment:
      - SERVICE_NAME=neuromodulation
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENABLE_DOPAMINE=true
      - ENABLE_SEROTONIN=true
      - ENABLE_NORADRENALINE=true
      - ENABLE_ACETYLCHOLINE=true
    networks:
      - maximus-network
    restart: unless-stopped
  # Strategic Planning Service (FASE 8)
  strategic_planning_service:
    build: ./backend/services/strategic_planning_service
    container_name: vertice-strategic-planning
    ports:
      - "9094:8042"
    volumes:
      - ./backend/services/strategic_planning_service:/app
    environment:
      - SERVICE_NAME=strategic_planning
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENABLE_GOAL_DECOMPOSITION=true
      - ENABLE_RESOURCE_ALLOCATION=true
      - ENABLE_RISK_ASSESSMENT=true
      - MAX_PLAN_DEPTH=10
    networks:
      - maximus-network
    restart: unless-stopped
  # Cloud Coordinator Service (FASE 10)
  cloud_coordinator_service:
    build: ./backend/services/cloud_coordinator_service
    container_name: vertice-cloud-coordinator
    ports:
      - "9095:8051"
    volumes:
      - ./backend/services/cloud_coordinator_service:/app
    environment:
      - SERVICE_NAME=cloud_coordinator
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - HEARTBEAT_TIMEOUT=60.0
      - ENABLE_MULTI_TENANT=true
    networks:
      - maximus-network
    restart: unless-stopped
  # ============================================
  # NOVOS SERVIÃOS - 6 AdiÃ§Ãµes Reais
  # ============================================

  hsas_service:
    build: ./backend/services/hsas_service
    container_name: vertice-hsas_service
    env_file: .env
    ports:
      - "9099:8003"
    volumes:
      - ./backend/services/hsas_service:/app
    environment:
      - SERVICE_NAME=hsas_service
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  edge_agent_service:
    build: ./backend/services/edge_agent_service
    container_name: vertice-edge_agent_service
    env_file: .env
    ports:
      - "9100:8021"
    volumes:
      - ./backend/services/edge_agent_service:/app
    environment:
      - SERVICE_NAME=edge_agent_service
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8021/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  maximus_eureka:
    build: ./backend/services/maximus_eureka
    container_name: vertice-maximus_eureka
    env_file: .env
    ports:
      - "9103:8200"
    volumes:
      - ./backend/services/maximus_eureka:/app
    environment:
      - SERVICE_NAME=maximus_eureka
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8200/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # REMOVED: Duplicate of maximus-oraculo (line ~826)
  # maximus_oraculo:
  #   build: ./backend/services/maximus_oraculo
  #   container_name: vertice-maximus_oraculo
  #   env_file: .env
  #   ports:
  #     - "9104:8201"
  #   volumes:
  #     - ./backend/services/maximus_oraculo:/app
  #   command: uvicorn api:app --host 0.0.0.0 --port 8201 --reload
  #   environment:
  #     - SERVICE_NAME=maximus_oraculo
  #     - LOG_LEVEL=${LOG_LEVEL:-INFO}
  #   networks:
  #     - maximus-network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8201/health')"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 10s

  osint_service:
    build: ./backend/services/osint_service
    container_name: vertice-osint_service
    env_file: .env
    ports:
      - "9106:8049"
    volumes:
      - ./backend/services/osint_service:/app
    environment:
      - SERVICE_NAME=osint_service
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PYTHONUNBUFFERED=1
      - CHROME_BIN=/usr/bin/chromium
      - CHROMEDRIVER_PATH=/usr/bin/chromedriver
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TWITTER_BEARER_TOKEN=${TWITTER_BEARER_TOKEN:-}
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8049/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  reflex_triage_engine:
    build: ./backend/services/reflex_triage_engine
    container_name: vertice-reflex_triage_engine
    env_file: .env
    ports:
      - "9107:8012"
    volumes:
      - ./backend/services/reflex_triage_engine:/app
    environment:
      - SERVICE_NAME=reflex_triage_engine
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8012/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ============================
  # ADAPTIVE IMMUNITY SYSTEM
  # ============================
  
  # Zookeeper for Kafka coordination
  zookeeper-immunity:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: maximus-zookeeper-immunity
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper-immunity-data:/var/lib/zookeeper/data
      - zookeeper-immunity-logs:/var/lib/zookeeper/log
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka for APV stream
  kafka-immunity:
    image: confluentinc/cp-kafka:7.5.0
    container_name: maximus-kafka-immunity
    depends_on:
      zookeeper-immunity:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper-immunity:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-immunity:9092,PLAINTEXT_HOST://localhost:9096
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_LOG_RETENTION_HOURS: 168  # 7 days
      KAFKA_LOG_SEGMENT_BYTES: 1073741824  # 1GB
    ports:
      - "9096:9096"
    volumes:
      - kafka-immunity-data:/var/lib/kafka/data
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 10s
      retries: 5

  # PostgreSQL for APVs, patches, audit
  postgres-immunity:
    image: postgres:15-alpine
    container_name: maximus-postgres-immunity
    environment:
      POSTGRES_DB: adaptive_immunity
      POSTGRES_USER: maximus
      POSTGRES_PASSWORD: ${POSTGRES_IMMUNITY_PASSWORD:-maximus_immunity_2024}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5434:5432"
    volumes:
      - postgres-immunity-data:/var/lib/postgresql/data
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U maximus -d adaptive_immunity"]
      interval: 10s
      timeout: 5s
      retries: 5

  # OrÃ¡culo Threat Sentinel (APV Detection)

  # Eureka Confirmation Service

  # Wargaming Crisol (Patch Validation)
  wargaming-crisol:
    build:
      context: ./backend
      dockerfile: services/wargaming_crisol/Dockerfile
    container_name: maximus-wargaming-crisol
    ports:
      - "8026:8026"
    depends_on:
      - postgres-immunity
    environment:
      - POSTGRES_HOST=postgres-immunity
      - POSTGRES_PORT=5432
      - POSTGRES_DB=adaptive_immunity
      - POSTGRES_USER=maximus
      - POSTGRES_PASSWORD=${POSTGRES_IMMUNITY_PASSWORD:-maximus_immunity_2024}
      - REDIS_HOST=redis-immunity
      - REDIS_PORT=6379
      - REDIS_DB=2
      - REDIS_PASSWORD=${REDIS_PASSWORD:-maximus_immunity_redis}
      - DOCKER_HOST=unix:///var/run/docker.sock
      - LOG_LEVEL=INFO
    volumes:
      - ./backend/services/wargaming_crisol:/app
      - /var/run/docker.sock:/var/run/docker.sock  # Docker-in-Docker
      - wargaming_logs:/app/logs
    networks:
      - maximus-network
      - maximus-immunity-network
    restart: unless-stopped
    privileged: true  # Required for Docker-in-Docker

  # HITL Patch Service (Human-in-the-Loop Patch Approval)
  hitl-patch-service:
    build:
      context: ./backend/services
      dockerfile: hitl_patch_service/Dockerfile
    container_name: maximus-hitl-patch
    ports:
      - "8027:8027"
    depends_on:
      - postgres-immunity
    environment:
      - POSTGRES_HOST=postgres-immunity
      - POSTGRES_PORT=5432
      - POSTGRES_DB=adaptive_immunity
      - POSTGRES_USER=maximus
      - POSTGRES_PASSWORD=${POSTGRES_IMMUNITY_PASSWORD:-maximus_immunity_2024}
      - PORT=8027
      - LOG_LEVEL=INFO
    volumes:
      - ./backend/services/hitl_patch_service:/app
    networks:
      - maximus-network
      - maximus-immunity-network
    restart: unless-stopped

  # Kafka UI for monitoring
  kafka-ui-immunity:
    image: provectuslabs/kafka-ui:latest
    container_name: maximus-kafka-ui-immunity
    depends_on:
      - kafka-immunity
    environment:
      KAFKA_CLUSTERS_0_NAME: maximus-immunity
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka-immunity:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper-immunity:2181
    ports:
      - "8090:8080"
    networks:
      - maximus-network
    restart: unless-stopped

  # ============================
  # ADAPTIVE IMMUNE SYSTEM - HITL API
  # ============================
  adaptive_immune_system:
    build: ./backend/services/adaptive_immune_system
    container_name: vertice-adaptive-immune
    ports:
      - "8003:8003"
    volumes:
      - ./backend/services/adaptive_immune_system:/app
    environment:
      # Application
      - APP_NAME=Adaptive Immune System - HITL API
      - APP_VERSION=1.0.0
      - DEBUG=false
      # Server
      - HOST=0.0.0.0
      - PORT=8003
      # Database
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/adaptive_immune
      # RabbitMQ (if using messaging - currently not required)
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      # Redis
      - REDIS_URL=redis://redis:6379/0
      # GitHub (set these in .env file)
      - GITHUB_TOKEN=${GITHUB_TOKEN:-}
      - GITHUB_REPO_OWNER=${GITHUB_REPO_OWNER:-vertice-ai}
      - GITHUB_REPO_NAME=${GITHUB_REPO_NAME:-adaptive-immune}
      # CORS
      - CORS_ORIGINS=http://localhost:5173,http://localhost:3000,http://localhost:8080
      # Observability
      - LOG_LEVEL=info
      - PROMETHEUS_ENABLED=true
      # Feature Flags
      - WEBSOCKET_ENABLED=true
      - WARGAMING_ENABLED=true
    depends_on:
      - postgres
      - redis
    networks:
      - maximus-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

# ============================
# NETWORKS
# ============================
networks:
  maximus-network:
    name: maximus-ai-network
    driver: bridge
  maximus-immunity-network:
    external: true
# ============================
# VOLUMES
# ============================
volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  osint-data:
    driver: local
  maximus-models:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  # HCL volumes
  hcl_postgres_data:
    driver: local
  hcl_kafka_data:
    driver: local
  hcl_analyzer_models:
    driver: local
  hcl_planner_models:
    driver: local
  # Neuromorphic volumes
  rte_models:
    driver: local
  rte_quarantine:
    driver: local
  hpc_models:
    driver: local
  # MAXIMUS Advanced volumes
  eureka_reports:
    driver: local
  eureka_playbooks:
    driver: local
  oraculo_sessions:
    driver: local
  # Vector DB
  qdrant-data:
    driver: local
  # Offensive Security Arsenal
  network_recon_logs:
    driver: local
  network_recon_data:
    driver: local
  nuclei_templates:
    driver: local
  vuln_intel_logs:
    driver: local
  vuln_intel_data:
    driver: local
  web_attack_logs:
    driver: local
  c2_orchestration_logs:
    driver: local
  c2_payloads:
    driver: local
  bas_logs:
    driver: local
  bas_reports:
    driver: local
  atomic_red_team:
    driver: local
  gateway_logs:
    driver: local
  # Adaptive Immunity System volumes
  zookeeper-immunity-data:
    driver: local
  zookeeper-immunity-logs:
    driver: local
  kafka-immunity-data:
    driver: local
  postgres-immunity-data:
    driver: local
  wargaming_logs:
    driver: local
  # Sandbox (optional)
  # cuckoo-data:
  #   driver: local
