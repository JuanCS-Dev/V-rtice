/**
 * Testes Automatizados - ExploitSearchWidget
 * Projeto VÃ©rtice - PASSO 5: TESTING & VALIDATION
 */

import { describe, it, expect, beforeEach, vi } from 'vitest';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import ExploitSearchWidget from '../ExploitSearchWidget';
import * as worldClassTools from '../../../api/worldClassTools';

// Mock the Card component
vi.mock('../../shared/Card', () => ({
  Card: vi.fn(({ children, title, badge, variant: _variant, className }) => (
    <div data-testid="mock-card" className={className}>
      {title && <h2>{title}</h2>}
      {badge && <span className="badge">{badge}</span>}
      {children}
    </div>
  )),
}));

// Mock do mÃ³dulo worldClassTools
vi.mock('../../../api/worldClassTools', () => ({
  searchExploits: vi.fn(),
  getConfidenceBadge: vi.fn((confidence) => ({
    label: confidence >= 90 ? 'VERY HIGH' : 'HIGH',
    color: confidence >= 90 ? '#00ff00' : '#00ffff',
    icon: confidence >= 90 ? 'ðŸŸ¢' : 'ðŸ”µ'
  })),
  getSeverityColor: vi.fn((severity) => {
    const colors = {
      'CRITICAL': '#ff0040',
      'HIGH': '#ff4000',
      'MEDIUM': '#ffaa00',
      'LOW': '#00aa00',
      'INFO': '#00aaff'
    };
    return colors[severity] || colors.INFO;
  }),
  formatExecutionTime: vi.fn((ms) => ms < 1000 ? `${ms}ms` : `${(ms / 1000).toFixed(2)}s`)
}));

describe('ExploitSearchWidget', () => {

  beforeEach(() => {
    vi.clearAllMocks();
  });

  describe('RenderizaÃ§Ã£o Inicial', () => {
    it('deve renderizar o componente corretamente', () => {
      render(<ExploitSearchWidget />);

      expect(screen.getByText(/CVE EXPLOIT SEARCH/i)).toBeInTheDocument();
      expect(screen.getByPlaceholderText(/CVE-2024-1234/i)).toBeInTheDocument();
      expect(screen.getByRole('button', { name: /BUSCAR/i })).toBeInTheDocument();
    });

    it('deve exibir badge NSA-GRADE', () => {
      render(<ExploitSearchWidget />);
      expect(screen.getByText(/NSA-GRADE/i)).toBeInTheDocument();
    });

    it('deve desabilitar botÃ£o quando input estÃ¡ vazio', () => {
      render(<ExploitSearchWidget />);
      const button = screen.getByRole('button', { name: /BUSCAR/i });
      expect(button).toBeDisabled();
    });
  });

  describe('ValidaÃ§Ã£o de Input', () => {
    it('deve aceitar CVE ID vÃ¡lido', async () => {
      render(<ExploitSearchWidget />);
      const input = screen.getByPlaceholderText(/CVE-2024-1234/i);

      await userEvent.type(input, 'CVE-2024-1086');

      expect(input.value).toBe('CVE-2024-1086');
    });

    it('deve habilitar botÃ£o quando hÃ¡ texto no input', async () => {
      render(<ExploitSearchWidget />);
      const input = screen.getByPlaceholderText(/CVE-2024-1234/i);
      const button = screen.getByRole('button', { name: /BUSCAR/i });

      expect(button).toBeDisabled();

      await userEvent.type(input, 'CVE-2024-1086');

      expect(button).not.toBeDisabled();
    });

    it('deve mostrar erro para CVE ID invÃ¡lido', async () => {
      render(<ExploitSearchWidget />);
      const input = screen.getByPlaceholderText(/CVE-2024-1234/i);
      const button = screen.getByRole('button', { name: /BUSCAR/i });

      await userEvent.type(input, 'INVALID');
      await userEvent.click(button);

      await waitFor(() => {
        expect(screen.getByText(/Formato invÃ¡lido/i)).toBeInTheDocument();
      });
    });

    it('deve mostrar erro quando input estÃ¡ vazio ao clicar enter', async () => {
      render(<ExploitSearchWidget />);
      const input = screen.getByPlaceholderText(/CVE-2024-1234/i);

      fireEvent.keyPress(input, { key: 'Enter', code: 'Enter', charCode: 13 });

      await waitFor(() => {
        expect(screen.getByText(/CVE ID Ã© obrigatÃ³rio/i)).toBeInTheDocument();
      });
    });
  });

  describe('Busca de Exploits', () => {
    it('deve buscar exploits com sucesso', async () => {
      const mockResponse = {
        result: {
          cve_id: 'CVE-2024-1086',
          cvss_score: 9.8,
          severity: 'CRITICAL',
          exploits_found: 3,
          exploits: [
            {
              title: 'Linux Kernel Privilege Escalation',
              url: 'https://exploit-db.com/exploits/12345',
              type: 'local',
              verified: true,
              reliability: 'excellent'
            }
          ],
          affected_products: ['Linux Kernel 5.x'],
          patch_available: true,
          recommendations: ['Apply patch immediately'],
          confidence: 95,
          execution_time_ms: 234
        }
      };

      worldClassTools.searchExploits.mockResolvedValueOnce(mockResponse);

      render(<ExploitSearchWidget />);
      const input = screen.getByPlaceholderText(/CVE-2024-1234/i);
      const button = screen.getByRole('button', { name: /BUSCAR/i });

      await userEvent.type(input, 'CVE-2024-1086');
      await userEvent.click(button);

      await waitFor(() => {
        expect(screen.getByText('CVE-2024-1086')).toBeInTheDocument();
      });

      // Verificar informaÃ§Ãµes do CVE
      expect(screen.getByText(/9.8.*\/.*10/)).toBeInTheDocument();
      expect(screen.getByText('CRITICAL')).toBeInTheDocument();

      // Verificar chamada Ã  API
      expect(worldClassTools.searchExploits).toHaveBeenCalledWith(
        'CVE-2024-1086',
        expect.objectContaining({
          includePoc: true,
          includeMetasploit: true
        })
      );
    });

    it('deve exibir estado de loading durante busca', async () => {
      worldClassTools.searchExploits.mockImplementationOnce(
        () => new Promise(resolve => setTimeout(() => resolve({
          result: {
            cve_id: 'CVE-2024-1086',
            severity: 'CRITICAL',
            exploits_found: 0,
            exploits: [],
            confidence: 90
          }
        }), 100))
      );

      render(<ExploitSearchWidget />);
      const input = screen.getByPlaceholderText(/CVE-2024-1234/i);
      const button = screen.getByRole('button', { name: /BUSCAR/i });

      await userEvent.type(input, 'CVE-2024-1086');
      await userEvent.click(button);

      // Verificar loading state
      expect(screen.getByText(/BUSCANDO.../i)).toBeInTheDocument();
      expect(button).toBeDisabled();
    });

    it('deve lidar com erro de API', async () => {
      worldClassTools.searchExploits.mockRejectedValueOnce(
        new Error('Erro ao buscar exploits')
      );

      render(<ExploitSearchWidget />);
      const input = screen.getByPlaceholderText(/CVE-2024-1234/i);
      const button = screen.getByRole('button', { name: /BUSCAR/i });

      await userEvent.type(input, 'CVE-2024-1086');
      await userEvent.click(button);

      await waitFor(() => {
        expect(screen.getByText(/Erro ao buscar exploits/i)).toBeInTheDocument();
      });
    });

    it('deve permitir busca usando tecla Enter', async () => {
      worldClassTools.searchExploits.mockResolvedValueOnce({
        result: {
          cve_id: 'CVE-2024-1086',
          cvss_score: 9.8,
          severity: 'CRITICAL',
          exploits_found: 1,
          exploits: [],
          affected_products: [],
          confidence: 95
        }
      });

      render(<ExploitSearchWidget />);
      const input = screen.getByPlaceholderText(/CVE-2024-1234/i);

      await userEvent.type(input, 'CVE-2024-1086');
      fireEvent.keyPress(input, { key: 'Enter', code: 'Enter', charCode: 13 });

      await waitFor(() => {
        expect(worldClassTools.searchExploits).toHaveBeenCalled();
      });
    });
  });

  describe('ExibiÃ§Ã£o de Resultados', () => {
    it('deve exibir CVE info mesmo sem exploits', async () => {
      worldClassTools.searchExploits.mockResolvedValueOnce({
        result: {
          cve_id: 'CVE-2024-9999',
          cvss_score: 5.0,
          severity: 'MEDIUM',
          exploits_found: 0,
          exploits: [],
          affected_products: [],
          confidence: 90
        }
      });

      render(<ExploitSearchWidget />);
      const input = screen.getByPlaceholderText(/CVE-2024-1234/i);
      const button = screen.getByRole('button', { name: /BUSCAR/i });

      await userEvent.type(input, 'CVE-2024-9999');
      await userEvent.click(button);

      await waitFor(() => {
        expect(screen.getByText('CVE-2024-9999')).toBeInTheDocument();
      });

      // Verificar que exibe 0 exploits
      expect(screen.getByText(/Exploits Encontrados:/i)).toBeInTheDocument();
      expect(screen.getByText('0')).toBeInTheDocument();
    });

    it('deve exibir lista de exploits quando encontrados', async () => {
      worldClassTools.searchExploits.mockResolvedValueOnce({
        result: {
          cve_id: 'CVE-2024-1086',
          cvss_score: 9.8,
          severity: 'CRITICAL',
          exploits_found: 2,
          exploits: [
            {
              title: 'Exploit 1',
              url: 'https://example.com/1',
              type: 'local',
              verified: true,
              reliability: 'excellent'
            },
            {
              title: 'Exploit 2',
              url: 'https://example.com/2',
              type: 'remote',
              verified: false,
              reliability: 'normal'
            }
          ],
          affected_products: [],
          recommendations: [],
          confidence: 95
        }
      });

      render(<ExploitSearchWidget />);
      const input = screen.getByPlaceholderText(/CVE-2024-1234/i);
      const button = screen.getByRole('button', { name: /BUSCAR/i });

      await userEvent.type(input, 'CVE-2024-1086');
      await userEvent.click(button);

      await waitFor(() => {
        expect(screen.getByText('Exploit 1')).toBeInTheDocument();
        expect(screen.getByText('Exploit 2')).toBeInTheDocument();
      });
    });

    it('deve exibir recomendaÃ§Ãµes quando disponÃ­veis', async () => {
      worldClassTools.searchExploits.mockResolvedValueOnce({
        result: {
          cve_id: 'CVE-2024-1086',
          cvss_score: 9.8,
          severity: 'CRITICAL',
          exploits_found: 1,
          exploits: [],
          affected_products: [],
          recommendations: [
            'Apply security patch immediately',
            'Implement network segmentation'
          ],
          confidence: 95
        }
      });

      render(<ExploitSearchWidget />);
      const input = screen.getByPlaceholderText(/CVE-2024-1234/i);
      const button = screen.getByRole('button', { name: /BUSCAR/i });

      await userEvent.type(input, 'CVE-2024-1086');
      await userEvent.click(button);

      await waitFor(() => {
        expect(screen.getByText(/Apply security patch immediately/i)).toBeInTheDocument();
        expect(screen.getByText(/Implement network segmentation/i)).toBeInTheDocument();
      });
    });

    it('deve exibir badge de confianÃ§a', async () => {
      worldClassTools.searchExploits.mockResolvedValueOnce({
        result: {
          cve_id: 'CVE-2024-1086',
          cvss_score: 9.8,
          severity: 'CRITICAL',
          exploits_found: 1,
          exploits: [],
          affected_products: [],
          confidence: 95
        }
      });

      render(<ExploitSearchWidget />);
      const input = screen.getByPlaceholderText(/CVE-2024-1234/i);
      const button = screen.getByRole('button', { name: /BUSCAR/i });

      await userEvent.type(input, 'CVE-2024-1086');
      await userEvent.click(button);

      await waitFor(() => {
        expect(worldClassTools.getConfidenceBadge).toHaveBeenCalledWith(95);
      });
    });
  });

  describe('Limpeza de Estado', () => {
    it('deve limpar resultado anterior ao fazer nova busca', async () => {
      // Primeira busca
      worldClassTools.searchExploits.mockResolvedValueOnce({
        result: {
          cve_id: 'CVE-2024-1086',
          cvss_score: 9.8,
          severity: 'CRITICAL',
          exploits_found: 1,
          exploits: [],
          affected_products: [],
          confidence: 95
        }
      });

      render(<ExploitSearchWidget />);
      const input = screen.getByPlaceholderText(/CVE-2024-1234/i);
      const button = screen.getByRole('button', { name: /BUSCAR/i });

      await userEvent.type(input, 'CVE-2024-1086');
      await userEvent.click(button);

      await waitFor(() => {
        expect(screen.getByText('CVE-2024-1086')).toBeInTheDocument();
      });

      // Segunda busca
      worldClassTools.searchExploits.mockResolvedValueOnce({
        result: {
          cve_id: 'CVE-2024-9999',
          cvss_score: 5.0,
          severity: 'MEDIUM',
          exploits_found: 0,
          exploits: [],
          affected_products: [],
          confidence: 90
        }
      });

      await userEvent.clear(input);
      await userEvent.type(input, 'CVE-2024-9999');
      await userEvent.click(button);

      await waitFor(() => {
        expect(screen.getByText('CVE-2024-9999')).toBeInTheDocument();
      });
    });

    it('deve limpar erro ao fazer nova busca', async () => {
      render(<ExploitSearchWidget />);
      const input = screen.getByPlaceholderText(/CVE-2024-1234/i);
      const button = screen.getByRole('button', { name: /BUSCAR/i });

      // Busca com erro
      await userEvent.type(input, 'INVALID');
      await userEvent.click(button);

      await waitFor(() => {
        expect(screen.getByText(/Formato invÃ¡lido/i)).toBeInTheDocument();
      });

      // Nova busca vÃ¡lida
      worldClassTools.searchExploits.mockResolvedValueOnce({
        result: {
          cve_id: 'CVE-2024-1086',
          cvss_score: 9.8,
          severity: 'CRITICAL',
          exploits_found: 1,
          exploits: [],
          affected_products: [],
          confidence: 95
        }
      });

      await userEvent.clear(input);
      await userEvent.type(input, 'CVE-2024-1086');
      await userEvent.click(button);

      await waitFor(() => {
        expect(screen.queryByText(/Formato invÃ¡lido/i)).not.toBeInTheDocument();
      });
    });
  });
});
