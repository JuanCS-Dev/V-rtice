/**
 * Exploit Search Widget
 *
 * CVE Exploit Intelligence - Busca exploits conhecidos em 40K+ exploits
 * Fontes: Exploit-DB, Metasploit, NVD, GitHub Security Advisories
 */

import React, { useState } from 'react';
import { searchExploits, getConfidenceBadge, getSeverityColor, formatExecutionTime } from '../../api/worldClassTools';

const ExploitSearchWidget = () => {
  const [cveId, setCveId] = useState('');
  const [loading, setLoading] = useState(false);
  const [result, setResult] = useState(null);
  const [error, setError] = useState(null);

  const handleSearch = async () => {
    if (!cveId.trim()) {
      setError('CVE ID é obrigatório');
      return;
    }

    // Validar formato CVE
    if (!/^CVE-\d{4}-\d{4,}$/i.test(cveId.trim())) {
      setError('Formato inválido. Use: CVE-YYYY-NNNN (ex: CVE-2024-1234)');
      return;
    }

    setLoading(true);
    setError(null);
    setResult(null);

    try {
      const response = await searchExploits(cveId.toUpperCase(), {
        includePoc: true,
        includeMetasploit: true
      });

      setResult(response.result);
    } catch (err) {
      setError(err.message || 'Erro ao buscar exploits');
    } finally {
      setLoading(false);
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      handleSearch();
    }
  };

  const confidenceBadge = result ? getConfidenceBadge(result.confidence) : null;

  return (
    <div className="exploit-search-widget cyber-widget">
      {/* Header */}
      <div className="widget-header">
        <div className="header-left">
          <i className="fas fa-bug"></i>
          <h3>CVE EXPLOIT SEARCH</h3>
        </div>
        <div className="header-badge">
          <span className="badge-nsa">NSA-GRADE</span>
        </div>
      </div>

      {/* Search Input */}
      <div className="widget-body">
        <div className="search-section">
          <div className="input-group">
            <input
              type="text"
              className="cyber-input"
              placeholder="CVE-2024-1234"
              value={cveId}
              onChange={(e) => setCveId(e.target.value)}
              onKeyPress={handleKeyPress}
              disabled={loading}
            />
            <button
              className="cyber-button primary"
              onClick={handleSearch}
              disabled={loading || !cveId.trim()}
            >
              {loading ? (
                <><i className="fas fa-spinner fa-spin"></i> BUSCANDO...</>
              ) : (
                <><i className="fas fa-search"></i> BUSCAR</>
              )}
            </button>
          </div>
          <p className="input-hint">
            <i className="fas fa-info-circle"></i>
            Busca em 40K+ exploits (Exploit-DB, Metasploit, NVD)
          </p>
        </div>

        {/* Error */}
        {error && (
          <div className="alert error">
            <i className="fas fa-exclamation-triangle"></i>
            <span>{error}</span>
          </div>
        )}

        {/* Results */}
        {result && (
          <div className="results-section">
            {/* Status Bar */}
            <div className="status-bar">
              <div className="status-item">
                <span className="label">STATUS:</span>
                <span className={`value status-${result.status}`}>
                  {result.status === 'success' ? '✓ SUCCESS' : '✗ FAILED'}
                </span>
              </div>
              <div className="status-item">
                <span className="label">CONFIDENCE:</span>
                <span className="value" style={{ color: confidenceBadge.color }}>
                  {confidenceBadge.icon} {result.confidence.toFixed(1)}% ({confidenceBadge.label})
                </span>
              </div>
              <div className="status-item">
                <span className="label">TEMPO:</span>
                <span className="value">{formatExecutionTime(result.execution_time_ms)}</span>
              </div>
            </div>

            {/* CVE Info */}
            <div className="cve-info-card">
              <div className="cve-header" style={{ borderLeftColor: getSeverityColor(result.severity) }}>
                <h4>{result.cve_id}</h4>
                <span className={`severity-badge ${result.severity.toLowerCase()}`}>
                  {result.severity}
                </span>
              </div>

              <div className="cve-details">
                <div className="detail-row">
                  <span className="label">CVSS Score:</span>
                  <span className="value">
                    <div className="cvss-bar">
                      <div
                        className="cvss-fill"
                        style={{
                          width: `${(result.cvss_score / 10) * 100}%`,
                          backgroundColor: getSeverityColor(result.severity)
                        }}
                      ></div>
                    </div>
                    {result.cvss_score ? result.cvss_score.toFixed(1) : 'N/A'} / 10
                  </span>
                </div>

                <div className="detail-row">
                  <span className="label">Exploits Encontrados:</span>
                  <span className="value highlight">{result.exploits?.length || 0}</span>
                </div>

                <div className="detail-row">
                  <span className="label">Patch Disponível:</span>
                  <span className={`value ${result.patch_available ? 'success' : 'danger'}`}>
                    {result.patch_available ? '✓ SIM' : '✗ NÃO'}
                  </span>
                </div>
              </div>
            </div>

            {/* Exploits List */}
            {result.exploits && result.exploits.length > 0 && (
              <div className="exploits-list">
                <h5>
                  <i className="fas fa-bomb"></i>
                  Exploits Disponíveis ({result.exploits.length})
                </h5>
                {result.exploits.map((exploit, index) => (
                  <div key={index} className="exploit-card">
                    <div className="exploit-header">
                      <span className="exploit-source">{exploit.source}</span>
                      <span className="exploit-reliability">
                        Confiabilidade: {(exploit.reliability * 100).toFixed(0)}%
                      </span>
                    </div>
                    <div className="exploit-title">{exploit.title}</div>
                    {exploit.url && (
                      <a
                        href={exploit.url}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="exploit-link"
                      >
                        <i className="fas fa-external-link-alt"></i>
                        Ver Exploit
                      </a>
                    )}
                  </div>
                ))}
              </div>
            )}

            {/* Affected Systems */}
            {result.affected_systems && result.affected_systems.length > 0 && (
              <div className="affected-systems">
                <h5>
                  <i className="fas fa-server"></i>
                  Sistemas Afetados
                </h5>
                <div className="systems-tags">
                  {result.affected_systems.map((system, index) => (
                    <span key={index} className="system-tag">{system}</span>
                  ))}
                </div>
              </div>
            )}

            {/* Recommendations */}
            {result.recommendations && result.recommendations.length > 0 && (
              <div className="recommendations">
                <h5>
                  <i className="fas fa-shield-alt"></i>
                  Recomendações
                </h5>
                {result.recommendations.map((rec, index) => (
                  <div key={index} className="recommendation-item">
                    {rec}
                  </div>
                ))}
              </div>
            )}

            {/* Warnings/Errors */}
            {result.warnings && result.warnings.length > 0 && (
              <div className="warnings-section">
                {result.warnings.map((warning, index) => (
                  <div key={index} className="alert warning">
                    <i className="fas fa-exclamation-triangle"></i>
                    <span>{warning}</span>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}
      </div>

      {/* Styles */}
      <style jsx>{`
        .exploit-search-widget {
          background: linear-gradient(135deg, rgba(10, 14, 26, 0.95), rgba(0, 255, 255, 0.05));
          border: 1px solid rgba(0, 255, 255, 0.3);
          border-radius: 8px;
          padding: 20px;
          backdrop-filter: blur(10px);
        }

        .widget-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          margin-bottom: 20px;
          padding-bottom: 15px;
          border-bottom: 1px solid rgba(0, 255, 255, 0.2);
        }

        .header-left {
          display: flex;
          align-items: center;
          gap: 12px;
          color: #00ffff;
        }

        .header-left i {
          font-size: 1.5rem;
        }

        .header-left h3 {
          margin: 0;
          font-size: 1.1rem;
          font-weight: 700;
          letter-spacing: 1px;
        }

        .badge-nsa {
          background: linear-gradient(90deg, #00ffff, #ff00ff);
          color: #000;
          padding: 4px 12px;
          border-radius: 4px;
          font-size: 0.7rem;
          font-weight: bold;
          letter-spacing: 1px;
        }

        .widget-body {
          display: flex;
          flex-direction: column;
          gap: 20px;
        }

        .search-section {
          display: flex;
          flex-direction: column;
          gap: 8px;
        }

        .input-group {
          display: flex;
          gap: 10px;
        }

        .cyber-input {
          flex: 1;
          background: rgba(0, 255, 255, 0.05);
          border: 1px solid rgba(0, 255, 255, 0.3);
          color: #00ffff;
          padding: 10px 15px;
          border-radius: 4px;
          font-size: 0.9rem;
          font-family: 'Courier New', monospace;
          text-transform: uppercase;
        }

        .cyber-input::placeholder {
          color: rgba(0, 255, 255, 0.4);
        }

        .cyber-input:focus {
          outline: none;
          border-color: #00ffff;
          box-shadow: 0 0 10px rgba(0, 255, 255, 0.3);
        }

        .cyber-button {
          background: linear-gradient(135deg, #00ffff, #00aaff);
          color: #000;
          border: none;
          padding: 10px 20px;
          border-radius: 4px;
          font-weight: bold;
          cursor: pointer;
          display: flex;
          align-items: center;
          gap: 8px;
          transition: all 0.3s ease;
          font-size: 0.85rem;
          letter-spacing: 1px;
        }

        .cyber-button:hover:not(:disabled) {
          transform: translateY(-2px);
          box-shadow: 0 5px 15px rgba(0, 255, 255, 0.4);
        }

        .cyber-button:disabled {
          opacity: 0.5;
          cursor: not-allowed;
        }

        .input-hint {
          font-size: 0.75rem;
          color: #8a99c0;
          margin: 0;
          display: flex;
          align-items: center;
          gap: 6px;
        }

        .alert {
          padding: 12px 15px;
          border-radius: 4px;
          display: flex;
          align-items: center;
          gap: 10px;
          font-size: 0.85rem;
        }

        .alert.error {
          background: rgba(255, 0, 64, 0.1);
          border: 1px solid rgba(255, 0, 64, 0.3);
          color: #ff8888;
        }

        .alert.warning {
          background: rgba(255, 170, 0, 0.1);
          border: 1px solid rgba(255, 170, 0, 0.3);
          color: #ffaa00;
        }

        .results-section {
          display: flex;
          flex-direction: column;
          gap: 15px;
        }

        .status-bar {
          display: flex;
          justify-content: space-between;
          background: rgba(0, 255, 255, 0.05);
          padding: 12px;
          border-radius: 4px;
          border: 1px solid rgba(0, 255, 255, 0.2);
        }

        .status-item {
          display: flex;
          flex-direction: column;
          gap: 4px;
        }

        .status-item .label {
          font-size: 0.7rem;
          color: #8a99c0;
          letter-spacing: 1px;
        }

        .status-item .value {
          font-size: 0.9rem;
          font-weight: bold;
          color: #00ffff;
        }

        .value.status-success {
          color: #00ff00;
        }

        .value.status-failed {
          color: #ff0040;
        }

        .cve-info-card {
          background: rgba(5, 8, 16, 0.8);
          border-radius: 6px;
          overflow: hidden;
        }

        .cve-header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 15px;
          border-left: 4px solid;
          background: rgba(0, 255, 255, 0.05);
        }

        .cve-header h4 {
          margin: 0;
          color: #00ffff;
          font-size: 1.1rem;
          font-family: 'Courier New', monospace;
        }

        .severity-badge {
          padding: 4px 12px;
          border-radius: 4px;
          font-size: 0.75rem;
          font-weight: bold;
          letter-spacing: 1px;
        }

        .severity-badge.critical {
          background: rgba(255, 0, 64, 0.2);
          color: #ff0040;
          border: 1px solid #ff0040;
        }

        .severity-badge.high {
          background: rgba(255, 64, 0, 0.2);
          color: #ff4000;
          border: 1px solid #ff4000;
        }

        .severity-badge.medium {
          background: rgba(255, 170, 0, 0.2);
          color: #ffaa00;
          border: 1px solid #ffaa00;
        }

        .severity-badge.low {
          background: rgba(0, 170, 0, 0.2);
          color: #00aa00;
          border: 1px solid #00aa00;
        }

        .cve-details {
          padding: 15px;
          display: flex;
          flex-direction: column;
          gap: 12px;
        }

        .detail-row {
          display: flex;
          justify-content: space-between;
          align-items: center;
          padding: 8px 0;
          border-bottom: 1px solid rgba(0, 255, 255, 0.1);
        }

        .detail-row:last-child {
          border-bottom: none;
        }

        .detail-row .label {
          font-size: 0.85rem;
          color: #8a99c0;
        }

        .detail-row .value {
          font-size: 0.9rem;
          font-weight: 600;
          color: #00ffff;
          display: flex;
          align-items: center;
          gap: 10px;
        }

        .detail-row .value.highlight {
          color: #ff00ff;
          font-size: 1.2rem;
        }

        .detail-row .value.success {
          color: #00ff00;
        }

        .detail-row .value.danger {
          color: #ff0040;
        }

        .cvss-bar {
          width: 100px;
          height: 8px;
          background: rgba(255, 255, 255, 0.1);
          border-radius: 4px;
          overflow: hidden;
        }

        .cvss-fill {
          height: 100%;
          transition: width 0.5s ease;
        }

        .exploits-list, .affected-systems, .recommendations {
          background: rgba(5, 8, 16, 0.6);
          border: 1px solid rgba(0, 255, 255, 0.2);
          border-radius: 6px;
          padding: 15px;
        }

        .exploits-list h5, .affected-systems h5, .recommendations h5 {
          margin: 0 0 15px 0;
          color: #00ffff;
          font-size: 0.95rem;
          display: flex;
          align-items: center;
          gap: 8px;
        }

        .exploit-card {
          background: rgba(0, 255, 255, 0.05);
          border: 1px solid rgba(0, 255, 255, 0.2);
          border-radius: 4px;
          padding: 12px;
          margin-bottom: 10px;
        }

        .exploit-card:last-child {
          margin-bottom: 0;
        }

        .exploit-header {
          display: flex;
          justify-content: space-between;
          margin-bottom: 8px;
        }

        .exploit-source {
          font-size: 0.75rem;
          color: #00ffff;
          background: rgba(0, 255, 255, 0.1);
          padding: 2px 8px;
          border-radius: 3px;
          font-weight: bold;
          text-transform: uppercase;
        }

        .exploit-reliability {
          font-size: 0.75rem;
          color: #8a99c0;
        }

        .exploit-title {
          color: #d0d8f0;
          font-size: 0.9rem;
          margin-bottom: 10px;
          line-height: 1.4;
        }

        .exploit-link {
          display: inline-flex;
          align-items: center;
          gap: 6px;
          color: #00aaff;
          text-decoration: none;
          font-size: 0.8rem;
          transition: color 0.3s ease;
        }

        .exploit-link:hover {
          color: #00ffff;
        }

        .systems-tags {
          display: flex;
          flex-wrap: wrap;
          gap: 8px;
        }

        .system-tag {
          background: rgba(255, 0, 255, 0.1);
          border: 1px solid rgba(255, 0, 255, 0.3);
          color: #ff00ff;
          padding: 6px 12px;
          border-radius: 4px;
          font-size: 0.8rem;
        }

        .recommendation-item {
          background: rgba(0, 255, 0, 0.05);
          border-left: 3px solid #00ff00;
          padding: 10px 12px;
          margin-bottom: 8px;
          border-radius: 4px;
          color: #d0d8f0;
          font-size: 0.85rem;
        }

        .recommendation-item:last-child {
          margin-bottom: 0;
        }
      `}</style>
    </div>
  );
};

export default ExploitSearchWidget;