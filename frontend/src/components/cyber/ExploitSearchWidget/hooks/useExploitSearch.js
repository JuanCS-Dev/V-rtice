import { useState, useCallback } from 'react';
import { searchExploits } from '../../../../api/worldClassTools';

/**
 * Custom hook for CVE exploit search logic
 * Encapsulates all the business logic for searching exploits
 */
export const useExploitSearch = () => {
  const [result, setResult] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const search = useCallback(async (cveId) => {
    // Validação
    if (!cveId?.trim()) {
      setError('CVE ID é obrigatório');
      return;
    }

    // Validar formato CVE
    if (!/^CVE-\d{4}-\d{4,}$/i.test(cveId.trim())) {
      setError('Formato inválido. Use: CVE-YYYY-NNNN (ex: CVE-2024-1234)');
      return;
    }

    setLoading(true);
    setError(null);
    setResult(null);

    try {
      const response = await searchExploits(cveId.toUpperCase(), {
        includePoc: true,
        includeMetasploit: true
      });

      setResult(response.result);
    } catch (err) {
      setError(err.message || 'Erro ao buscar exploits');
    } finally {
      setLoading(false);
    }
  }, []);

  const reset = useCallback(() => {
    setResult(null);
    setError(null);
    setLoading(false);
  }, []);

  return {
    result,
    loading,
    error,
    search,
    reset
  };
};

export default useExploitSearch;
