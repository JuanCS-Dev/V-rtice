import React, { useState, useEffect, useContext } from 'react';
import { AuthContext } from '../../contexts/AuthContext';

const VulnerabilityScanner = () => {
  const { user, getAuthToken } = useContext(AuthContext);
  const [scanData, setScanData] = useState({
    activeScan: null,
    scanHistory: [],
    exploits: []
  });
  const [loading, setLoading] = useState({});
  const [scanForm, setScanForm] = useState({
    target: '',
    scan_type: 'full',
    ports: '',
    exclude_hosts: ''
  });
  const [exploitForm, setExploitForm] = useState({
    target: '',
    exploit_id: '',
    payload_options: {}
  });

  // Verifica se o usuário tem permissão ofensiva
  const hasOffensivePermission = user?.permissions?.includes('offensive') || user?.email === 'juan.brainfarma@gmail.com';

  // Headers com autenticação
  const getHeaders = () => {
    const token = getAuthToken();
    return {
      'Content-Type': 'application/json',
      'Authorization': token ? `Bearer ${token}` : ''
    };
  };

  // Carrega exploits disponíveis
  const loadExploits = async () => {
    if (!hasOffensivePermission) return;

    setLoading(prev => ({ ...prev, exploits: true }));
    try {
      const response = await fetch('http://localhost:8000/api/vuln-scanner/exploits', {
        headers: getHeaders()
      });
      const data = await response.json();

      if (response.ok) {
        setScanData(prev => ({ ...prev, exploits: data.exploits || [] }));
      } else {
        console.error('Erro ao carregar exploits:', data.detail);
      }
    } catch (error) {
      console.error('Erro ao carregar exploits:', error);
    } finally {
      setLoading(prev => ({ ...prev, exploits: false }));
    }
  };

  // Inicia um novo scan
  const startScan = async (e) => {
    e.preventDefault();
    if (!hasOffensivePermission) {
      alert('Permissão ofensiva necessária para realizar scans');
      return;
    }

    setLoading(prev => ({ ...prev, scan: true }));
    try {
      const response = await fetch('http://localhost:8000/api/vuln-scanner/scan', {
        method: 'POST',
        headers: getHeaders(),
        body: JSON.stringify(scanForm)
      });
      const data = await response.json();

      if (response.ok) {
        setScanData(prev => ({ ...prev, activeScan: data }));
        setScanForm({ target: '', scan_type: 'full', ports: '', exclude_hosts: '' });

        // Polling para atualizar status do scan
        pollScanStatus(data.scan_id);
      } else {
        alert(`Erro ao iniciar scan: ${data.detail}`);
      }
    } catch (error) {
      console.error('Erro ao iniciar scan:', error);
      alert('Erro ao iniciar scan');
    } finally {
      setLoading(prev => ({ ...prev, scan: false }));
    }
  };

  // Polling para status do scan
  const pollScanStatus = (scanId) => {
    const interval = setInterval(async () => {
      try {
        const response = await fetch(`http://localhost:8000/api/vuln-scanner/scan/${scanId}`, {
          headers: getHeaders()
        });
        const data = await response.json();

        if (response.ok) {
          setScanData(prev => ({ ...prev, activeScan: data }));

          if (data.status === 'completed' || data.status === 'failed') {
            clearInterval(interval);
          }
        }
      } catch (error) {
        console.error('Erro ao verificar status do scan:', error);
        clearInterval(interval);
      }
    }, 3000);
  };

  // Executa exploit
  const executeExploit = async (e) => {
    e.preventDefault();
    if (!hasOffensivePermission) {
      alert('Permissão ofensiva necessária para executar exploits');
      return;
    }

    setLoading(prev => ({ ...prev, exploit: true }));
    try {
      const response = await fetch('http://localhost:8000/api/vuln-scanner/exploit', {
        method: 'POST',
        headers: getHeaders(),
        body: JSON.stringify(exploitForm)
      });
      const data = await response.json();

      if (response.ok) {
        alert(`Exploit executado: ${data.message}`);
        setExploitForm({ target: '', exploit_id: '', payload_options: {} });
      } else {
        alert(`Erro ao executar exploit: ${data.detail}`);
      }
    } catch (error) {
      console.error('Erro ao executar exploit:', error);
      alert('Erro ao executar exploit');
    } finally {
      setLoading(prev => ({ ...prev, exploit: false }));
    }
  };

  useEffect(() => {
    if (hasOffensivePermission) {
      loadExploits();
    }
  }, [hasOffensivePermission]);

  if (!hasOffensivePermission) {
    return (
      <div className="bg-gray-900 p-6 rounded-lg">
        <div className="text-center">
          <div className="text-red-400 text-6xl mb-4">🔒</div>
          <h3 className="text-xl font-bold text-red-400 mb-2">Acesso Negado</h3>
          <p className="text-gray-400">
            Você não tem permissão para acessar ferramentas ofensivas.
            <br />
            Apenas usuários com permissão 'offensive' podem utilizar o Vulnerability Scanner.
          </p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="bg-gradient-to-r from-red-900 to-orange-900 p-6 rounded-lg">
        <h2 className="text-2xl font-bold text-white mb-2">🎯 Vulnerability Scanner</h2>
        <p className="text-red-200">
          Ferramenta ofensiva para descoberta e exploração de vulnerabilidades
        </p>
        <div className="mt-2 text-sm text-red-300">
          ⚠️ Uso autorizado apenas para testes de segurança em sistemas próprios
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Formulário de Scan */}
        <div className="bg-gray-900 p-6 rounded-lg">
          <h3 className="text-lg font-bold text-white mb-4">🔍 Iniciar Scan</h3>
          <form onSubmit={startScan} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">
                Target (IP/Domain)
              </label>
              <input
                type="text"
                value={scanForm.target}
                onChange={(e) => setScanForm({...scanForm, target: e.target.value})}
                className="w-full p-2 bg-gray-800 border border-gray-600 rounded text-white"
                placeholder="192.168.1.1 ou exemplo.com"
                required
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">
                Tipo de Scan
              </label>
              <select
                value={scanForm.scan_type}
                onChange={(e) => setScanForm({...scanForm, scan_type: e.target.value})}
                className="w-full p-2 bg-gray-800 border border-gray-600 rounded text-white"
              >
                <option value="quick">Quick Scan</option>
                <option value="full">Full Scan</option>
                <option value="stealth">Stealth Scan</option>
                <option value="aggressive">Aggressive Scan</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">
                Portas Específicas (opcional)
              </label>
              <input
                type="text"
                value={scanForm.ports}
                onChange={(e) => setScanForm({...scanForm, ports: e.target.value})}
                className="w-full p-2 bg-gray-800 border border-gray-600 rounded text-white"
                placeholder="80,443,8080 ou 1-1000"
              />
            </div>

            <button
              type="submit"
              disabled={loading.scan}
              className="w-full bg-red-600 hover:bg-red-700 disabled:bg-gray-600 text-white py-2 px-4 rounded font-medium"
            >
              {loading.scan ? 'Iniciando Scan...' : 'Iniciar Scan'}
            </button>
          </form>
        </div>

        {/* Formulário de Exploit */}
        <div className="bg-gray-900 p-6 rounded-lg">
          <h3 className="text-lg font-bold text-white mb-4">💥 Executar Exploit</h3>
          <form onSubmit={executeExploit} className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">
                Target
              </label>
              <input
                type="text"
                value={exploitForm.target}
                onChange={(e) => setExploitForm({...exploitForm, target: e.target.value})}
                className="w-full p-2 bg-gray-800 border border-gray-600 rounded text-white"
                placeholder="192.168.1.1:445"
                required
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-300 mb-1">
                Exploit
              </label>
              <select
                value={exploitForm.exploit_id}
                onChange={(e) => setExploitForm({...exploitForm, exploit_id: e.target.value})}
                className="w-full p-2 bg-gray-800 border border-gray-600 rounded text-white"
                required
              >
                <option value="">Selecione um exploit...</option>
                {scanData.exploits.map(exploit => (
                  <option key={exploit.id} value={exploit.id}>
                    {exploit.name} - {exploit.severity}
                  </option>
                ))}
              </select>
            </div>

            <button
              type="submit"
              disabled={loading.exploit}
              className="w-full bg-orange-600 hover:bg-orange-700 disabled:bg-gray-600 text-white py-2 px-4 rounded font-medium"
            >
              {loading.exploit ? 'Executando...' : 'Executar Exploit'}
            </button>
          </form>
        </div>
      </div>

      {/* Status do Scan Ativo */}
      {scanData.activeScan && (
        <div className="bg-gray-900 p-6 rounded-lg">
          <h3 className="text-lg font-bold text-white mb-4">📊 Scan Ativo</h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="bg-gray-800 p-4 rounded">
              <div className="text-sm text-gray-400">Target</div>
              <div className="text-white font-medium">{scanData.activeScan.target}</div>
            </div>
            <div className="bg-gray-800 p-4 rounded">
              <div className="text-sm text-gray-400">Status</div>
              <div className={`font-medium ${
                scanData.activeScan.status === 'completed' ? 'text-green-400' :
                scanData.activeScan.status === 'failed' ? 'text-red-400' :
                'text-yellow-400'
              }`}>
                {scanData.activeScan.status}
              </div>
            </div>
            <div className="bg-gray-800 p-4 rounded">
              <div className="text-sm text-gray-400">Vulnerabilidades</div>
              <div className="text-white font-medium">
                {scanData.activeScan.vulnerabilities?.length || 0}
              </div>
            </div>
          </div>

          {/* Resultados do Scan */}
          {scanData.activeScan.vulnerabilities && scanData.activeScan.vulnerabilities.length > 0 && (
            <div className="mt-4">
              <h4 className="text-white font-medium mb-2">Vulnerabilidades Encontradas:</h4>
              <div className="space-y-2 max-h-60 overflow-y-auto">
                {scanData.activeScan.vulnerabilities.map((vuln, index) => (
                  <div key={index} className="bg-gray-800 p-3 rounded text-sm">
                    <div className="text-white font-medium">{vuln.service}</div>
                    <div className="text-gray-400">{vuln.description}</div>
                    <div className={`text-xs mt-1 ${
                      vuln.severity === 'critical' ? 'text-red-400' :
                      vuln.severity === 'high' ? 'text-orange-400' :
                      vuln.severity === 'medium' ? 'text-yellow-400' :
                      'text-blue-400'
                    }`}>
                      Severidade: {vuln.severity}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
      )}

      {/* Lista de Exploits Disponíveis */}
      <div className="bg-gray-900 p-6 rounded-lg">
        <h3 className="text-lg font-bold text-white mb-4">🔧 Exploits Disponíveis</h3>
        {loading.exploits ? (
          <div className="text-gray-400">Carregando exploits...</div>
        ) : (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {scanData.exploits.map(exploit => (
              <div key={exploit.id} className="bg-gray-800 p-4 rounded">
                <div className="text-white font-medium">{exploit.name}</div>
                <div className="text-gray-400 text-sm mt-1">{exploit.description}</div>
                <div className={`text-xs mt-2 ${
                  exploit.severity === 'critical' ? 'text-red-400' :
                  exploit.severity === 'high' ? 'text-orange-400' :
                  exploit.severity === 'medium' ? 'text-yellow-400' :
                  'text-blue-400'
                }`}>
                  {exploit.severity.toUpperCase()} | Portas: {exploit.ports?.join(', ')}
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    </div>
  );
};

export default VulnerabilityScanner;