/**
 * CockpitSoberano Component Tests - 100% Coverage
 * PadrÃ£o Pagani - NO MOCKS
 * 
 * @version 2.0.0
 */

import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';
import { render, screen, fireEvent } from '@testing-library/react';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { I18nextProvider } from 'react-i18next';
import i18n from '../../../../i18n/config';
import { CockpitSoberano } from '../CockpitSoberano';

// Default mock implementations
const defaultVerdictStream = {
  verdicts: [
    {
      id: 'v1',
      timestamp: new Date().toISOString(),
      verdict_type: 'ALLIANCE_DETECTED',
      severity: 'high',
      description: 'Alliance detected between Agent A and Agent B',
      agent_ids: ['agent-1', 'agent-2'],
      confidence: 0.95,
      provenance: {
        input_hash: 'hash1',
        trajectory: ['step1', 'step2']
      }
    }
  ],
  isConnected: true,
  stats: {
    total: 10,
    critical: 2,
    high: 5,
    medium: 3
  },
  dismissVerdict: vi.fn()
};

const defaultMetrics = {
  metrics: {
    totalAgents: 5,
    activeAgents: 3,
    totalVerdicts: 10,
    criticalVerdicts: 2,
    alliancesDetected: 1,
    deceptionMarkers: 0,
    avgProcessingLatency: 150,
    systemHealth: 'HEALTHY'
  },
  loading: false,
  error: null
};

const defaultGraph = {
  graphData: {
    nodes: [
      { id: 'agent-1', label: 'Agent A', status: 'active' },
      { id: 'agent-2', label: 'Agent B', status: 'active' }
    ],
    edges: [
      { source: 'agent-1', target: 'agent-2', weight: 0.8 }
    ]
  },
  loading: false,
  error: null
};

const defaultCommandBus = {
  sendCommand: vi.fn(),
  loading: false,
  error: null,
  lastCommand: null
};

// Create mocks with ability to override
let mockVerdictStream = { ...defaultVerdictStream };
let mockMetrics = { ...defaultMetrics };
let mockGraph = { ...defaultGraph };
let mockCommandBus = { ...defaultCommandBus };

// Mock hooks to avoid WebSocket and API calls in tests
vi.mock('../hooks/useVerdictStream', () => ({
  useVerdictStream: () => mockVerdictStream
}));

vi.mock('../hooks/useCockpitMetrics', () => ({
  useCockpitMetrics: () => mockMetrics
}));

vi.mock('../hooks/useAllianceGraph', () => ({
  useAllianceGraph: () => mockGraph
}));

vi.mock('../hooks/useCommandBus', () => ({
  useCommandBus: () => mockCommandBus
}));

// Mock child components
vi.mock('../components/SovereignHeader', () => ({
  SovereignHeader: ({ onBack }) => (
    <div data-testid="sovereign-header">
      <button onClick={onBack}>Back</button>
    </div>
  )
}));

vi.mock('../components/VerdictPanel', () => ({
  VerdictPanel: ({ verdicts, onDismiss }) => (
    <div data-testid="verdict-panel">
      {verdicts.map(v => (
        <div key={v.id} data-testid={`verdict-${v.id}`}>
          {v.description}
          <button onClick={() => onDismiss(v.id)}>Dismiss</button>
        </div>
      ))}
    </div>
  )
}));

vi.mock('../components/RelationshipGraph', () => ({
  RelationshipGraph: ({ graphData }) => (
    <div data-testid="relationship-graph">
      {graphData.nodes.length} nodes
    </div>
  )
}));

vi.mock('../components/CommandConsole', () => ({
  CommandConsole: ({ availableAgents }) => (
    <div data-testid="command-console">
      {availableAgents.length} agents
    </div>
  )
}));

vi.mock('../../../shared/DashboardFooter', () => ({
  DashboardFooter: () => <div data-testid="dashboard-footer">Footer</div>
}));

vi.mock('../../../shared/SkipLink', () => ({
  default: ({ children, href }) => <a href={href} data-testid="skip-link">{children}</a>
}));

vi.mock('../../../shared/QueryErrorBoundary', () => ({
  default: ({ children }) => <div>{children}</div>
}));

const createTestQueryClient = () => new QueryClient({
  defaultOptions: {
    queries: { retry: false },
    mutations: { retry: false }
  }
});

describe('CockpitSoberano Dashboard - 100% Coverage', () => {
  let queryClient;

  beforeEach(() => {
    queryClient = createTestQueryClient();
    vi.clearAllMocks();
    
    // Reset mocks to defaults
    mockVerdictStream = { ...defaultVerdictStream, dismissVerdict: vi.fn() };
    mockMetrics = { ...defaultMetrics };
    mockGraph = { ...defaultGraph };
    mockCommandBus = { ...defaultCommandBus, sendCommand: vi.fn() };
  });
  
  afterEach(() => {
    // Reset mocks
    mockVerdictStream = { ...defaultVerdictStream, dismissVerdict: vi.fn() };
    mockMetrics = { ...defaultMetrics };
    mockGraph = { ...defaultGraph };
    mockCommandBus = { ...defaultCommandBus, sendCommand: vi.fn() };
  });

  it('renders main component structure', () => {
    render(
      <QueryClientProvider client={queryClient}>
        <I18nextProvider i18n={i18n}>
          <CockpitSoberano />
        </I18nextProvider>
      </QueryClientProvider>
    );

    expect(screen.getByTestId('sovereign-header')).toBeInTheDocument();
    expect(screen.getByTestId('verdict-panel')).toBeInTheDocument();
    expect(screen.getByTestId('relationship-graph')).toBeInTheDocument();
    expect(screen.getByTestId('command-console')).toBeInTheDocument();
    expect(screen.getByTestId('dashboard-footer')).toBeInTheDocument();
  });

  it('renders skip link for accessibility', () => {
    render(
      <QueryClientProvider client={queryClient}>
        <I18nextProvider i18n={i18n}>
          <CockpitSoberano />
        </I18nextProvider>
      </QueryClientProvider>
    );

    const skipLink = screen.getByTestId('skip-link');
    expect(skipLink).toBeInTheDocument();
    expect(skipLink).toHaveAttribute('href', '#main-content');
  });

  it('renders scanline overlay effect', () => {
    const { container } = render(
      <QueryClientProvider client={queryClient}>
        <I18nextProvider i18n={i18n}>
          <CockpitSoberano />
        </I18nextProvider>
      </QueryClientProvider>
    );

    const scanline = container.querySelector('[class*="scanlineOverlay"]');
    expect(scanline).toBeInTheDocument();
  });

  it('renders main content with proper ARIA role', () => {
    render(
      <QueryClientProvider client={queryClient}>
        <I18nextProvider i18n={i18n}>
          <CockpitSoberano />
        </I18nextProvider>
      </QueryClientProvider>
    );

    const mainContent = screen.getByRole('main');
    expect(mainContent).toBeInTheDocument();
    expect(mainContent).toHaveAttribute('id', 'main-content');
  });

  it('displays verdicts from hook', () => {
    render(
      <QueryClientProvider client={queryClient}>
        <I18nextProvider i18n={i18n}>
          <CockpitSoberano />
        </I18nextProvider>
      </QueryClientProvider>
    );

    expect(screen.getByTestId('verdict-v1')).toBeInTheDocument();
    expect(screen.getByText(/Alliance detected between Agent A and Agent B/)).toBeInTheDocument();
  });

  it('handles verdict dismissal', () => {
    const mockDismiss = vi.fn();
    mockVerdictStream = {
      verdicts: [{ id: 'v1', description: 'Test verdict', timestamp: new Date().toISOString() }],
      isConnected: true,
      stats: {},
      dismissVerdict: mockDismiss
    };

    render(
      <QueryClientProvider client={queryClient}>
        <I18nextProvider i18n={i18n}>
          <CockpitSoberano />
        </I18nextProvider>
      </QueryClientProvider>
    );

    const dismissButton = screen.getByText('Dismiss');
    fireEvent.click(dismissButton);

    expect(mockDismiss).toHaveBeenCalledWith('v1');
  });

  it('passes metrics to SovereignHeader', () => {
    render(
      <QueryClientProvider client={queryClient}>
        <I18nextProvider i18n={i18n}>
          <CockpitSoberano />
        </I18nextProvider>
      </QueryClientProvider>
    );

    expect(screen.getByTestId('sovereign-header')).toBeInTheDocument();
  });

  it('passes graph data to RelationshipGraph', () => {
    render(
      <QueryClientProvider client={queryClient}>
        <I18nextProvider i18n={i18n}>
          <CockpitSoberano />
        </I18nextProvider>
      </QueryClientProvider>
    );

    expect(screen.getByText('2 nodes')).toBeInTheDocument();
  });

  it('extracts available agents from graph nodes', () => {
    render(
      <QueryClientProvider client={queryClient}>
        <I18nextProvider i18n={i18n}>
          <CockpitSoberano />
        </I18nextProvider>
      </QueryClientProvider>
    );

    expect(screen.getByText('2 agents')).toBeInTheDocument();
  });

  it('calls setCurrentView when back button is clicked', () => {
    const mockSetCurrentView = vi.fn();

    render(
      <QueryClientProvider client={queryClient}>
        <I18nextProvider i18n={i18n}>
          <CockpitSoberano setCurrentView={mockSetCurrentView} />
        </I18nextProvider>
      </QueryClientProvider>
    );

    const backButton = screen.getByText('Back');
    fireEvent.click(backButton);

    expect(mockSetCurrentView).toHaveBeenCalledWith('main');
  });

  it('handles missing setCurrentView prop', () => {
    render(
      <QueryClientProvider client={queryClient}>
        <I18nextProvider i18n={i18n}>
          <CockpitSoberano />
        </I18nextProvider>
      </QueryClientProvider>
    );

    const backButton = screen.getByText('Back');
    expect(() => fireEvent.click(backButton)).not.toThrow();
  });

  it('renders with empty verdicts array', () => {
    const { useVerdictStream } = require('../hooks/useVerdictStream');
    
    vi.mocked(useVerdictStream).mockReturnValue({
      verdicts: [],
      isConnected: false,
      stats: {},
      dismissVerdict: vi.fn()
    });

    render(
      <QueryClientProvider client={queryClient}>
        <I18nextProvider i18n={i18n}>
          <CockpitSoberano />
        </I18nextProvider>
      </QueryClientProvider>
    );

    expect(screen.getByTestId('verdict-panel')).toBeInTheDocument();
  });

  it('renders with empty graph data', () => {
    const { useAllianceGraph } = require('../hooks/useAllianceGraph');
    
    vi.mocked(useAllianceGraph).mockReturnValue({
      graphData: { nodes: [], edges: [] },
      loading: false,
      error: null
    });

    render(
      <QueryClientProvider client={queryClient}>
        <I18nextProvider i18n={i18n}>
          <CockpitSoberano />
        </I18nextProvider>
      </QueryClientProvider>
    );

    expect(screen.getByText('0 nodes')).toBeInTheDocument();
    expect(screen.getByText('0 agents')).toBeInTheDocument();
  });

  it('handles loading state from metrics', () => {
    const { useCockpitMetrics } = require('../hooks/useCockpitMetrics');
    
    vi.mocked(useCockpitMetrics).mockReturnValue({
      metrics: {},
      loading: true,
      error: null
    });

    render(
      <QueryClientProvider client={queryClient}>
        <I18nextProvider i18n={i18n}>
          <CockpitSoberano />
        </I18nextProvider>
      </QueryClientProvider>
    );

    expect(screen.getByTestId('sovereign-header')).toBeInTheDocument();
  });

  it('handles loading state from graph', () => {
    const { useAllianceGraph } = require('../hooks/useAllianceGraph');
    
    vi.mocked(useAllianceGraph).mockReturnValue({
      graphData: { nodes: [], edges: [] },
      loading: true,
      error: null
    });

    render(
      <QueryClientProvider client={queryClient}>
        <I18nextProvider i18n={i18n}>
          <CockpitSoberano />
        </I18nextProvider>
      </QueryClientProvider>
    );

    expect(screen.getByTestId('relationship-graph')).toBeInTheDocument();
  });

  it('exports named export CockpitSoberano', async () => {
    const module = await import('../CockpitSoberano');
    expect(module.CockpitSoberano).toBeDefined();
    expect(typeof module.CockpitSoberano).toBe('function');
  });

  it('exports default export', async () => {
    const module = await import('../CockpitSoberano');
    expect(module.default).toBeDefined();
    expect(module.default).toBe(module.CockpitSoberano);
  });

  it('renders left panel with proper aria-label', () => {
    render(
      <QueryClientProvider client={queryClient}>
        <I18nextProvider i18n={i18n}>
          <CockpitSoberano />
        </I18nextProvider>
      </QueryClientProvider>
    );

    const leftPanel = screen.getByRole('region', { name: /verdicts/i });
    expect(leftPanel).toBeInTheDocument();
  });

  it('renders right panel sections', () => {
    const { container } = render(
      <QueryClientProvider client={queryClient}>
        <I18nextProvider i18n={i18n}>
          <CockpitSoberano />
        </I18nextProvider>
      </QueryClientProvider>
    );

    const graphSection = container.querySelector('[class*="graphSection"]');
    const commandSection = container.querySelector('[class*="commandSection"]');
    
    expect(graphSection).toBeInTheDocument();
    expect(commandSection).toBeInTheDocument();
  });

  it('wraps components with QueryErrorBoundary', () => {
    render(
      <QueryClientProvider client={queryClient}>
        <I18nextProvider i18n={i18n}>
          <CockpitSoberano />
        </I18nextProvider>
      </QueryClientProvider>
    );

    // All components should render successfully through boundaries
    expect(screen.getByTestId('sovereign-header')).toBeInTheDocument();
    expect(screen.getByTestId('verdict-panel')).toBeInTheDocument();
    expect(screen.getByTestId('relationship-graph')).toBeInTheDocument();
    expect(screen.getByTestId('command-console')).toBeInTheDocument();
  });

  it('maps graph nodes to available agents correctly', () => {
    const { useAllianceGraph } = require('../hooks/useAllianceGraph');
    
    vi.mocked(useAllianceGraph).mockReturnValue({
      graphData: {
        nodes: [
          { id: 'a1', label: 'Agent One', status: 'active' },
          { id: 'a2', label: 'Agent Two', status: 'idle' },
          { id: 'a3', label: 'Agent Three', status: 'busy' }
        ],
        edges: []
      },
      loading: false,
      error: null
    });

    render(
      <QueryClientProvider client={queryClient}>
        <I18nextProvider i18n={i18n}>
          <CockpitSoberano />
        </I18nextProvider>
      </QueryClientProvider>
    );

    expect(screen.getByText('3 agents')).toBeInTheDocument();
  });

  it('handles complex verdict data structure', () => {
    const { useVerdictStream } = require('../hooks/useVerdictStream');
    
    vi.mocked(useVerdictStream).mockReturnValue({
      verdicts: [
        {
          id: 'v-complex',
          timestamp: '2025-01-01T00:00:00Z',
          verdict_type: 'DECEPTION_DETECTED',
          severity: 'critical',
          description: 'Complex deception pattern',
          agent_ids: ['a1', 'a2', 'a3'],
          confidence: 0.99,
          provenance: {
            input_hash: 'hash123',
            trajectory: ['init', 'analyze', 'conclude'],
            metadata: { key: 'value' }
          }
        }
      ],
      isConnected: true,
      stats: { total: 1, critical: 1, high: 0, medium: 0 },
      dismissVerdict: vi.fn()
    });

    render(
      <QueryClientProvider client={queryClient}>
        <I18nextProvider i18n={i18n}>
          <CockpitSoberano />
        </I18nextProvider>
      </QueryClientProvider>
    );

    expect(screen.getByTestId('verdict-v-complex')).toBeInTheDocument();
  });

  it('handles disconnected state', () => {
    const { useVerdictStream } = require('../hooks/useVerdictStream');
    
    vi.mocked(useVerdictStream).mockReturnValue({
      verdicts: [],
      isConnected: false,
      stats: {},
      dismissVerdict: vi.fn()
    });

    render(
      <QueryClientProvider client={queryClient}>
        <I18nextProvider i18n={i18n}>
          <CockpitSoberano />
        </I18nextProvider>
      </QueryClientProvider>
    );

    expect(screen.getByTestId('verdict-panel')).toBeInTheDocument();
  });

  it('passes systemHealth to SovereignHeader', () => {
    const { useCockpitMetrics } = require('../hooks/useCockpitMetrics');
    
    vi.mocked(useCockpitMetrics).mockReturnValue({
      metrics: {
        systemHealth: 'DEGRADED',
        totalAgents: 5,
        activeAgents: 2
      },
      loading: false,
      error: null
    });

    render(
      <QueryClientProvider client={queryClient}>
        <I18nextProvider i18n={i18n}>
          <CockpitSoberano />
        </I18nextProvider>
      </QueryClientProvider>
    );

    expect(screen.getByTestId('sovereign-header')).toBeInTheDocument();
  });

  it('passes verdictStats to SovereignHeader', () => {
    const { useVerdictStream } = require('../hooks/useVerdictStream');
    
    vi.mocked(useVerdictStream).mockReturnValue({
      verdicts: [],
      isConnected: true,
      stats: { total: 100, critical: 10, high: 20, medium: 70 },
      dismissVerdict: vi.fn()
    });

    render(
      <QueryClientProvider client={queryClient}>
        <I18nextProvider i18n={i18n}>
          <CockpitSoberano />
        </I18nextProvider>
      </QueryClientProvider>
    );

    expect(screen.getByTestId('sovereign-header')).toBeInTheDocument();
  });
});
