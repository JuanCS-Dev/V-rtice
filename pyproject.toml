# ============================================================================
# Vértice Platform - Python Project Configuration
# ============================================================================
# PEP 518 configuration file for Python tooling
# Tools: Black, isort, pytest, coverage, mypy
# ============================================================================

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "vertice-platform"
version = "1.0.0"
description = "Vértice Cybersecurity Platform - AI-powered threat detection and response"
authors = [
    {name = "Vértice Platform Team", email = "dev@vertice.security"}
]
readme = "README.md"
requires-python = ">=3.10"
license = {text = "Proprietary"}
keywords = ["cybersecurity", "ai", "threat-detection", "soc", "incident-response"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Information Technology",
    "Topic :: Security",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]

# ============================================================================
# BLACK - Opinionated Python Code Formatter
# ============================================================================
[tool.black]
line-length = 88
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    # Default excludes
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | env
  | _build
  | buck-out
  | build
  | dist
  | __pycache__

  # Custom excludes
  | \.terraform
  | node_modules
  | migrations
  | LEGADO
  | \.ipynb_checkpoints
)/
'''
# Skip string normalization to preserve single/double quote choice
skip-string-normalization = false
# Force trailing comma for better git diffs
skip-magic-trailing-comma = false


# ============================================================================
# ISORT - Import Statement Organizer
# ============================================================================
[tool.isort]
profile = "black"  # Black-compatible settings
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
split_on_trailing_comma = true

# Import order: stdlib → third-party → first-party → local
known_first_party = ["backend", "frontend", "vertice"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# Skip these directories
skip_glob = [
    "**/.venv/*",
    "**/venv/*",
    "**/env/*",
    "**/__pycache__/*",
    "**/build/*",
    "**/dist/*",
    "**/node_modules/*",
    "**/LEGADO/*",
    "**/.terraform/*",
]

# Force imports on separate lines for better diffs
force_single_line = false
force_sort_within_sections = true
lexicographical = true
order_by_type = false
group_by_package = true


# ============================================================================
# PYTEST - Testing Framework
# ============================================================================
[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests", "backend/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Output options
addopts = [
    "-ra",                    # Show summary of all test outcomes
    "--strict-markers",       # Enforce marker registration
    "--strict-config",        # Enforce config validation
    "--showlocals",           # Show local variables in tracebacks
    "--tb=short",             # Short traceback format
    "-v",                     # Verbose output
    "--cov=backend",          # Coverage for backend
    "--cov-report=term-missing",  # Show missing lines
    "--cov-report=html:htmlcov",  # HTML coverage report
    "--cov-report=xml",       # XML for CI tools
    "--cov-fail-under=70",    # Fail if coverage < 70%
]

# Test markers
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "security: marks tests as security-focused",
    "performance: marks tests as performance benchmarks",
    "smoke: marks tests as smoke tests (quick validation)",
]

# Ignore warnings from dependencies
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]


# ============================================================================
# COVERAGE - Code Coverage Measurement
# ============================================================================
[tool.coverage.run]
source = ["backend"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "*/.venv/*",
    "*/migrations/*",
    "*/LEGADO/*",
]
branch = true  # Measure branch coverage

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"


# ============================================================================
# MYPY - Static Type Checker
# ============================================================================
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Set to true once codebase is fully typed
disallow_incomplete_defs = false
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true
show_column_numbers = true
pretty = true

# Exclude paths
exclude = [
    'venv/',
    'env/',
    '.venv/',
    '__pycache__/',
    'build/',
    'dist/',
    'LEGADO/',
    'node_modules/',
]

# Per-module options
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[[tool.mypy.overrides]]
module = [
    "yara.*",
    "vt.*",
    "shodan.*",
    "neo4j.*",
    "kafka.*",
]
ignore_missing_imports = true


# ============================================================================
# BANDIT - Security Linter
# ============================================================================
[tool.bandit]
exclude_dirs = [
    "/tests/",
    "/venv/",
    "/env/",
    "/.venv/",
    "/LEGADO/",
    "/node_modules/",
]
skips = [
    "B101",  # assert_used - common in tests
    "B601",  # paramiko_calls - used intentionally in offensive modules
]


# ============================================================================
# RUFF - Fast Python Linter (Alternative to Flake8)
# ============================================================================
[tool.ruff]
line-length = 88
target-version = "py310"

# Enable pycodestyle (E), Pyflakes (F), isort (I), pydocstyle (D)
select = [
    "E",   # pycodestyle errors
    "F",   # Pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "W",   # pycodestyle warnings
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
]

ignore = [
    "E501",  # Line too long (handled by Black)
    "E203",  # Whitespace before ':' (Black compatibility)
    "W503",  # Line break before binary operator (Black compatibility)
    "D100",  # Missing docstring in public module (phased approach)
    "D101",  # Missing docstring in public class
    "D102",  # Missing docstring in public method
    "D103",  # Missing docstring in public function
    "D104",  # Missing docstring in public package
]

exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "env",
    "build",
    "dist",
    "LEGADO",
    "node_modules",
    ".terraform",
    "migrations",
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/*" = ["S101"]      # Allow assert in tests


# ============================================================================
# PYDOCSTYLE - Docstring Style Checker
# ============================================================================
[tool.pydocstyle]
convention = "google"  # Google-style docstrings
add_ignore = ["D100", "D101", "D102", "D103", "D104"]  # Phased approach
match = "(?!test_).*\\.py"  # Skip test files
match_dir = "^(?!(\\.venv|venv|env|build|dist|LEGADO|node_modules)).*"
