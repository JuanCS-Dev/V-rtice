#!/bin/bash
set -e

echo "üîç V√âRTICE - CHECKUP DO AMBIENTE DE PRODU√á√ÉO"
echo "=============================================="
echo ""

FAILED=0

# Fun√ß√£o para verificar comando
check_command() {
    local cmd=$1
    local version_flag=$2

    echo -n "Verificando '$cmd'... "
    if command -v "$cmd" &> /dev/null; then
        echo "‚úÖ OK"
        $cmd $version_flag 2>&1 | head -1 | sed 's/^/  ‚îú‚îÄ /'
        return 0
    else
        echo "‚ùå ERRO: '$cmd' n√£o encontrado."
        echo "  ‚îî‚îÄ Instale com: sudo apt install $cmd (Ubuntu/Debian) ou brew install $cmd (macOS)"
        return 1
    fi
}

# Verifica√ß√µes de comandos essenciais
echo "üì¶ DEPEND√äNCIAS:"
echo ""

check_command "node" "--version" || FAILED=1
check_command "npm" "--version" || FAILED=1
check_command "ffmpeg" "-version" || FAILED=1
check_command "jq" "--version" || FAILED=1
check_command "bc" "--version" || FAILED=1
check_command "gcloud" "--version" || FAILED=1
check_command "gh" "--version" || FAILED=1

echo ""
echo "‚òÅÔ∏è  GOOGLE CLOUD:"
echo ""

# Verificar autentica√ß√£o do GCloud
echo -n "Verificando autentica√ß√£o GCloud... "
if gcloud auth list --filter=status:ACTIVE --format="value(account)" 2>/dev/null | grep -q "@"; then
    ACCOUNT=$(gcloud auth list --filter=status:ACTIVE --format="value(account)" 2>/dev/null | head -1)
    echo "‚úÖ OK"
    echo "  ‚îú‚îÄ Conta ativa: $ACCOUNT"
else
    echo "‚ùå ERRO: Nenhuma conta GCloud autenticada."
    echo "  ‚îî‚îÄ Execute: gcloud auth login"
    FAILED=1
fi

# Verificar projeto atual
echo -n "Verificando projeto GCP... "
PROJECT=$(gcloud config get-value project 2>/dev/null)
if [ -n "$PROJECT" ]; then
    echo "‚úÖ OK"
    echo "  ‚îú‚îÄ Projeto: $PROJECT"
else
    echo "‚ùå ERRO: Nenhum projeto GCP configurado."
    echo "  ‚îî‚îÄ Execute: gcloud config set project SEU_PROJETO_ID"
    FAILED=1
fi

# Verificar billing (m√©todo alternativo r√°pido)
if [ -n "$PROJECT" ]; then
    echo -n "Verificando billing no projeto... "

    # Tenta listar APIs habilitadas (prova indireta de billing ativo)
    # Timeout de 5 segundos para evitar travamento
    if timeout 5 gcloud services list --enabled --project="$PROJECT" --limit=1 &> /dev/null; then
        echo "‚úÖ OK"
        echo "  ‚îú‚îÄ Billing est√° ativo (APIs habilitadas)"
        echo "  ‚îî‚îÄ Text-to-Speech API dispon√≠vel para uso"
    else
        # Fallback: Verifica se TTS API j√° est√° habilitada (prova definitiva)
        if gcloud services list --enabled --project="$PROJECT" 2>/dev/null | grep -q "texttospeech.googleapis.com"; then
            echo "‚úÖ OK"
            echo "  ‚îú‚îÄ Billing est√° ativo (Text-to-Speech habilitada)"
            echo "  ‚îî‚îÄ Sistema pronto para gera√ß√£o de narra√ß√£o"
        else
            echo "‚ö†Ô∏è  AVISO: N√£o foi poss√≠vel verificar billing rapidamente."
            echo "  ‚îú‚îÄ Verifique manualmente: https://console.cloud.google.com/billing"
            echo "  ‚îî‚îÄ Se APIs habilitadas funcionam, billing est√° OK"
        fi
    fi
fi

echo ""
echo "=============================================="

if [ $FAILED -eq 1 ]; then
    echo "‚ùå CHECKUP FALHOU. Corrija os erros acima antes de prosseguir."
    exit 1
else
    echo "‚úÖ AMBIENTE VERIFICADO. Pronto para materializa√ß√£o."
    exit 0
fi
