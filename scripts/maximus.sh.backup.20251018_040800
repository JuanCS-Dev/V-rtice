#!/bin/bash
# MAXIMUS Backend Startup Script
# Starts Docker Compose services for new architecture (3 libs + services)

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="/home/juan/vertice-dev"
DOCKER_COMPOSE_FILE="$PROJECT_ROOT/docker-compose.yml"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[✓]${NC} $1"
}

log_error() {
    echo -e "${RED}[✗]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[!]${NC} $1"
}

log_section() {
    echo -e "${CYAN}╔════════════════════════════════════════════╗${NC}"
    echo -e "${CYAN}║${NC} $1"
    echo -e "${CYAN}╚════════════════════════════════════════════╝${NC}"
}

check_docker() {
    if ! command -v docker &> /dev/null; then
        log_error "Docker não encontrado. Instale o Docker primeiro."
        exit 1
    fi
    
    if ! docker compose version &> /dev/null; then
        log_error "Docker Compose não encontrado. Instale o Docker Compose primeiro."
        exit 1
    fi
}

get_service_status() {
    local service=$1
    docker compose ps "$service" --format "{{.Status}}" 2>/dev/null | grep -q "Up" && echo "running" || echo "stopped"
}

count_running_services() {
    docker compose ps --format "{{.Service}}" 2>/dev/null | wc -l
}

start_services() {
    log_section "🚀 Iniciando MAXIMUS Backend - Full Stack"
    echo -e "${CYAN}👸 Penélope: 'Maximus, acorde! Vamos ativar TUDO!'${NC}"
    
    cd "$PROJECT_ROOT"
    
    # Tier 0: Core Infrastructure
    log_info "Penélope: Ativando fundações (Tier 0 - 3 serviços)..."
    docker compose -f "$DOCKER_COMPOSE_FILE" up -d redis postgres qdrant 2>&1 | grep -v "warn" || true
    sleep 3
    
    # Tier 1: Core Services
    log_info "Penélope: Subindo serviços essenciais (Tier 1 - 11 serviços)..."
    docker compose -f "$DOCKER_COMPOSE_FILE" up -d \
        api_gateway sinesp_service cyber_service domain_service \
        ip_intelligence_service nmap_service atlas_service auth_service \
        vuln_scanner_service social_eng_service network_monitor_service 2>&1 | grep -v "warn" || true
    sleep 5
    
    # Tier 2: AI/ML & Threat Intelligence
    log_info "Penélope: Ativando inteligência artificial (Tier 2 - 6 serviços)..."
    docker compose -f "$DOCKER_COMPOSE_FILE" up -d \
        threat_intel_service malware_analysis_service ssl_monitor_service \
        maximus_orchestrator_service maximus_predict maximus_core_service 2>&1 | grep -v "warn" || true
    sleep 5
    
    # Tier 3: OSINT & Monitoring
    log_info "Penélope: Preparando vigilância (Tier 3 - 3 serviços)..."
    docker compose -f "$DOCKER_COMPOSE_FILE" up -d \
        osint-service prometheus grafana 2>&1 | grep -v "warn" || true
    sleep 3
    
    # Tier 4: HCL (Human-Controlled Learning)
    log_info "Penélope: Ativando HCL Stack (Tier 4 - 8 serviços)..."
    docker compose -f "$DOCKER_COMPOSE_FILE" up -d \
        hcl-postgres hcl-kafka zookeeper-immunity hcl-kb-service \
        hcl-analyzer hcl-planner hcl-monitor hcl_executor_service 2>&1 | grep -v "warn" || true
    sleep 3
    
    # Tier 5: IMMUNIS (Adaptive Immunity)
    log_info "Penélope: Liberando sistema imunológico (Tier 5 - 10 serviços)..."
    docker compose -f "$DOCKER_COMPOSE_FILE" up -d \
        postgres-immunity adaptive_immune_system \
        immunis_dendritic_service immunis_neutrophil_service immunis_macrophage_service \
        immunis_helper_t_service immunis_cytotoxic_t_service immunis_bcell_service \
        immunis_nk_cell_service immunis_treg_service 2>&1 | grep -v "warn" || true
    sleep 3
    
    # Tier 6: HSAS (High-Speed Autonomic System)
    log_info "Penélope: Iniciando sistema autônomo (Tier 6 - 5 serviços)..."
    docker compose -f "$DOCKER_COMPOSE_FILE" up -d \
        hsas_service adr_core_service homeostatic_regulation \
        digital_thalamus_service ai_immune_system 2>&1 | grep -v "warn" || true
    sleep 3
    
    # Tier 7: Neuro Stack
    log_info "Penélope: Ativando córtex cerebral (Tier 7 - 12 serviços)..."
    docker compose -f "$DOCKER_COMPOSE_FILE" up -d \
        chemical_sensing_service somatosensory_service vestibular_service \
        visual_cortex_service auditory_cortex_service prefrontal_cortex_service \
        neuromodulation_service memory_consolidation_service strategic_planning_service \
        narrative_manipulation_filter narrative_analysis_service 2>&1 | grep -v "warn" || true
    sleep 3
    
    # Tier 9: Intelligence & Research
    log_info "Penélope: Conectando inteligência avançada (Tier 9 - 5 serviços)..."
    docker compose -f "$DOCKER_COMPOSE_FILE" up -d \
        google_osint_service vuln_intel_service cloud_coordinator_service \
        maximus_integration_service edge_agent_service 2>&1 | grep -v "warn" || true
    sleep 2
    
    log_success "✨ Maximus está TOTALMENTE VIVO - 60+ sistemas operacionais! 👑"
    log_info "Backend cyber-biológico completo: 10 tiers integrados"
}

stop_services() {
    log_section "🛑 Parando MAXIMUS Backend"
    echo -e "${CYAN}👸 Penélope: 'Maximus, hora de dormir. SEM reclamar!'${NC}"
    
    cd "$PROJECT_ROOT"
    docker compose -f "$DOCKER_COMPOSE_FILE" stop
    
    log_success "✅ Maximus desativado. Penélope mantém vigilância! 👸"
}

show_status() {
    log_section "📊 Status dos Serviços MAXIMUS"
    echo -e "${CYAN}👸 Penélope: 'Deixa eu ver como Maximus está se comportando...'${NC}"
    echo ""
    
    cd "$PROJECT_ROOT"
    
    # Tier 0: Core Infrastructure
    echo ""
    echo -e "${CYAN}═══ Tier 0: Infrastructure (3) ═══${NC}"
    
    local tier0=("redis:6379" "postgres:5432" "qdrant:6333")
    local tier0_up=0
    for service_port in "${tier0[@]}"; do
        IFS=':' read -r service port <<< "$service_port"
        local status=$(get_service_status "$service")
        if [ "$status" = "running" ]; then
            log_success "$service: RUNNING → :$port"
            ((tier0_up++))
        else
            log_error "$service: STOPPED"
        fi
    done
    
    # Tier 1: Core Services
    echo ""
    echo -e "${CYAN}═══ Tier 1: Core Services (11) ═══${NC}"
    
    local tier1=(
        "api_gateway:8000"
        "sinesp_service:8102"
        "cyber_service:8103"
        "domain_service:8104"
        "ip_intelligence_service:8105"
        "nmap_service:8106"
        "atlas_service:8109"
        "auth_service:8110"
        "vuln_scanner_service:8111"
        "social_eng_service:8112"
        "network_monitor_service:8120"
    )
    
    local tier1_up=0
    for service_port in "${tier1[@]}"; do
        IFS=':' read -r service port <<< "$service_port"
        local status=$(get_service_status "$service")
        if [ "$status" = "running" ]; then
            if [ "$service" = "api_gateway" ]; then
                log_success "⭐ $service: RUNNING → http://localhost:$port"
            else
                log_success "$service: RUNNING → :$port"
            fi
            ((tier1_up++))
        else
            log_error "$service: STOPPED"
        fi
    done
    
    # Tier 2: AI/ML & Threat Intelligence
    echo ""
    echo -e "${CYAN}═══ Tier 2: AI/ML Services (6) ═══${NC}"
    
    local tier2=(
        "threat_intel_service:8113"
        "malware_analysis_service:8114"
        "ssl_monitor_service:8115"
        "maximus_orchestrator_service:8125"
        "maximus_predict:8126"
        "maximus_core_service:8150"
    )
    
    local tier2_up=0
    for service_port in "${tier2[@]}"; do
        IFS=':' read -r service port <<< "$service_port"
        local status=$(get_service_status "$service")
        if [ "$status" = "running" ]; then
            log_success "$service: RUNNING → :$port"
            ((tier2_up++))
        else
            log_error "$service: STOPPED"
        fi
    done
    
    # Tier 3: OSINT & Monitoring
    echo ""
    echo -e "${CYAN}═══ Tier 3: OSINT & Monitoring (3) ═══${NC}"
    
    local tier3=(
        "osint-service:8036"
        "prometheus:9090"
        "grafana:3000"
    )
    
    local tier3_up=0
    for service_port in "${tier3[@]}"; do
        IFS=':' read -r service port <<< "$service_port"
        local status=$(get_service_status "$service")
        if [ "$status" = "running" ]; then
            log_success "$service: RUNNING → http://localhost:$port"
            ((tier3_up++))
        else
            log_error "$service: STOPPED"
        fi
    done
    
    # Tier 4-9: Advanced Systems (summary only)
    echo ""
    echo -e "${CYAN}═══ Advanced Systems (Tiers 4-9) ═══${NC}"
    
    local tier4_services=("hcl-postgres" "hcl-kafka" "zookeeper-immunity" "hcl-monitor" "hcl_executor_service")
    local tier5_services=("postgres-immunity" "adaptive_immune_system" "immunis_dendritic_service" "immunis_neutrophil_service" "immunis_macrophage_service")
    local tier6_services=("hsas_service" "adr_core_service" "homeostatic_regulation" "digital_thalamus_service" "ai_immune_system")
    local tier7_services=("neuromodulation_service" "memory_consolidation_service" "strategic_planning_service" "prefrontal_cortex_service")
    local tier9_services=("google_osint_service" "vuln_intel_service" "cloud_coordinator_service" "maximus_integration_service" "edge_agent_service")
    
    local tier4_up=0 tier5_up=0 tier6_up=0 tier7_up=0 tier9_up=0
    
    for svc in "${tier4_services[@]}"; do
        [[ "$(get_service_status "$svc")" = "running" ]] && ((tier4_up++))
    done
    
    for svc in "${tier5_services[@]}"; do
        [[ "$(get_service_status "$svc")" = "running" ]] && ((tier5_up++))
    done
    
    for svc in "${tier6_services[@]}"; do
        [[ "$(get_service_status "$svc")" = "running" ]] && ((tier6_up++))
    done
    
    for svc in "${tier7_services[@]}"; do
        [[ "$(get_service_status "$svc")" = "running" ]] && ((tier7_up++))
    done
    
    for svc in "${tier9_services[@]}"; do
        [[ "$(get_service_status "$svc")" = "running" ]] && ((tier9_up++))
    done
    
    echo -e "  Tier 4 (HCL):      ${tier4_up}/${#tier4_services[@]}"
    echo -e "  Tier 5 (IMMUNIS):  ${tier5_up}/${#tier5_services[@]}"
    echo -e "  Tier 6 (HSAS):     ${tier6_up}/${#tier6_services[@]}"
    echo -e "  Tier 7 (Neuro):    ${tier7_up}/${#tier7_services[@]}"
    echo -e "  Tier 9 (Intel):    ${tier9_up}/${#tier9_services[@]}"
    
    # Health Check Summary
    echo ""
    echo -e "${CYAN}═══ Health Status ═══${NC}"
    
    local healthy=$(docker compose ps --format "{{.Health}}" 2>/dev/null | grep "healthy" | wc -l)
    local unhealthy=$(docker compose ps --format "{{.Health}}" 2>/dev/null | grep "unhealthy" | wc -l)
    local starting=$(docker compose ps --format "{{.Health}}" 2>/dev/null | grep "starting" | wc -l)
    
    echo -e "${GREEN}✓ Healthy:${NC} $healthy"
    if [[ "$unhealthy" -gt 0 ]]; then
        echo -e "${RED}✗ Unhealthy:${NC} $unhealthy"
    else
        echo -e "${GREEN}✓ Unhealthy:${NC} 0"
    fi
    if [[ "$starting" -gt 0 ]]; then
        echo -e "${YELLOW}⟳ Starting:${NC} $starting"
    fi
    
    # API Gateway Health Endpoint
    echo ""
    echo -e "${CYAN}═══ API Gateway Health ═══${NC}"
    if curl -sf http://localhost:8000/health > /dev/null 2>&1; then
        echo -e "${GREEN}✓ API Gateway respondendo:${NC} http://localhost:8000/health"
    else
        echo -e "${RED}✗ API Gateway não está respondendo${NC}"
    fi
    
    # Summary
    echo ""
    local total=$(count_running_services)
    local expected=60
    echo -e "${CYAN}═══════════════════════════════════════════${NC}"
    echo -e "${GREEN}Total de serviços ativos:${NC} $total/$expected full stack"
    echo -e ""
    echo -e "  ${BLUE}Core Platform (Tiers 0-3):${NC}"
    echo -e "    Tier 0: $tier0_up/3"
    echo -e "    Tier 1: $tier1_up/11"
    echo -e "    Tier 2: $tier2_up/6"
    echo -e "    Tier 3: $tier3_up/3"
    echo -e ""
    echo -e "  ${BLUE}Advanced Systems (Tiers 4-9):${NC}"
    echo -e "    Tier 4 (HCL):      ${tier4_up}/${#tier4_services[@]}"
    echo -e "    Tier 5 (IMMUNIS):  ${tier5_up}/${#tier5_services[@]}"
    echo -e "    Tier 6 (HSAS):     ${tier6_up}/${#tier6_services[@]}"
    echo -e "    Tier 7 (Neuro):    ${tier7_up}/${#tier7_services[@]}"
    echo -e "    Tier 9 (Intel):    ${tier9_up}/${#tier9_services[@]}"
    echo -e "${CYAN}═══════════════════════════════════════════${NC}"
    
    # Penélope's feedback
    local percentage=$((total * 100 / expected))
    
    if [[ "$percentage" -ge 90 ]]; then
        echo -e "${GREEN}👸 Penélope: 'PERFEITO Maximus! Plataforma cyber-biológica completa!'${NC}"
    elif [[ "$percentage" -ge 70 ]]; then
        echo -e "${YELLOW}👸 Penélope: 'Bom trabalho, mas faltam alguns sistemas...'${NC}"
    elif [[ "$percentage" -ge 50 ]]; then
        echo -e "${YELLOW}👸 Penélope: 'Maximus, metade dos sistemas offline!'${NC}"
    else
        echo -e "${RED}👸 Penélope: 'MAXIMUS! Sistema crítico! ACORDE!'${NC}"
    fi
    echo ""
}

show_logs() {
    local service="${1:-api_gateway}"
    
    log_info "Mostrando logs de: $service"
    echo ""
    
    cd "$PROJECT_ROOT"
    docker compose -f "$DOCKER_COMPOSE_FILE" logs -f "$service"
}

case "${1:-start}" in
    start)
        check_docker
        start_services
        sleep 3
        show_status
        ;;
        
    stop)
        check_docker
        stop_services
        ;;
        
    restart)
        check_docker
        stop_services
        sleep 2
        start_services
        sleep 3
        show_status
        ;;
        
    status)
        check_docker
        show_status
        ;;
        
    logs)
        check_docker
        show_logs "${2:-api_gateway}"
        ;;
        
    *)
        echo "MAXIMUS Backend Manager"
        echo ""
        echo "Uso: maximus {start|stop|restart|status|logs [service]}"
        echo ""
        echo "Comandos:"
        echo "  start    - Inicia todos os serviços"
        echo "  stop     - Para todos os serviços"
        echo "  restart  - Reinicia todos os serviços"
        echo "  status   - Mostra status dos serviços"
        echo "  logs     - Mostra logs (opcional: especificar serviço)"
        echo ""
        echo "Exemplos:"
        echo "  maximus start"
        echo "  maximus status"
        echo "  maximus logs maximus_core_service"
        exit 1
        ;;
esac
