#!/bin/bash
# MAXIMUS Backend Startup Script
# Starts Docker Compose services for new architecture (3 libs + services)

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="/home/juan/vertice-dev"
DOCKER_COMPOSE_FILE="$PROJECT_ROOT/docker-compose.yml"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[‚úì]${NC} $1"
}

log_error() {
    echo -e "${RED}[‚úó]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[!]${NC} $1"
}

log_section() {
    echo -e "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
    echo -e "${CYAN}‚ïë${NC} $1"
    echo -e "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
}

check_docker() {
    if ! command -v docker &> /dev/null; then
        log_error "Docker n√£o encontrado. Instale o Docker primeiro."
        exit 1
    fi
    
    if ! docker compose version &> /dev/null; then
        log_error "Docker Compose n√£o encontrado. Instale o Docker Compose primeiro."
        exit 1
    fi
}

get_service_status() {
    local service=$1
    docker compose ps "$service" --format "{{.Status}}" 2>/dev/null | grep -q "Up" && echo "running" || echo "stopped"
}

count_running_services() {
    docker compose ps --format "{{.Service}}" 2>/dev/null | wc -l
}

start_services() {
    log_section "üöÄ Iniciando MAXIMUS Backend - Full Stack"
    echo -e "${CYAN}üë∏ Pen√©lope: 'Maximus, acorde! Vamos ativar TUDO!'${NC}"
    
    cd "$PROJECT_ROOT"
    
    # Tier 0: Core Infrastructure
    log_info "Pen√©lope: Ativando funda√ß√µes (Tier 0 - 3 servi√ßos)..."
    docker compose -f "$DOCKER_COMPOSE_FILE" up -d redis postgres qdrant 2>&1 | grep -v "warn" || true
    sleep 3
    
    # Tier 1: Core Services
    log_info "Pen√©lope: Subindo servi√ßos essenciais (Tier 1 - 11 servi√ßos)..."
    docker compose -f "$DOCKER_COMPOSE_FILE" up -d \
        api_gateway sinesp_service cyber_service domain_service \
        ip_intelligence_service nmap_service atlas_service auth_service \
        vuln_scanner_service social_eng_service network_monitor_service 2>&1 | grep -v "warn" || true
    sleep 5
    
    # Tier 2: AI/ML & Threat Intelligence
    log_info "Pen√©lope: Ativando intelig√™ncia artificial (Tier 2 - 6 servi√ßos)..."
    docker compose -f "$DOCKER_COMPOSE_FILE" up -d \
        threat_intel_service malware_analysis_service ssl_monitor_service \
        maximus_orchestrator_service maximus_predict maximus_core_service 2>&1 | grep -v "warn" || true
    sleep 5
    
    # Tier 3: OSINT & Monitoring
    log_info "Pen√©lope: Preparando vigil√¢ncia (Tier 3 - 3 servi√ßos)..."
    docker compose -f "$DOCKER_COMPOSE_FILE" up -d \
        osint-service prometheus grafana 2>&1 | grep -v "warn" || true
    sleep 3
    
    # Tier 4: HCL (Human-Controlled Learning)
    log_info "Pen√©lope: Ativando HCL Stack (Tier 4 - 8 servi√ßos)..."
    docker compose -f "$DOCKER_COMPOSE_FILE" up -d \
        hcl-postgres hcl-kafka zookeeper-immunity hcl-kb-service \
        hcl-analyzer hcl-planner hcl-monitor hcl_executor_service 2>&1 | grep -v "warn" || true
    sleep 3
    
    # Tier 5: IMMUNIS (Adaptive Immunity)
    log_info "Pen√©lope: Liberando sistema imunol√≥gico (Tier 5 - 10 servi√ßos)..."
    docker compose -f "$DOCKER_COMPOSE_FILE" up -d \
        postgres-immunity adaptive_immune_system \
        immunis_dendritic_service immunis_neutrophil_service immunis_macrophage_service \
        immunis_helper_t_service immunis_cytotoxic_t_service immunis_bcell_service \
        immunis_nk_cell_service immunis_treg_service 2>&1 | grep -v "warn" || true
    sleep 3
    
    # Tier 6: HSAS (High-Speed Autonomic System)
    log_info "Pen√©lope: Iniciando sistema aut√¥nomo (Tier 6 - 5 servi√ßos)..."
    docker compose -f "$DOCKER_COMPOSE_FILE" up -d \
        hsas_service adr_core_service homeostatic_regulation \
        digital_thalamus_service ai_immune_system 2>&1 | grep -v "warn" || true
    sleep 3
    
    # Tier 7: Neuro Stack
    log_info "Pen√©lope: Ativando c√≥rtex cerebral (Tier 7 - 12 servi√ßos)..."
    docker compose -f "$DOCKER_COMPOSE_FILE" up -d \
        chemical_sensing_service somatosensory_service vestibular_service \
        visual_cortex_service auditory_cortex_service prefrontal_cortex_service \
        neuromodulation_service memory_consolidation_service strategic_planning_service \
        narrative_manipulation_filter narrative_analysis_service 2>&1 | grep -v "warn" || true
    sleep 3
    
    # Tier 9: Intelligence & Research
    log_info "Pen√©lope: Conectando intelig√™ncia avan√ßada (Tier 9 - 5 servi√ßos)..."
    docker compose -f "$DOCKER_COMPOSE_FILE" up -d \
        google_osint_service vuln_intel_service cloud_coordinator_service \
        maximus_integration_service edge_agent_service 2>&1 | grep -v "warn" || true
    sleep 2
    
    log_success "‚ú® Maximus est√° TOTALMENTE VIVO - 60+ sistemas operacionais! üëë"
    log_info "Backend cyber-biol√≥gico completo: 10 tiers integrados"
}

stop_services() {
    log_section "üõë Parando MAXIMUS Backend"
    echo -e "${CYAN}üë∏ Pen√©lope: 'Maximus, hora de dormir. SEM reclamar!'${NC}"
    
    cd "$PROJECT_ROOT"
    docker compose -f "$DOCKER_COMPOSE_FILE" stop
    
    log_success "‚úÖ Maximus desativado. Pen√©lope mant√©m vigil√¢ncia! üë∏"
}

show_status() {
    log_section "üìä Status dos Servi√ßos MAXIMUS"
    echo -e "${CYAN}üë∏ Pen√©lope: 'Deixa eu ver como Maximus est√° se comportando...'${NC}"
    echo ""
    
    cd "$PROJECT_ROOT"
    
    # Tier 0: Infrastructure
    echo ""
    echo -e "${CYAN}‚ïê‚ïê‚ïê Tier 0: Infrastructure (3) ‚ïê‚ïê‚ïê${NC}"
    docker compose ps redis postgres qdrant --format "{{.Service}}\t{{.Status}}" 2>/dev/null | while read svc status; do
        [[ "$status" =~ "Up" ]] && log_success "$svc: RUNNING" || log_error "$svc: STOPPED"
    done
    
    # Tier 1: Core Services (sample)
    echo ""
    echo -e "${CYAN}‚ïê‚ïê‚ïê Tier 1: Core Services (11) ‚ïê‚ïê‚ïê${NC}"
    docker compose ps api_gateway sinesp_service cyber_service domain_service --format "{{.Service}}\t{{.Status}}" 2>/dev/null | while read svc status; do
        [[ "$status" =~ "Up" ]] && log_success "$svc: RUNNING" || log_error "$svc: STOPPED"
    done
    echo -e "  ${CYAN}... (7 more services)${NC}"
    
    # Advanced Systems Summary
    echo ""
    echo -e "${CYAN}‚ïê‚ïê‚ïê Advanced Systems (Tiers 4-9) ‚ïê‚ïê‚ïê${NC}"
    
    local tier4_up=$(docker compose ps hcl-postgres hcl-kafka zookeeper-immunity --format "{{.Status}}" 2>/dev/null | grep -c "Up")
    local tier5_up=$(docker compose ps postgres-immunity adaptive_immune_system --format "{{.Status}}" 2>/dev/null | grep -c "Up")
    local tier6_up=$(docker compose ps hsas_service adr_core_service --format "{{.Status}}" 2>/dev/null | grep -c "Up")
    
    echo -e "  Tier 4 (HCL):      ${tier4_up}/3+ running"
    echo -e "  Tier 5 (IMMUNIS):  ${tier5_up}/2+ running"
    echo -e "  Tier 6 (HSAS):     ${tier6_up}/2+ running"
    
    # Summary
    echo ""
    echo -e "${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    local total=$(docker compose ps --format "{{.Service}}" 2>/dev/null | wc -l)
    echo -e "${GREEN}Total de servi√ßos ativos:${NC} $total/60 full stack"
    echo -e "${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
    
    # API Gateway Check
    echo ""
    if curl -sf http://localhost:8000/health > /dev/null 2>&1; then
        log_success "API Gateway: HEALTHY (http://localhost:8000)"
    else
        log_error "API Gateway: DOWN"
    fi
    
    # Pen√©lope's feedback
    echo ""
    local percentage=$((total * 100 / 60))
    if [[ "$percentage" -ge 90 ]]; then
        echo -e "${GREEN}üë∏ Pen√©lope: 'PERFEITO Maximus! Plataforma cyber-biol√≥gica completa!'${NC}"
    elif [[ "$percentage" -ge 70 ]]; then
        echo -e "${YELLOW}üë∏ Pen√©lope: 'Bom trabalho, mas faltam alguns sistemas...'${NC}"
    else
        echo -e "${RED}üë∏ Pen√©lope: 'MAXIMUS! Sistema cr√≠tico! ACORDE!'${NC}"
    fi
    echo ""
}


show_logs() {
    local service="${1:-api_gateway}"
    
    log_info "Mostrando logs de: $service"
    echo ""
    
    cd "$PROJECT_ROOT"
    docker compose -f "$DOCKER_COMPOSE_FILE" logs -f "$service"
}

case "${1:-start}" in
    start)
        check_docker
        start_services
        sleep 3
        show_status
        ;;
        
    stop)
        check_docker
        stop_services
        ;;
        
    restart)
        check_docker
        stop_services
        sleep 2
        start_services
        sleep 3
        show_status
        ;;
        
    status)
        check_docker
        show_status
        ;;
        
    logs)
        check_docker
        show_logs "${2:-api_gateway}"
        ;;
        
    *)
        echo "MAXIMUS Backend Manager"
        echo ""
        echo "Uso: maximus {start|stop|restart|status|logs [service]}"
        echo ""
        echo "Comandos:"
        echo "  start    - Inicia todos os servi√ßos"
        echo "  stop     - Para todos os servi√ßos"
        echo "  restart  - Reinicia todos os servi√ßos"
        echo "  status   - Mostra status dos servi√ßos"
        echo "  logs     - Mostra logs (opcional: especificar servi√ßo)"
        echo ""
        echo "Exemplos:"
        echo "  maximus start"
        echo "  maximus status"
        echo "  maximus logs maximus_core_service"
        exit 1
        ;;
esac
