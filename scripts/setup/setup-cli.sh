#!/bin/bash

# ==============================================================================
#  SCRIPT DE SETUP AUTOM√ÅTICO PARA A FERRAMENTA `vertice-cli`
#  Cria a estrutura de diret√≥rios e arquivos iniciais.
#  Projeto: V√âRTICE
# ==============================================================================

# Cores
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

CLI_DIR="vertice_cli"

echo -e "${GREEN}Iniciando a estrutura√ß√£o da ferramenta '${YELLOW}${CLI_DIR}${NC}'...${NC}"

# --- 1. Verifica√ß√£o e Cria√ß√£o do Diret√≥rio ---
if [ -d "$CLI_DIR" ]; then
    echo -e "${YELLOW}Aviso: O diret√≥rio '${CLI_DIR}' j√° existe. Nenhuma a√ß√£o ser√° tomada para evitar sobrescrever arquivos.${NC}"
    exit 1
fi
mkdir -p $CLI_DIR
echo -e "-> Diret√≥rio '${GREEN}${CLI_DIR}${NC}' criado."

# --- 2. Gerando requirements.txt ---
cat <<EOF > ${CLI_DIR}/requirements.txt
typer[all]
python-dotenv
google-generativeai
EOF
echo -e "-> Arquivo '${GREEN}requirements.txt${NC}' gerado."

# --- 3. Gerando .env.example ---
cat <<EOF > ${CLI_DIR}/.env.example
GEMINI_API_KEY="SUA_CHAVE_API_VEM_AQUI"
EOF
echo -e "-> Arquivo '${GREEN}.env.example${NC}' gerado."

# --- 4. Gerando o c√≥digo principal cli.py ---
# Usamos 'EOF' com aspas para garantir que o conte√∫do seja escrito literalmente,
# sem que o shell tente interpretar vari√°veis como $PATH.
cat <<'EOF' > ${CLI_DIR}/cli.py
import typer
import os
import google.generativeai as genai
from dotenv import load_dotenv
from pathlib import Path

# Carrega as vari√°veis de ambiente (sua API key)
load_dotenv()

# Configura a API
try:
    genai.configure(api_key=os.environ["GEMINI_API_KEY"])
    model = genai.GenerativeModel('gemini-pro')
except KeyError:
    print("üö® Erro: A vari√°vel de ambiente GEMINI_API_KEY n√£o foi encontrada.")
    print("Crie um arquivo '.env' a partir do '.env.example' e insira sua chave.")
    raise typer.Exit()
except Exception as e:
    print(f"üö® Erro ao configurar a API Gemini: {e}")
    raise typer.Exit()

app = typer.Typer(help="CLI para automa√ß√£o de desenvolvimento do Projeto V√âRTICE, com a IA Gemini.")

@app.command()
def ask(prompt: str):
    """
    Envia um prompt gen√©rico diretamente para o Gemini Pro.
    """
    print("üß† Pensando...")
    try:
        response = model.generate_content(prompt)
        print("\n‚ú® Gemini Pro Responde:")
        print(response.text)
    except Exception as e:
        print(f"üö® Erro ao gerar conte√∫do: {e}")

@app.command()
def review(file_path: Path = typer.Argument(..., help="O caminho para o arquivo a ser analisado.")):
    """
    Pede ao Gemini para fazer um code review de um arquivo local.
    """
    print(f"üîé Analisando o arquivo: {file_path}")

    if not file_path.is_file():
        print(f"üö® Erro: O arquivo '{file_path}' n√£o foi encontrado ou n√£o √© um arquivo v√°lido.")
        raise typer.Exit()

    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()

        # Criando um prompt mais estruturado para a IA
        prompt = f"""
        Como um programador s√™nior e arquiteto de software, fa√ßa um code review detalhado,
        pragm√°tico e direto ao ponto do seguinte arquivo de c√≥digo.
        Identifique poss√≠veis bugs, melhorias de performance, e sugest√µes de refatora√ß√£o ou estilo.

        Arquivo: `{file_path.name}`
        ---
        ```python
        {content}
        ```
        ---
        An√°lise:
        """

        print("üß† Enviando para an√°lise do Gemini Pro...")
        response = model.generate_content(prompt)

        print("\n‚úÖ An√°lise Conclu√≠da:")
        print(response.text)

    except Exception as e:
        print(f"üö® Ocorreu um erro durante a an√°lise: {e}")


if __name__ == "__main__":
    app()
EOF
echo -e "-> C√≥digo principal '${GREEN}cli.py${NC}' gerado."

echo -e "\n${GREEN}=====================================================${NC}"
echo -e "${GREEN}      Estrutura do V√âRTICE CLI criada com sucesso!     ${NC}"
echo -e "${GREEN}=====================================================${NC}"
