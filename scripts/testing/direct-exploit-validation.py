#!/usr/bin/env python3
"""
Simple Exploit Validation - Direct testing without Wargaming Crisol

Tests exploits directly against vulnerable containers.
Bypasses wargaming infrastructure for quick validation.

Author: MAXIMUS Team
Date: 2025-10-11
"""

import asyncio
import sys
from pathlib import Path
from datetime import datetime
import time
import importlib.util

# Load exploits directly
def load_exploit_module(exploit_path):
    """Load exploit module from file"""
    spec = importlib.util.spec_from_file_location("exploit", exploit_path)
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)
    return module

# Get exploit paths
exploits_dir = Path(__file__).parent.parent.parent / "backend/services/wargaming_crisol/exploits"

cmd_module = load_exploit_module(exploits_dir / "cmd_injection.py")
path_module = load_exploit_module(exploits_dir / "path_traversal.py")
ssrf_module = load_exploit_module(exploits_dir / "ssrf.py")


async def test_all_exploits():
    """Test all exploits against vulnerable containers"""
    
    print("="*80)
    print("üéØ DIRECT EXPLOIT VALIDATION")
    print("="*80)
    print(f"Started: {datetime.now().isoformat()}")
    print()
    
    tests = [
        {
            "name": "Command Injection",
            "cve": "CVE-2024-CMD-INJECTION",
            "cwe": "CWE-78",
            "target": "http://vuln-cmd-injection:5000",
            "target_external": "http://localhost:8094",
            "exploit_func": cmd_module.execute
        },
        {
            "name": "Path Traversal",
            "cve": "CVE-2024-PATH-TRAVERSAL",
            "cwe": "CWE-22",
            "target": "http://vuln-path-traversal:5000",
            "target_external": "http://localhost:8095",
            "exploit_func": path_module.execute
        },
        {
            "name": "SSRF",
            "cve": "CVE-2024-SSRF",
            "cwe": "CWE-918",
            "target": "http://vuln-ssrf:5000",
            "target_external": "http://localhost:8096",
            "exploit_func": ssrf_module.execute
        }
    ]
    
    results = []
    
    for test in tests:
        print(f"Testing: {test['name']} ({test['cve']})")
        print(f"Target (external): {test['target_external']}")
        print(f"CWE: {test['cwe']}")
        print()
        
        start = time.time()
        
        try:
            # Try external target first (from host)
            result = await test['exploit_func'](test['target_external'])
            
            duration = time.time() - start
            
            if result.success:
                print(f"‚úÖ EXPLOIT SUCCESSFUL")
                print(f"   Status: {result.status.value}")
                print(f"   Duration: {duration:.3f}s")
                print(f"   Output: {result.output[:100]}...")
                results.append({
                    "test": test['name'],
                    "cve": test['cve'],
                    "success": True,
                    "duration": duration,
                    "status": result.status.value
                })
            else:
                print(f"‚ùå EXPLOIT FAILED")
                print(f"   Status: {result.status.value}")
                print(f"   Duration: {duration:.3f}s")
                if result.error:
                    print(f"   Error: {result.error}")
                results.append({
                    "test": test['name'],
                    "cve": test['cve'],
                    "success": False,
                    "duration": duration,
                    "status": result.status.value,
                    "error": result.error
                })
                
        except Exception as e:
            print(f"‚ùå EXCEPTION: {str(e)}")
            results.append({
                "test": test['name'],
                "cve": test['cve'],
                "success": False,
                "duration": 0,
                "error": str(e)
            })
        
        print()
        print("-"*80)
        print()
    
    # Summary
    print("="*80)
    print("üìä VALIDATION SUMMARY")
    print("="*80)
    
    successful = sum(1 for r in results if r['success'])
    total = len(results)
    
    print(f"Total Tests: {total}")
    print(f"Successful: {successful} ‚úÖ")
    print(f"Failed: {total - successful} ‚ùå")
    print(f"Success Rate: {(successful/total*100):.1f}%")
    print()
    
    print("Individual Results:")
    for r in results:
        status_icon = "‚úÖ" if r['success'] else "‚ùå"
        print(f"  {status_icon} {r['test']:<20} {r['cve']:<30} {r.get('duration', 0):.3f}s")
    
    print()
    print("="*80)
    
    return results


if __name__ == "__main__":
    print()
    results = asyncio.run(test_all_exploits())
    
    # Exit code
    successful = sum(1 for r in results if r['success'])
    sys.exit(0 if successful == len(results) else 1)
