#!/bin/bash
set -euo pipefail

# ============================================================
# TRIAGE_VIOLATIONS_V2.sh - Simplified & Fast
# DOUTRINA VÃ‰RTICE - FASE B: DIA 1
# ============================================================

REPO_ROOT="/home/juan/vertice-dev"
BACKEND_DIR="$REPO_ROOT/backend/services"
REPORTS_DIR="$REPO_ROOT/violation_reports"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}============================================================${NC}"
echo -e "${BLUE}  DOUTRINA VÃ‰RTICE - TRIAGE SIMPLIFICADO${NC}"
echo -e "${BLUE}============================================================${NC}"
echo ""

# Clean and prepare
rm -rf "$REPORTS_DIR"/*
mkdir -p "$REPORTS_DIR"

# ============================================================
# CATEGORIA 1: Abstract Methods (from previous audit)
# ============================================================
echo -e "${YELLOW}[1/8]${NC} Abstract Methods..."
cat > "$REPORTS_DIR/1_abstract_methods.txt" << 'EOF'
# CATEGORIA 1: Abstract Methods (ABC)
# Status: âœ… ACCEPTABLE
# Justificativa: Pattern de design Python - ABC com @abstractmethod

/home/juan/vertice-dev/backend/services/maximus_core_service/federated_learning/model_adapters.py:55:        pass
/home/juan/vertice-dev/backend/services/maximus_core_service/federated_learning/model_adapters.py:65:        pass
/home/juan/vertice-dev/backend/services/maximus_core_service/federated_learning/model_adapters.py:91:        pass
/home/juan/vertice-dev/backend/services/maximus_core_service/consciousness/esgt/spm/base.py:188:        pass
/home/juan/vertice-dev/backend/services/maximus_core_service/training/data_preprocessor.py:77:        pass
/home/juan/vertice-dev/backend/services/maximus_core_service/xai/base.py:147:        pass
/home/juan/vertice-dev/backend/services/maximus_core_service/ethics/base.py:193:        pass
/home/juan/vertice-dev/backend/services/osint_service/scrapers/base_scraper.py:32:        pass
/home/juan/vertice-dev/backend/services/osint_service/scrapers/base_scraper.py:45:        pass
/home/juan/vertice-dev/backend/services/adr_core_service/connectors/base.py:32:        pass
/home/juan/vertice-dev/backend/services/adr_core_service/connectors/base.py:41:        pass
/home/juan/vertice-dev/backend/services/adr_core_service/connectors/base.py:50:        pass
EOF
COUNT_1=$(grep "^/" "$REPORTS_DIR/1_abstract_methods.txt" | wc -l)
echo -e "  Found: ${GREEN}$COUNT_1${NC} abstract methods"

# ============================================================
# CATEGORIA 2: Auto-generated Code
# ============================================================
echo -e "${YELLOW}[2/8]${NC} Auto-generated Code..."
{
    echo "# CATEGORIA 2: Auto-generated Code"
    echo "# Status: âœ… ACCEPTABLE"
    echo ""
    find "$BACKEND_DIR" -type f \( -name "*_pb2.py" -o -name "*_pb2_grpc.py" \) 2>/dev/null || true
} > "$REPORTS_DIR/2_autogenerated.txt"
COUNT_2=$(grep "\.py$" "$REPORTS_DIR/2_autogenerated.txt" 2>/dev/null | wc -l)
echo -e "  Found: ${GREEN}$COUNT_2${NC} auto-generated files"

# ============================================================
# CATEGORIA 3: Pydantic Config Classes
# ============================================================
echo -e "${YELLOW}[3/8]${NC} Config Classes..."
{
    echo "# CATEGORIA 3: Pydantic/Config Classes"
    echo "# Status: âœ… ACCEPTABLE"
    echo ""
    grep -r "class.*Config:" "$BACKEND_DIR" --include="*.py" | grep -v "tests/" | head -20
} > "$REPORTS_DIR/3_config_classes.txt" 2>/dev/null || true
COUNT_3=$(grep ":" "$REPORTS_DIR/3_config_classes.txt" 2>/dev/null | grep -v "^#" | wc -l)
echo -e "  Found: ${GREEN}$COUNT_3${NC} config classes"

# ============================================================
# CATEGORIA 4: Test Fixtures
# ============================================================
echo -e "${YELLOW}[4/8]${NC} Test Fixtures..."
{
    echo "# CATEGORIA 4: Test Fixtures"
    echo "# Status: âœ… ACCEPTABLE"
    echo ""
    find "$BACKEND_DIR" -path "*/tests/*.py" -type f | head -20
} > "$REPORTS_DIR/4_test_fixtures.txt"
COUNT_4=$(grep "\.py$" "$REPORTS_DIR/4_test_fixtures.txt" | wc -l)
echo -e "  Found: ${GREEN}$COUNT_4${NC} test files"

# ============================================================
# CATEGORIA 5: Silent Exception Handlers - CRITICAL
# ============================================================
echo -e "${YELLOW}[5/8]${NC} Silent Exceptions (CRITICAL)..."
{
    echo "# CATEGORIA 5: Silent Exception Handlers"
    echo "# Status: ðŸ”´ CRITICAL"
    echo ""

    # Find except: pass patterns
    cd "$BACKEND_DIR"
    for file in $(find . -name "*.py" -type f ! -path "*/tests/*" ! -path "*/__pycache__/*"); do
        # Simple grep for except followed by pass
        grep -B1 "^\s*except" "$file" 2>/dev/null | grep -A1 "except" | grep -q "pass" && echo "$BACKEND_DIR/$file" || true
    done | sort -u
} > "$REPORTS_DIR/5_silent_exceptions.txt"
COUNT_5=$(grep "\.py$" "$REPORTS_DIR/5_silent_exceptions.txt" | wc -l)
echo -e "  Found: ${RED}$COUNT_5${NC} files with silent exceptions"

# ============================================================
# CATEGORIA 6: Production TODOs - HIGH
# ============================================================
echo -e "${YELLOW}[6/8]${NC} Production TODOs (HIGH)..."
{
    echo "# CATEGORIA 6: Production TODOs"
    echo "# Status: ðŸŸ  HIGH"
    echo ""
    grep -r "TODO\|FIXME\|HACK" "$BACKEND_DIR" --include="*.py" --exclude-dir=tests --exclude-dir=__pycache__ 2>/dev/null || true
} > "$REPORTS_DIR/6_production_todos.txt"
COUNT_6=$(grep ":" "$REPORTS_DIR/6_production_todos.txt" | grep -v "^#" | wc -l)
echo -e "  Found: ${YELLOW}$COUNT_6${NC} TODOs/FIXMEs/HACKs"

# ============================================================
# CATEGORIA 7: Empty pass statements - CRITICAL
# ============================================================
echo -e "${YELLOW}[7/8]${NC} Empty Implementations (CRITICAL)..."
{
    echo "# CATEGORIA 7: Empty pass Statements"
    echo "# Status: ðŸ”´ NEEDS REVIEW"
    echo ""
    grep -r "^\s*pass\s*$" "$BACKEND_DIR" --include="*.py" --exclude-dir=tests --exclude-dir=__pycache__ | head -100
} > "$REPORTS_DIR/7_empty_pass.txt" 2>/dev/null || true
COUNT_7=$(grep ":" "$REPORTS_DIR/7_empty_pass.txt" | grep -v "^#" | wc -l)
echo -e "  Found: ${RED}$COUNT_7${NC} pass statements (sample)"

# ============================================================
# CATEGORIA 8: NotImplementedError - CRITICAL
# ============================================================
echo -e "${YELLOW}[8/8]${NC} NotImplementedError (CRITICAL)..."
{
    echo "# CATEGORIA 8: NotImplementedError"
    echo "# Status: ðŸ”´ CRITICAL"
    echo ""
    grep -r "NotImplementedError" "$BACKEND_DIR" --include="*.py" --exclude-dir=tests --exclude-dir=__pycache__ 2>/dev/null || true
} > "$REPORTS_DIR/8_not_implemented.txt"
COUNT_8=$(grep ":" "$REPORTS_DIR/8_not_implemented.txt" | grep -v "^#" | wc -l)
echo -e "  Found: ${RED}$COUNT_8${NC} NotImplementedError"

# ============================================================
# Generate Summary
# ============================================================
echo ""
echo -e "${BLUE}============================================================${NC}"
echo -e "${BLUE}  SUMMARY${NC}"
echo -e "${BLUE}============================================================${NC}"

TOTAL_ACCEPTABLE=$((COUNT_1 + COUNT_2 + COUNT_3 + COUNT_4))
TOTAL_CRITICAL=$((COUNT_5 + COUNT_8))
TOTAL_HIGH=$COUNT_6
TOTAL_REVIEW=$COUNT_7

{
    echo "# TRIAGE SUMMARY - DOUTRINA VÃ‰RTICE"
    echo "# Generated: $(date '+%Y-%m-%d %H:%M:%S')"
    echo ""
    echo "## Overview"
    echo ""
    echo "| Category | Count | Status |"
    echo "|----------|-------|--------|"
    echo "| âœ… ACCEPTABLE | $TOTAL_ACCEPTABLE | Abstract methods, generated code, configs, test files |"
    echo "| ðŸ”´ CRITICAL | $((COUNT_5 + COUNT_8)) | Silent exceptions ($COUNT_5) + NotImplementedError ($COUNT_8) |"
    echo "| ðŸŸ  HIGH | $COUNT_6 | Production TODOs/FIXMEs/HACKs |"
    echo "| ðŸŸ¡ REVIEW | $COUNT_7 | Empty pass statements (need manual review) |"
    echo ""
    echo "## Breakdown"
    echo ""
    echo "### âœ… ACCEPTABLE ($TOTAL_ACCEPTABLE)"
    echo "- Abstract Methods: $COUNT_1"
    echo "- Auto-generated: $COUNT_2"
    echo "- Config Classes: $COUNT_3"
    echo "- Test Files: $COUNT_4"
    echo ""
    echo "### ðŸ”´ CRITICAL ($((COUNT_5 + COUNT_8)))"
    echo "- Silent Exceptions: $COUNT_5 files"
    echo "- NotImplementedError: $COUNT_8 occurrences"
    echo ""
    echo "### ðŸŸ  HIGH ($COUNT_6)"
    echo "- Production TODOs: $COUNT_6"
    echo ""
    echo "### ðŸŸ¡ REVIEW ($COUNT_7)"
    echo "- Empty pass: $COUNT_7 (sample of 100)"
    echo ""
    echo "## Next Steps"
    echo ""
    echo "1. **DIA 2**: Fix silent exception handlers in $COUNT_5 files"
    echo "2. **DIA 3**: Fix $COUNT_8 NotImplementedError"
    echo "3. **DIA 4**: Resolve $COUNT_6 TODOs or convert to GitHub issues"
    echo "4. **Manual Review**: Categorize $COUNT_7 pass statements"
    echo "5. **DIA 5**: Document acceptable exceptions"
    echo ""
} > "$REPORTS_DIR/TRIAGE_SUMMARY.md"

cat "$REPORTS_DIR/TRIAGE_SUMMARY.md"

echo ""
echo -e "${GREEN}âœ… Triage complete!${NC}"
echo -e "Reports in: ${BLUE}$REPORTS_DIR/${NC}"
