"""
Tests for Vulnerability Scanner
"""

import asyncio
import pytest
from pathlib import Path
from backend.shared.security_tools.vulnerability_scanner import (
    VulnerabilityScanner,
    VulnerabilitySeverity,
    scan_dependencies
)


@pytest.mark.asyncio
async def test_severity_classification():
    """Test CVSS score classification"""
    scanner = VulnerabilityScanner()
    
    assert scanner._classify_severity(9.5) == VulnerabilitySeverity.CRITICAL
    assert scanner._classify_severity(7.5) == VulnerabilitySeverity.HIGH
    assert scanner._classify_severity(5.0) == VulnerabilitySeverity.MEDIUM
    assert scanner._classify_severity(2.0) == VulnerabilitySeverity.LOW
    assert scanner._classify_severity(None) == VulnerabilitySeverity.UNKNOWN


@pytest.mark.asyncio
async def test_package_counting(tmp_path):
    """Test requirements.txt package counting"""
    req_file = tmp_path / "requirements.txt"
    req_file.write_text("fastapi==0.100.0\npydantic==2.0.0\n# comment\n\nrequests==2.31.0")
    
    scanner = VulnerabilityScanner(requirements_path=req_file)
    assert scanner._count_packages() == 3


@pytest.mark.asyncio
async def test_fail_severities():
    """Test fail severity threshold logic"""
    scanner = VulnerabilityScanner(fail_on_severity=VulnerabilitySeverity.HIGH)
    fail_sevs = scanner._get_fail_severities()
    
    assert VulnerabilitySeverity.CRITICAL in fail_sevs
    assert VulnerabilitySeverity.HIGH in fail_sevs
    assert VulnerabilitySeverity.MEDIUM not in fail_sevs


def test_scanner_instantiation():
    """Test scanner can be instantiated with default config"""
    scanner = VulnerabilityScanner()
    assert scanner.requirements_path == Path("requirements.txt")
    assert scanner.fail_on_severity == VulnerabilitySeverity.HIGH
    assert scanner.ignore_ids == []
