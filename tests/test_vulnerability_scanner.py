"""
Tests for Vulnerability Scanner
"""

import asyncio
import pytest
from pathlib import Path
from backend.shared.security_tools.vulnerability_scanner import (
    VulnerabilityScanner,
    VulnerabilitySeverity,
    VulnerabilityRecord,
    ScanResult,
    scan_dependencies
)


@pytest.mark.asyncio
async def test_severity_classification():
    """Test CVSS score classification"""
    scanner = VulnerabilityScanner()
    
    assert scanner._classify_severity(9.5) == VulnerabilitySeverity.CRITICAL
    assert scanner._classify_severity(9.0) == VulnerabilitySeverity.CRITICAL
    assert scanner._classify_severity(7.5) == VulnerabilitySeverity.HIGH
    assert scanner._classify_severity(7.0) == VulnerabilitySeverity.HIGH
    assert scanner._classify_severity(5.0) == VulnerabilitySeverity.MEDIUM
    assert scanner._classify_severity(4.0) == VulnerabilitySeverity.MEDIUM
    assert scanner._classify_severity(2.0) == VulnerabilitySeverity.LOW
    assert scanner._classify_severity(0.1) == VulnerabilitySeverity.LOW
    assert scanner._classify_severity(None) == VulnerabilitySeverity.UNKNOWN


@pytest.mark.asyncio
async def test_severity_from_description():
    """Test severity classification from description"""
    scanner = VulnerabilityScanner()
    
    assert scanner._classify_severity_from_aliases({"description": "critical vulnerability"}) == VulnerabilitySeverity.CRITICAL
    assert scanner._classify_severity_from_aliases({"description": "high severity issue"}) == VulnerabilitySeverity.HIGH
    assert scanner._classify_severity_from_aliases({"description": "medium impact bug"}) == VulnerabilitySeverity.MEDIUM
    assert scanner._classify_severity_from_aliases({"description": "moderate problem"}) == VulnerabilitySeverity.MEDIUM
    assert scanner._classify_severity_from_aliases({"description": "low risk"}) == VulnerabilitySeverity.LOW
    assert scanner._classify_severity_from_aliases({"description": "some bug"}) == VulnerabilitySeverity.UNKNOWN


@pytest.mark.asyncio
async def test_package_counting(tmp_path):
    """Test requirements.txt package counting"""
    req_file = tmp_path / "requirements.txt"
    req_file.write_text("fastapi==0.100.0\npydantic==2.0.0\n# comment\n\nrequests==2.31.0")
    
    scanner = VulnerabilityScanner(requirements_path=req_file)
    assert scanner._count_packages() == 3


@pytest.mark.asyncio
async def test_package_counting_empty(tmp_path):
    """Test counting with empty file"""
    req_file = tmp_path / "requirements.txt"
    req_file.write_text("# only comments\n\n")
    
    scanner = VulnerabilityScanner(requirements_path=req_file)
    assert scanner._count_packages() == 0


@pytest.mark.asyncio
async def test_package_counting_missing_file():
    """Test counting with missing file"""
    scanner = VulnerabilityScanner(requirements_path=Path("/nonexistent/requirements.txt"))
    assert scanner._count_packages() == 0


@pytest.mark.asyncio
async def test_fail_severities():
    """Test fail severity threshold logic"""
    scanner = VulnerabilityScanner(fail_on_severity=VulnerabilitySeverity.HIGH)
    fail_sevs = scanner._get_fail_severities()
    
    assert VulnerabilitySeverity.CRITICAL in fail_sevs
    assert VulnerabilitySeverity.HIGH in fail_sevs
    assert VulnerabilitySeverity.MEDIUM not in fail_sevs
    assert VulnerabilitySeverity.LOW not in fail_sevs


@pytest.mark.asyncio
async def test_fail_severities_critical_only():
    """Test fail on critical only"""
    scanner = VulnerabilityScanner(fail_on_severity=VulnerabilitySeverity.CRITICAL)
    fail_sevs = scanner._get_fail_severities()
    
    assert VulnerabilitySeverity.CRITICAL in fail_sevs
    assert VulnerabilitySeverity.HIGH not in fail_sevs


@pytest.mark.asyncio
async def test_fail_severities_medium():
    """Test fail on medium and above"""
    scanner = VulnerabilityScanner(fail_on_severity=VulnerabilitySeverity.MEDIUM)
    fail_sevs = scanner._get_fail_severities()
    
    assert VulnerabilitySeverity.CRITICAL in fail_sevs
    assert VulnerabilitySeverity.HIGH in fail_sevs
    assert VulnerabilitySeverity.MEDIUM in fail_sevs
    assert VulnerabilitySeverity.LOW not in fail_sevs


def test_scanner_instantiation():
    """Test scanner can be instantiated with default config"""
    scanner = VulnerabilityScanner()
    assert scanner.requirements_path == Path("requirements.txt")
    assert scanner.fail_on_severity == VulnerabilitySeverity.HIGH
    assert scanner.ignore_ids == []


def test_scanner_custom_config():
    """Test scanner with custom configuration"""
    scanner = VulnerabilityScanner(
        requirements_path=Path("/custom/req.txt"),
        ignore_ids=["CVE-2021-1234"],
        fail_on_severity=VulnerabilitySeverity.CRITICAL
    )
    assert scanner.requirements_path == Path("/custom/req.txt")
    assert scanner.fail_on_severity == VulnerabilitySeverity.CRITICAL
    assert "CVE-2021-1234" in scanner.ignore_ids


def test_vulnerability_record_creation():
    """Test VulnerabilityRecord model"""
    vuln = VulnerabilityRecord(
        package="test-package",
        version="1.0.0",
        vulnerability_id="CVE-2024-0001",
        severity=VulnerabilitySeverity.HIGH,
        cvss_score=8.5,
        description="Test vulnerability",
        fix_available=True,
        fixed_in="1.0.1",
        scanner="safety"
    )
    assert vuln.package == "test-package"
    assert vuln.severity == VulnerabilitySeverity.HIGH
    assert vuln.cvss_score == 8.5
    assert vuln.fix_available is True


def test_scan_result_creation():
    """Test ScanResult model"""
    from datetime import datetime
    
    result = ScanResult(
        total_packages=10,
        vulnerable_packages=2,
        vulnerabilities=[],
        severity_breakdown={
            VulnerabilitySeverity.CRITICAL: 0,
            VulnerabilitySeverity.HIGH: 1,
            VulnerabilitySeverity.MEDIUM: 1,
            VulnerabilitySeverity.LOW: 0,
            VulnerabilitySeverity.UNKNOWN: 0,
        },
        scan_duration_seconds=5.5,
        scanners_used=["safety"],
        scan_passed=False
    )
    assert result.total_packages == 10
    assert result.vulnerable_packages == 2
    assert result.scan_passed is False
    assert result.scan_duration_seconds == 5.5
    assert "safety" in result.scanners_used


def test_severity_enum():
    """Test VulnerabilitySeverity enum values"""
    assert VulnerabilitySeverity.CRITICAL.value == "critical"
    assert VulnerabilitySeverity.HIGH.value == "high"
    assert VulnerabilitySeverity.MEDIUM.value == "medium"
    assert VulnerabilitySeverity.LOW.value == "low"
    assert VulnerabilitySeverity.UNKNOWN.value == "unknown"


@pytest.mark.asyncio
async def test_scan_dependencies_defaults():
    """Test scan_dependencies function with defaults"""
    # This will fail if requirements.txt doesn't exist, but tests the function signature
    try:
        await scan_dependencies()
    except (RuntimeError, FileNotFoundError):
        pass  # Expected if scanners not installed or file missing


@pytest.mark.asyncio
async def test_scan_dependencies_custom_path(tmp_path):
    """Test scan_dependencies with custom path"""
    req_file = tmp_path / "custom_requirements.txt"
    req_file.write_text("requests==2.31.0\n")
    
    try:
        result = await scan_dependencies(requirements_path=req_file, fail_on_high=False)
        assert isinstance(result, ScanResult)
    except RuntimeError:
        pass  # Expected if scanners not installed


@pytest.mark.asyncio
async def test_severity_boundary_values():
    """Test CVSS score boundary values"""
    scanner = VulnerabilityScanner()
    
    # Test exact boundaries
    assert scanner._classify_severity(10.0) == VulnerabilitySeverity.CRITICAL
    assert scanner._classify_severity(8.9) == VulnerabilitySeverity.HIGH
    assert scanner._classify_severity(6.9) == VulnerabilitySeverity.MEDIUM
    assert scanner._classify_severity(3.9) == VulnerabilitySeverity.LOW
    assert scanner._classify_severity(0.0) == VulnerabilitySeverity.LOW
