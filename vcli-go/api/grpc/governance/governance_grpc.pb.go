// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: governance.proto

package governance

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GovernanceService_HealthCheck_FullMethodName          = "/vertice.governance.v1.GovernanceService/HealthCheck"
	GovernanceService_CreateSession_FullMethodName        = "/vertice.governance.v1.GovernanceService/CreateSession"
	GovernanceService_CloseSession_FullMethodName         = "/vertice.governance.v1.GovernanceService/CloseSession"
	GovernanceService_ListPendingDecisions_FullMethodName = "/vertice.governance.v1.GovernanceService/ListPendingDecisions"
	GovernanceService_GetDecision_FullMethodName          = "/vertice.governance.v1.GovernanceService/GetDecision"
	GovernanceService_ApproveDecision_FullMethodName      = "/vertice.governance.v1.GovernanceService/ApproveDecision"
	GovernanceService_RejectDecision_FullMethodName       = "/vertice.governance.v1.GovernanceService/RejectDecision"
	GovernanceService_EscalateDecision_FullMethodName     = "/vertice.governance.v1.GovernanceService/EscalateDecision"
	GovernanceService_GetMetrics_FullMethodName           = "/vertice.governance.v1.GovernanceService/GetMetrics"
	GovernanceService_GetSessionStats_FullMethodName      = "/vertice.governance.v1.GovernanceService/GetSessionStats"
	GovernanceService_StreamDecisions_FullMethodName      = "/vertice.governance.v1.GovernanceService/StreamDecisions"
	GovernanceService_StreamEvents_FullMethodName         = "/vertice.governance.v1.GovernanceService/StreamEvents"
)

// GovernanceServiceClient is the client API for GovernanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// GovernanceService provides ethical AI decision review via Human-in-the-Loop
type GovernanceServiceClient interface {
	// Health check
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Session management
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
	CloseSession(ctx context.Context, in *CloseSessionRequest, opts ...grpc.CallOption) (*CloseSessionResponse, error)
	// Decision operations
	ListPendingDecisions(ctx context.Context, in *ListPendingDecisionsRequest, opts ...grpc.CallOption) (*ListPendingDecisionsResponse, error)
	GetDecision(ctx context.Context, in *GetDecisionRequest, opts ...grpc.CallOption) (*GetDecisionResponse, error)
	ApproveDecision(ctx context.Context, in *ApproveDecisionRequest, opts ...grpc.CallOption) (*ApproveDecisionResponse, error)
	RejectDecision(ctx context.Context, in *RejectDecisionRequest, opts ...grpc.CallOption) (*RejectDecisionResponse, error)
	EscalateDecision(ctx context.Context, in *EscalateDecisionRequest, opts ...grpc.CallOption) (*EscalateDecisionResponse, error)
	// Metrics
	GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error)
	GetSessionStats(ctx context.Context, in *GetSessionStatsRequest, opts ...grpc.CallOption) (*GetSessionStatsResponse, error)
	// Real-time decision stream (Server-side streaming)
	StreamDecisions(ctx context.Context, in *StreamDecisionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DecisionEvent], error)
	// Real-time events stream (Server-side streaming)
	StreamEvents(ctx context.Context, in *StreamEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GovernanceEvent], error)
}

type governanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGovernanceServiceClient(cc grpc.ClientConnInterface) GovernanceServiceClient {
	return &governanceServiceClient{cc}
}

func (c *governanceServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, GovernanceService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *governanceServiceClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateSessionResponse)
	err := c.cc.Invoke(ctx, GovernanceService_CreateSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *governanceServiceClient) CloseSession(ctx context.Context, in *CloseSessionRequest, opts ...grpc.CallOption) (*CloseSessionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloseSessionResponse)
	err := c.cc.Invoke(ctx, GovernanceService_CloseSession_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *governanceServiceClient) ListPendingDecisions(ctx context.Context, in *ListPendingDecisionsRequest, opts ...grpc.CallOption) (*ListPendingDecisionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPendingDecisionsResponse)
	err := c.cc.Invoke(ctx, GovernanceService_ListPendingDecisions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *governanceServiceClient) GetDecision(ctx context.Context, in *GetDecisionRequest, opts ...grpc.CallOption) (*GetDecisionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDecisionResponse)
	err := c.cc.Invoke(ctx, GovernanceService_GetDecision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *governanceServiceClient) ApproveDecision(ctx context.Context, in *ApproveDecisionRequest, opts ...grpc.CallOption) (*ApproveDecisionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ApproveDecisionResponse)
	err := c.cc.Invoke(ctx, GovernanceService_ApproveDecision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *governanceServiceClient) RejectDecision(ctx context.Context, in *RejectDecisionRequest, opts ...grpc.CallOption) (*RejectDecisionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RejectDecisionResponse)
	err := c.cc.Invoke(ctx, GovernanceService_RejectDecision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *governanceServiceClient) EscalateDecision(ctx context.Context, in *EscalateDecisionRequest, opts ...grpc.CallOption) (*EscalateDecisionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EscalateDecisionResponse)
	err := c.cc.Invoke(ctx, GovernanceService_EscalateDecision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *governanceServiceClient) GetMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GetMetricsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMetricsResponse)
	err := c.cc.Invoke(ctx, GovernanceService_GetMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *governanceServiceClient) GetSessionStats(ctx context.Context, in *GetSessionStatsRequest, opts ...grpc.CallOption) (*GetSessionStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSessionStatsResponse)
	err := c.cc.Invoke(ctx, GovernanceService_GetSessionStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *governanceServiceClient) StreamDecisions(ctx context.Context, in *StreamDecisionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DecisionEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GovernanceService_ServiceDesc.Streams[0], GovernanceService_StreamDecisions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamDecisionsRequest, DecisionEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GovernanceService_StreamDecisionsClient = grpc.ServerStreamingClient[DecisionEvent]

func (c *governanceServiceClient) StreamEvents(ctx context.Context, in *StreamEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[GovernanceEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GovernanceService_ServiceDesc.Streams[1], GovernanceService_StreamEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamEventsRequest, GovernanceEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GovernanceService_StreamEventsClient = grpc.ServerStreamingClient[GovernanceEvent]

// GovernanceServiceServer is the server API for GovernanceService service.
// All implementations must embed UnimplementedGovernanceServiceServer
// for forward compatibility.
//
// GovernanceService provides ethical AI decision review via Human-in-the-Loop
type GovernanceServiceServer interface {
	// Health check
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// Session management
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	CloseSession(context.Context, *CloseSessionRequest) (*CloseSessionResponse, error)
	// Decision operations
	ListPendingDecisions(context.Context, *ListPendingDecisionsRequest) (*ListPendingDecisionsResponse, error)
	GetDecision(context.Context, *GetDecisionRequest) (*GetDecisionResponse, error)
	ApproveDecision(context.Context, *ApproveDecisionRequest) (*ApproveDecisionResponse, error)
	RejectDecision(context.Context, *RejectDecisionRequest) (*RejectDecisionResponse, error)
	EscalateDecision(context.Context, *EscalateDecisionRequest) (*EscalateDecisionResponse, error)
	// Metrics
	GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error)
	GetSessionStats(context.Context, *GetSessionStatsRequest) (*GetSessionStatsResponse, error)
	// Real-time decision stream (Server-side streaming)
	StreamDecisions(*StreamDecisionsRequest, grpc.ServerStreamingServer[DecisionEvent]) error
	// Real-time events stream (Server-side streaming)
	StreamEvents(*StreamEventsRequest, grpc.ServerStreamingServer[GovernanceEvent]) error
	mustEmbedUnimplementedGovernanceServiceServer()
}

// UnimplementedGovernanceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGovernanceServiceServer struct{}

func (UnimplementedGovernanceServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedGovernanceServiceServer) CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedGovernanceServiceServer) CloseSession(context.Context, *CloseSessionRequest) (*CloseSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseSession not implemented")
}
func (UnimplementedGovernanceServiceServer) ListPendingDecisions(context.Context, *ListPendingDecisionsRequest) (*ListPendingDecisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPendingDecisions not implemented")
}
func (UnimplementedGovernanceServiceServer) GetDecision(context.Context, *GetDecisionRequest) (*GetDecisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDecision not implemented")
}
func (UnimplementedGovernanceServiceServer) ApproveDecision(context.Context, *ApproveDecisionRequest) (*ApproveDecisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveDecision not implemented")
}
func (UnimplementedGovernanceServiceServer) RejectDecision(context.Context, *RejectDecisionRequest) (*RejectDecisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectDecision not implemented")
}
func (UnimplementedGovernanceServiceServer) EscalateDecision(context.Context, *EscalateDecisionRequest) (*EscalateDecisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EscalateDecision not implemented")
}
func (UnimplementedGovernanceServiceServer) GetMetrics(context.Context, *GetMetricsRequest) (*GetMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedGovernanceServiceServer) GetSessionStats(context.Context, *GetSessionStatsRequest) (*GetSessionStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessionStats not implemented")
}
func (UnimplementedGovernanceServiceServer) StreamDecisions(*StreamDecisionsRequest, grpc.ServerStreamingServer[DecisionEvent]) error {
	return status.Errorf(codes.Unimplemented, "method StreamDecisions not implemented")
}
func (UnimplementedGovernanceServiceServer) StreamEvents(*StreamEventsRequest, grpc.ServerStreamingServer[GovernanceEvent]) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedGovernanceServiceServer) mustEmbedUnimplementedGovernanceServiceServer() {}
func (UnimplementedGovernanceServiceServer) testEmbeddedByValue()                           {}

// UnsafeGovernanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GovernanceServiceServer will
// result in compilation errors.
type UnsafeGovernanceServiceServer interface {
	mustEmbedUnimplementedGovernanceServiceServer()
}

func RegisterGovernanceServiceServer(s grpc.ServiceRegistrar, srv GovernanceServiceServer) {
	// If the following call pancis, it indicates UnimplementedGovernanceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GovernanceService_ServiceDesc, srv)
}

func _GovernanceService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GovernanceServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GovernanceService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GovernanceServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GovernanceService_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GovernanceServiceServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GovernanceService_CreateSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GovernanceServiceServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GovernanceService_CloseSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GovernanceServiceServer).CloseSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GovernanceService_CloseSession_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GovernanceServiceServer).CloseSession(ctx, req.(*CloseSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GovernanceService_ListPendingDecisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPendingDecisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GovernanceServiceServer).ListPendingDecisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GovernanceService_ListPendingDecisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GovernanceServiceServer).ListPendingDecisions(ctx, req.(*ListPendingDecisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GovernanceService_GetDecision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDecisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GovernanceServiceServer).GetDecision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GovernanceService_GetDecision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GovernanceServiceServer).GetDecision(ctx, req.(*GetDecisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GovernanceService_ApproveDecision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveDecisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GovernanceServiceServer).ApproveDecision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GovernanceService_ApproveDecision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GovernanceServiceServer).ApproveDecision(ctx, req.(*ApproveDecisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GovernanceService_RejectDecision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectDecisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GovernanceServiceServer).RejectDecision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GovernanceService_RejectDecision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GovernanceServiceServer).RejectDecision(ctx, req.(*RejectDecisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GovernanceService_EscalateDecision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EscalateDecisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GovernanceServiceServer).EscalateDecision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GovernanceService_EscalateDecision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GovernanceServiceServer).EscalateDecision(ctx, req.(*EscalateDecisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GovernanceService_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GovernanceServiceServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GovernanceService_GetMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GovernanceServiceServer).GetMetrics(ctx, req.(*GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GovernanceService_GetSessionStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSessionStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GovernanceServiceServer).GetSessionStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GovernanceService_GetSessionStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GovernanceServiceServer).GetSessionStats(ctx, req.(*GetSessionStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GovernanceService_StreamDecisions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamDecisionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GovernanceServiceServer).StreamDecisions(m, &grpc.GenericServerStream[StreamDecisionsRequest, DecisionEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GovernanceService_StreamDecisionsServer = grpc.ServerStreamingServer[DecisionEvent]

func _GovernanceService_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GovernanceServiceServer).StreamEvents(m, &grpc.GenericServerStream[StreamEventsRequest, GovernanceEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GovernanceService_StreamEventsServer = grpc.ServerStreamingServer[GovernanceEvent]

// GovernanceService_ServiceDesc is the grpc.ServiceDesc for GovernanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GovernanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vertice.governance.v1.GovernanceService",
	HandlerType: (*GovernanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _GovernanceService_HealthCheck_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _GovernanceService_CreateSession_Handler,
		},
		{
			MethodName: "CloseSession",
			Handler:    _GovernanceService_CloseSession_Handler,
		},
		{
			MethodName: "ListPendingDecisions",
			Handler:    _GovernanceService_ListPendingDecisions_Handler,
		},
		{
			MethodName: "GetDecision",
			Handler:    _GovernanceService_GetDecision_Handler,
		},
		{
			MethodName: "ApproveDecision",
			Handler:    _GovernanceService_ApproveDecision_Handler,
		},
		{
			MethodName: "RejectDecision",
			Handler:    _GovernanceService_RejectDecision_Handler,
		},
		{
			MethodName: "EscalateDecision",
			Handler:    _GovernanceService_EscalateDecision_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _GovernanceService_GetMetrics_Handler,
		},
		{
			MethodName: "GetSessionStats",
			Handler:    _GovernanceService_GetSessionStats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamDecisions",
			Handler:       _GovernanceService_StreamDecisions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamEvents",
			Handler:       _GovernanceService_StreamEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "governance.proto",
}
