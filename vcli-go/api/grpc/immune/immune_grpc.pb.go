// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: api/proto/immune/immune.proto

package immune

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ActiveImmuneCore_ListAgents_FullMethodName          = "/immune.v1.ActiveImmuneCore/ListAgents"
	ActiveImmuneCore_GetAgent_FullMethodName            = "/immune.v1.ActiveImmuneCore/GetAgent"
	ActiveImmuneCore_CloneAgent_FullMethodName          = "/immune.v1.ActiveImmuneCore/CloneAgent"
	ActiveImmuneCore_TerminateAgent_FullMethodName      = "/immune.v1.ActiveImmuneCore/TerminateAgent"
	ActiveImmuneCore_GetAgentMetrics_FullMethodName     = "/immune.v1.ActiveImmuneCore/GetAgentMetrics"
	ActiveImmuneCore_ListLymphnodes_FullMethodName      = "/immune.v1.ActiveImmuneCore/ListLymphnodes"
	ActiveImmuneCore_GetLymphnodeStatus_FullMethodName  = "/immune.v1.ActiveImmuneCore/GetLymphnodeStatus"
	ActiveImmuneCore_GetLymphnodeMetrics_FullMethodName = "/immune.v1.ActiveImmuneCore/GetLymphnodeMetrics"
	ActiveImmuneCore_StreamCytokines_FullMethodName     = "/immune.v1.ActiveImmuneCore/StreamCytokines"
	ActiveImmuneCore_PublishCytokine_FullMethodName     = "/immune.v1.ActiveImmuneCore/PublishCytokine"
	ActiveImmuneCore_StreamHormones_FullMethodName      = "/immune.v1.ActiveImmuneCore/StreamHormones"
	ActiveImmuneCore_PublishHormone_FullMethodName      = "/immune.v1.ActiveImmuneCore/PublishHormone"
	ActiveImmuneCore_TriggerMassResponse_FullMethodName = "/immune.v1.ActiveImmuneCore/TriggerMassResponse"
	ActiveImmuneCore_GetSystemHealth_FullMethodName     = "/immune.v1.ActiveImmuneCore/GetSystemHealth"
)

// ActiveImmuneCoreClient is the client API for ActiveImmuneCore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActiveImmuneCoreClient interface {
	// Agent Management
	ListAgents(ctx context.Context, in *ListAgentsRequest, opts ...grpc.CallOption) (*ListAgentsResponse, error)
	GetAgent(ctx context.Context, in *GetAgentRequest, opts ...grpc.CallOption) (*Agent, error)
	CloneAgent(ctx context.Context, in *CloneAgentRequest, opts ...grpc.CallOption) (*CloneAgentResponse, error)
	TerminateAgent(ctx context.Context, in *TerminateAgentRequest, opts ...grpc.CallOption) (*TerminateAgentResponse, error)
	GetAgentMetrics(ctx context.Context, in *GetAgentMetricsRequest, opts ...grpc.CallOption) (*AgentMetrics, error)
	// Lymphnode Operations
	ListLymphnodes(ctx context.Context, in *ListLymphnodesRequest, opts ...grpc.CallOption) (*ListLymphnodesResponse, error)
	GetLymphnodeStatus(ctx context.Context, in *GetLymphnodeRequest, opts ...grpc.CallOption) (*LymphnodeStatus, error)
	GetLymphnodeMetrics(ctx context.Context, in *GetLymphnodeRequest, opts ...grpc.CallOption) (*LymphnodeMetrics, error)
	// Cytokine Streaming
	StreamCytokines(ctx context.Context, in *StreamCytokinesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Cytokine], error)
	PublishCytokine(ctx context.Context, in *PublishCytokineRequest, opts ...grpc.CallOption) (*PublishCytokineResponse, error)
	// Hormone System
	StreamHormones(ctx context.Context, in *StreamHormonesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Hormone], error)
	PublishHormone(ctx context.Context, in *PublishHormoneRequest, opts ...grpc.CallOption) (*PublishHormoneResponse, error)
	// Coordination
	TriggerMassResponse(ctx context.Context, in *MassResponseRequest, opts ...grpc.CallOption) (*MassResponseResponse, error)
	GetSystemHealth(ctx context.Context, in *SystemHealthRequest, opts ...grpc.CallOption) (*SystemHealthResponse, error)
}

type activeImmuneCoreClient struct {
	cc grpc.ClientConnInterface
}

func NewActiveImmuneCoreClient(cc grpc.ClientConnInterface) ActiveImmuneCoreClient {
	return &activeImmuneCoreClient{cc}
}

func (c *activeImmuneCoreClient) ListAgents(ctx context.Context, in *ListAgentsRequest, opts ...grpc.CallOption) (*ListAgentsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListAgentsResponse)
	err := c.cc.Invoke(ctx, ActiveImmuneCore_ListAgents_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeImmuneCoreClient) GetAgent(ctx context.Context, in *GetAgentRequest, opts ...grpc.CallOption) (*Agent, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Agent)
	err := c.cc.Invoke(ctx, ActiveImmuneCore_GetAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeImmuneCoreClient) CloneAgent(ctx context.Context, in *CloneAgentRequest, opts ...grpc.CallOption) (*CloneAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CloneAgentResponse)
	err := c.cc.Invoke(ctx, ActiveImmuneCore_CloneAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeImmuneCoreClient) TerminateAgent(ctx context.Context, in *TerminateAgentRequest, opts ...grpc.CallOption) (*TerminateAgentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TerminateAgentResponse)
	err := c.cc.Invoke(ctx, ActiveImmuneCore_TerminateAgent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeImmuneCoreClient) GetAgentMetrics(ctx context.Context, in *GetAgentMetricsRequest, opts ...grpc.CallOption) (*AgentMetrics, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AgentMetrics)
	err := c.cc.Invoke(ctx, ActiveImmuneCore_GetAgentMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeImmuneCoreClient) ListLymphnodes(ctx context.Context, in *ListLymphnodesRequest, opts ...grpc.CallOption) (*ListLymphnodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLymphnodesResponse)
	err := c.cc.Invoke(ctx, ActiveImmuneCore_ListLymphnodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeImmuneCoreClient) GetLymphnodeStatus(ctx context.Context, in *GetLymphnodeRequest, opts ...grpc.CallOption) (*LymphnodeStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LymphnodeStatus)
	err := c.cc.Invoke(ctx, ActiveImmuneCore_GetLymphnodeStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeImmuneCoreClient) GetLymphnodeMetrics(ctx context.Context, in *GetLymphnodeRequest, opts ...grpc.CallOption) (*LymphnodeMetrics, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LymphnodeMetrics)
	err := c.cc.Invoke(ctx, ActiveImmuneCore_GetLymphnodeMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeImmuneCoreClient) StreamCytokines(ctx context.Context, in *StreamCytokinesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Cytokine], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ActiveImmuneCore_ServiceDesc.Streams[0], ActiveImmuneCore_StreamCytokines_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamCytokinesRequest, Cytokine]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ActiveImmuneCore_StreamCytokinesClient = grpc.ServerStreamingClient[Cytokine]

func (c *activeImmuneCoreClient) PublishCytokine(ctx context.Context, in *PublishCytokineRequest, opts ...grpc.CallOption) (*PublishCytokineResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishCytokineResponse)
	err := c.cc.Invoke(ctx, ActiveImmuneCore_PublishCytokine_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeImmuneCoreClient) StreamHormones(ctx context.Context, in *StreamHormonesRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Hormone], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ActiveImmuneCore_ServiceDesc.Streams[1], ActiveImmuneCore_StreamHormones_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamHormonesRequest, Hormone]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ActiveImmuneCore_StreamHormonesClient = grpc.ServerStreamingClient[Hormone]

func (c *activeImmuneCoreClient) PublishHormone(ctx context.Context, in *PublishHormoneRequest, opts ...grpc.CallOption) (*PublishHormoneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishHormoneResponse)
	err := c.cc.Invoke(ctx, ActiveImmuneCore_PublishHormone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeImmuneCoreClient) TriggerMassResponse(ctx context.Context, in *MassResponseRequest, opts ...grpc.CallOption) (*MassResponseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MassResponseResponse)
	err := c.cc.Invoke(ctx, ActiveImmuneCore_TriggerMassResponse_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *activeImmuneCoreClient) GetSystemHealth(ctx context.Context, in *SystemHealthRequest, opts ...grpc.CallOption) (*SystemHealthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SystemHealthResponse)
	err := c.cc.Invoke(ctx, ActiveImmuneCore_GetSystemHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActiveImmuneCoreServer is the server API for ActiveImmuneCore service.
// All implementations must embed UnimplementedActiveImmuneCoreServer
// for forward compatibility.
type ActiveImmuneCoreServer interface {
	// Agent Management
	ListAgents(context.Context, *ListAgentsRequest) (*ListAgentsResponse, error)
	GetAgent(context.Context, *GetAgentRequest) (*Agent, error)
	CloneAgent(context.Context, *CloneAgentRequest) (*CloneAgentResponse, error)
	TerminateAgent(context.Context, *TerminateAgentRequest) (*TerminateAgentResponse, error)
	GetAgentMetrics(context.Context, *GetAgentMetricsRequest) (*AgentMetrics, error)
	// Lymphnode Operations
	ListLymphnodes(context.Context, *ListLymphnodesRequest) (*ListLymphnodesResponse, error)
	GetLymphnodeStatus(context.Context, *GetLymphnodeRequest) (*LymphnodeStatus, error)
	GetLymphnodeMetrics(context.Context, *GetLymphnodeRequest) (*LymphnodeMetrics, error)
	// Cytokine Streaming
	StreamCytokines(*StreamCytokinesRequest, grpc.ServerStreamingServer[Cytokine]) error
	PublishCytokine(context.Context, *PublishCytokineRequest) (*PublishCytokineResponse, error)
	// Hormone System
	StreamHormones(*StreamHormonesRequest, grpc.ServerStreamingServer[Hormone]) error
	PublishHormone(context.Context, *PublishHormoneRequest) (*PublishHormoneResponse, error)
	// Coordination
	TriggerMassResponse(context.Context, *MassResponseRequest) (*MassResponseResponse, error)
	GetSystemHealth(context.Context, *SystemHealthRequest) (*SystemHealthResponse, error)
	mustEmbedUnimplementedActiveImmuneCoreServer()
}

// UnimplementedActiveImmuneCoreServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedActiveImmuneCoreServer struct{}

func (UnimplementedActiveImmuneCoreServer) ListAgents(context.Context, *ListAgentsRequest) (*ListAgentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgents not implemented")
}
func (UnimplementedActiveImmuneCoreServer) GetAgent(context.Context, *GetAgentRequest) (*Agent, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgent not implemented")
}
func (UnimplementedActiveImmuneCoreServer) CloneAgent(context.Context, *CloneAgentRequest) (*CloneAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloneAgent not implemented")
}
func (UnimplementedActiveImmuneCoreServer) TerminateAgent(context.Context, *TerminateAgentRequest) (*TerminateAgentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TerminateAgent not implemented")
}
func (UnimplementedActiveImmuneCoreServer) GetAgentMetrics(context.Context, *GetAgentMetricsRequest) (*AgentMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgentMetrics not implemented")
}
func (UnimplementedActiveImmuneCoreServer) ListLymphnodes(context.Context, *ListLymphnodesRequest) (*ListLymphnodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLymphnodes not implemented")
}
func (UnimplementedActiveImmuneCoreServer) GetLymphnodeStatus(context.Context, *GetLymphnodeRequest) (*LymphnodeStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLymphnodeStatus not implemented")
}
func (UnimplementedActiveImmuneCoreServer) GetLymphnodeMetrics(context.Context, *GetLymphnodeRequest) (*LymphnodeMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLymphnodeMetrics not implemented")
}
func (UnimplementedActiveImmuneCoreServer) StreamCytokines(*StreamCytokinesRequest, grpc.ServerStreamingServer[Cytokine]) error {
	return status.Errorf(codes.Unimplemented, "method StreamCytokines not implemented")
}
func (UnimplementedActiveImmuneCoreServer) PublishCytokine(context.Context, *PublishCytokineRequest) (*PublishCytokineResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishCytokine not implemented")
}
func (UnimplementedActiveImmuneCoreServer) StreamHormones(*StreamHormonesRequest, grpc.ServerStreamingServer[Hormone]) error {
	return status.Errorf(codes.Unimplemented, "method StreamHormones not implemented")
}
func (UnimplementedActiveImmuneCoreServer) PublishHormone(context.Context, *PublishHormoneRequest) (*PublishHormoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishHormone not implemented")
}
func (UnimplementedActiveImmuneCoreServer) TriggerMassResponse(context.Context, *MassResponseRequest) (*MassResponseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerMassResponse not implemented")
}
func (UnimplementedActiveImmuneCoreServer) GetSystemHealth(context.Context, *SystemHealthRequest) (*SystemHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSystemHealth not implemented")
}
func (UnimplementedActiveImmuneCoreServer) mustEmbedUnimplementedActiveImmuneCoreServer() {}
func (UnimplementedActiveImmuneCoreServer) testEmbeddedByValue()                          {}

// UnsafeActiveImmuneCoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActiveImmuneCoreServer will
// result in compilation errors.
type UnsafeActiveImmuneCoreServer interface {
	mustEmbedUnimplementedActiveImmuneCoreServer()
}

func RegisterActiveImmuneCoreServer(s grpc.ServiceRegistrar, srv ActiveImmuneCoreServer) {
	// If the following call pancis, it indicates UnimplementedActiveImmuneCoreServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ActiveImmuneCore_ServiceDesc, srv)
}

func _ActiveImmuneCore_ListAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveImmuneCoreServer).ListAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActiveImmuneCore_ListAgents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveImmuneCoreServer).ListAgents(ctx, req.(*ListAgentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveImmuneCore_GetAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveImmuneCoreServer).GetAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActiveImmuneCore_GetAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveImmuneCoreServer).GetAgent(ctx, req.(*GetAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveImmuneCore_CloneAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloneAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveImmuneCoreServer).CloneAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActiveImmuneCore_CloneAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveImmuneCoreServer).CloneAgent(ctx, req.(*CloneAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveImmuneCore_TerminateAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TerminateAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveImmuneCoreServer).TerminateAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActiveImmuneCore_TerminateAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveImmuneCoreServer).TerminateAgent(ctx, req.(*TerminateAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveImmuneCore_GetAgentMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgentMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveImmuneCoreServer).GetAgentMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActiveImmuneCore_GetAgentMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveImmuneCoreServer).GetAgentMetrics(ctx, req.(*GetAgentMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveImmuneCore_ListLymphnodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLymphnodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveImmuneCoreServer).ListLymphnodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActiveImmuneCore_ListLymphnodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveImmuneCoreServer).ListLymphnodes(ctx, req.(*ListLymphnodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveImmuneCore_GetLymphnodeStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLymphnodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveImmuneCoreServer).GetLymphnodeStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActiveImmuneCore_GetLymphnodeStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveImmuneCoreServer).GetLymphnodeStatus(ctx, req.(*GetLymphnodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveImmuneCore_GetLymphnodeMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLymphnodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveImmuneCoreServer).GetLymphnodeMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActiveImmuneCore_GetLymphnodeMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveImmuneCoreServer).GetLymphnodeMetrics(ctx, req.(*GetLymphnodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveImmuneCore_StreamCytokines_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamCytokinesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActiveImmuneCoreServer).StreamCytokines(m, &grpc.GenericServerStream[StreamCytokinesRequest, Cytokine]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ActiveImmuneCore_StreamCytokinesServer = grpc.ServerStreamingServer[Cytokine]

func _ActiveImmuneCore_PublishCytokine_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishCytokineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveImmuneCoreServer).PublishCytokine(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActiveImmuneCore_PublishCytokine_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveImmuneCoreServer).PublishCytokine(ctx, req.(*PublishCytokineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveImmuneCore_StreamHormones_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamHormonesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActiveImmuneCoreServer).StreamHormones(m, &grpc.GenericServerStream[StreamHormonesRequest, Hormone]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ActiveImmuneCore_StreamHormonesServer = grpc.ServerStreamingServer[Hormone]

func _ActiveImmuneCore_PublishHormone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishHormoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveImmuneCoreServer).PublishHormone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActiveImmuneCore_PublishHormone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveImmuneCoreServer).PublishHormone(ctx, req.(*PublishHormoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveImmuneCore_TriggerMassResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MassResponseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveImmuneCoreServer).TriggerMassResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActiveImmuneCore_TriggerMassResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveImmuneCoreServer).TriggerMassResponse(ctx, req.(*MassResponseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ActiveImmuneCore_GetSystemHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SystemHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActiveImmuneCoreServer).GetSystemHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActiveImmuneCore_GetSystemHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActiveImmuneCoreServer).GetSystemHealth(ctx, req.(*SystemHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActiveImmuneCore_ServiceDesc is the grpc.ServiceDesc for ActiveImmuneCore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActiveImmuneCore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "immune.v1.ActiveImmuneCore",
	HandlerType: (*ActiveImmuneCoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAgents",
			Handler:    _ActiveImmuneCore_ListAgents_Handler,
		},
		{
			MethodName: "GetAgent",
			Handler:    _ActiveImmuneCore_GetAgent_Handler,
		},
		{
			MethodName: "CloneAgent",
			Handler:    _ActiveImmuneCore_CloneAgent_Handler,
		},
		{
			MethodName: "TerminateAgent",
			Handler:    _ActiveImmuneCore_TerminateAgent_Handler,
		},
		{
			MethodName: "GetAgentMetrics",
			Handler:    _ActiveImmuneCore_GetAgentMetrics_Handler,
		},
		{
			MethodName: "ListLymphnodes",
			Handler:    _ActiveImmuneCore_ListLymphnodes_Handler,
		},
		{
			MethodName: "GetLymphnodeStatus",
			Handler:    _ActiveImmuneCore_GetLymphnodeStatus_Handler,
		},
		{
			MethodName: "GetLymphnodeMetrics",
			Handler:    _ActiveImmuneCore_GetLymphnodeMetrics_Handler,
		},
		{
			MethodName: "PublishCytokine",
			Handler:    _ActiveImmuneCore_PublishCytokine_Handler,
		},
		{
			MethodName: "PublishHormone",
			Handler:    _ActiveImmuneCore_PublishHormone_Handler,
		},
		{
			MethodName: "TriggerMassResponse",
			Handler:    _ActiveImmuneCore_TriggerMassResponse_Handler,
		},
		{
			MethodName: "GetSystemHealth",
			Handler:    _ActiveImmuneCore_GetSystemHealth_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamCytokines",
			Handler:       _ActiveImmuneCore_StreamCytokines_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamHormones",
			Handler:       _ActiveImmuneCore_StreamHormones_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/immune/immune.proto",
}
