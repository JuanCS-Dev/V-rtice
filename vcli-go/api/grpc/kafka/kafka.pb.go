// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.10
// 	protoc        v4.25.1
// source: api/proto/kafka/kafka.proto

package kafka

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StreamTopicRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Topic         string                 `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`                                      // Topic name
	ConsumerGroup string                 `protobuf:"bytes,2,opt,name=consumer_group,json=consumerGroup,proto3" json:"consumer_group,omitempty"` // Consumer group ID (optional)
	Offset        int64                  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`                                   // Start offset (-1 = latest, -2 = earliest)
	Partition     int32                  `protobuf:"varint,4,opt,name=partition,proto3" json:"partition,omitempty"`                             // Specific partition (-1 = all)
	// Filters
	EventTypes    []string          `protobuf:"bytes,5,rep,name=event_types,json=eventTypes,proto3" json:"event_types,omitempty"`                                                                                 // Filter by event type
	SeverityMin   int32             `protobuf:"varint,6,opt,name=severity_min,json=severityMin,proto3" json:"severity_min,omitempty"`                                                                             // Min severity level
	FieldFilters  map[string]string `protobuf:"bytes,7,rep,name=field_filters,json=fieldFilters,proto3" json:"field_filters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Filter by field values
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamTopicRequest) Reset() {
	*x = StreamTopicRequest{}
	mi := &file_api_proto_kafka_kafka_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTopicRequest) ProtoMessage() {}

func (x *StreamTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_kafka_kafka_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTopicRequest.ProtoReflect.Descriptor instead.
func (*StreamTopicRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_kafka_kafka_proto_rawDescGZIP(), []int{0}
}

func (x *StreamTopicRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *StreamTopicRequest) GetConsumerGroup() string {
	if x != nil {
		return x.ConsumerGroup
	}
	return ""
}

func (x *StreamTopicRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *StreamTopicRequest) GetPartition() int32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *StreamTopicRequest) GetEventTypes() []string {
	if x != nil {
		return x.EventTypes
	}
	return nil
}

func (x *StreamTopicRequest) GetSeverityMin() int32 {
	if x != nil {
		return x.SeverityMin
	}
	return 0
}

func (x *StreamTopicRequest) GetFieldFilters() map[string]string {
	if x != nil {
		return x.FieldFilters
	}
	return nil
}

type StreamTopicsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Topics        []string               `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"` // Multiple topics
	ConsumerGroup string                 `protobuf:"bytes,2,opt,name=consumer_group,json=consumerGroup,proto3" json:"consumer_group,omitempty"`
	Offset        int64                  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	// Filters (applied to all topics)
	EventTypes    []string          `protobuf:"bytes,4,rep,name=event_types,json=eventTypes,proto3" json:"event_types,omitempty"`
	SeverityMin   int32             `protobuf:"varint,5,opt,name=severity_min,json=severityMin,proto3" json:"severity_min,omitempty"`
	FieldFilters  map[string]string `protobuf:"bytes,6,rep,name=field_filters,json=fieldFilters,proto3" json:"field_filters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamTopicsRequest) Reset() {
	*x = StreamTopicsRequest{}
	mi := &file_api_proto_kafka_kafka_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamTopicsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamTopicsRequest) ProtoMessage() {}

func (x *StreamTopicsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_kafka_kafka_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamTopicsRequest.ProtoReflect.Descriptor instead.
func (*StreamTopicsRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_kafka_kafka_proto_rawDescGZIP(), []int{1}
}

func (x *StreamTopicsRequest) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *StreamTopicsRequest) GetConsumerGroup() string {
	if x != nil {
		return x.ConsumerGroup
	}
	return ""
}

func (x *StreamTopicsRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *StreamTopicsRequest) GetEventTypes() []string {
	if x != nil {
		return x.EventTypes
	}
	return nil
}

func (x *StreamTopicsRequest) GetSeverityMin() int32 {
	if x != nil {
		return x.SeverityMin
	}
	return 0
}

func (x *StreamTopicsRequest) GetFieldFilters() map[string]string {
	if x != nil {
		return x.FieldFilters
	}
	return nil
}

type KafkaMessage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Message metadata
	Topic     string                 `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Partition int32                  `protobuf:"varint,2,opt,name=partition,proto3" json:"partition,omitempty"`
	Offset    int64                  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Key       string                 `protobuf:"bytes,4,opt,name=key,proto3" json:"key,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Message content
	EventType string           `protobuf:"bytes,6,opt,name=event_type,json=eventType,proto3" json:"event_type,omitempty"` // Event type (if structured)
	Severity  int32            `protobuf:"varint,7,opt,name=severity,proto3" json:"severity,omitempty"`                   // Severity level (if applicable)
	Payload   *structpb.Struct `protobuf:"bytes,8,opt,name=payload,proto3" json:"payload,omitempty"`                      // Message payload (JSON)
	RawValue  []byte           `protobuf:"bytes,9,opt,name=raw_value,json=rawValue,proto3" json:"raw_value,omitempty"`    // Raw message bytes
	// Headers
	Headers       map[string]string `protobuf:"bytes,10,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *KafkaMessage) Reset() {
	*x = KafkaMessage{}
	mi := &file_api_proto_kafka_kafka_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KafkaMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KafkaMessage) ProtoMessage() {}

func (x *KafkaMessage) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_kafka_kafka_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KafkaMessage.ProtoReflect.Descriptor instead.
func (*KafkaMessage) Descriptor() ([]byte, []int) {
	return file_api_proto_kafka_kafka_proto_rawDescGZIP(), []int{2}
}

func (x *KafkaMessage) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *KafkaMessage) GetPartition() int32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *KafkaMessage) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *KafkaMessage) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KafkaMessage) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *KafkaMessage) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *KafkaMessage) GetSeverity() int32 {
	if x != nil {
		return x.Severity
	}
	return 0
}

func (x *KafkaMessage) GetPayload() *structpb.Struct {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *KafkaMessage) GetRawValue() []byte {
	if x != nil {
		return x.RawValue
	}
	return nil
}

func (x *KafkaMessage) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

type PublishMessageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Topic         string                 `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Key           string                 `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`                                                                                   // Message key (for partitioning)
	Payload       *structpb.Struct       `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`                                                                           // Message payload
	Headers       map[string]string      `protobuf:"bytes,4,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"` // Optional headers
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishMessageRequest) Reset() {
	*x = PublishMessageRequest{}
	mi := &file_api_proto_kafka_kafka_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishMessageRequest) ProtoMessage() {}

func (x *PublishMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_kafka_kafka_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishMessageRequest.ProtoReflect.Descriptor instead.
func (*PublishMessageRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_kafka_kafka_proto_rawDescGZIP(), []int{3}
}

func (x *PublishMessageRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *PublishMessageRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PublishMessageRequest) GetPayload() *structpb.Struct {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *PublishMessageRequest) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

type PublishMessageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Partition     int32                  `protobuf:"varint,2,opt,name=partition,proto3" json:"partition,omitempty"` // Partition message was sent to
	Offset        int64                  `protobuf:"varint,3,opt,name=offset,proto3" json:"offset,omitempty"`       // Offset of published message
	Message       string                 `protobuf:"bytes,4,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishMessageResponse) Reset() {
	*x = PublishMessageResponse{}
	mi := &file_api_proto_kafka_kafka_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishMessageResponse) ProtoMessage() {}

func (x *PublishMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_kafka_kafka_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishMessageResponse.ProtoReflect.Descriptor instead.
func (*PublishMessageResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_kafka_kafka_proto_rawDescGZIP(), []int{4}
}

func (x *PublishMessageResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PublishMessageResponse) GetPartition() int32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *PublishMessageResponse) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *PublishMessageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetTopicInfoRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Topic         string                 `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTopicInfoRequest) Reset() {
	*x = GetTopicInfoRequest{}
	mi := &file_api_proto_kafka_kafka_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTopicInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopicInfoRequest) ProtoMessage() {}

func (x *GetTopicInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_kafka_kafka_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopicInfoRequest.ProtoReflect.Descriptor instead.
func (*GetTopicInfoRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_kafka_kafka_proto_rawDescGZIP(), []int{5}
}

func (x *GetTopicInfoRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

type TopicInfo struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Topic             string                 `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	NumPartitions     int32                  `protobuf:"varint,2,opt,name=num_partitions,json=numPartitions,proto3" json:"num_partitions,omitempty"`
	ReplicationFactor int32                  `protobuf:"varint,3,opt,name=replication_factor,json=replicationFactor,proto3" json:"replication_factor,omitempty"`
	Config            map[string]string      `protobuf:"bytes,4,rep,name=config,proto3" json:"config,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Partitions        []*PartitionInfo       `protobuf:"bytes,5,rep,name=partitions,proto3" json:"partitions,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TopicInfo) Reset() {
	*x = TopicInfo{}
	mi := &file_api_proto_kafka_kafka_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopicInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicInfo) ProtoMessage() {}

func (x *TopicInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_kafka_kafka_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicInfo.ProtoReflect.Descriptor instead.
func (*TopicInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_kafka_kafka_proto_rawDescGZIP(), []int{6}
}

func (x *TopicInfo) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *TopicInfo) GetNumPartitions() int32 {
	if x != nil {
		return x.NumPartitions
	}
	return 0
}

func (x *TopicInfo) GetReplicationFactor() int32 {
	if x != nil {
		return x.ReplicationFactor
	}
	return 0
}

func (x *TopicInfo) GetConfig() map[string]string {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *TopicInfo) GetPartitions() []*PartitionInfo {
	if x != nil {
		return x.Partitions
	}
	return nil
}

type PartitionInfo struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Partition      int32                  `protobuf:"varint,1,opt,name=partition,proto3" json:"partition,omitempty"`
	Leader         string                 `protobuf:"bytes,2,opt,name=leader,proto3" json:"leader,omitempty"` // Leader broker
	Replicas       []string               `protobuf:"bytes,3,rep,name=replicas,proto3" json:"replicas,omitempty"`
	Isr            []string               `protobuf:"bytes,4,rep,name=isr,proto3" json:"isr,omitempty"` // In-sync replicas
	EarliestOffset int64                  `protobuf:"varint,5,opt,name=earliest_offset,json=earliestOffset,proto3" json:"earliest_offset,omitempty"`
	LatestOffset   int64                  `protobuf:"varint,6,opt,name=latest_offset,json=latestOffset,proto3" json:"latest_offset,omitempty"`
	MessageCount   int64                  `protobuf:"varint,7,opt,name=message_count,json=messageCount,proto3" json:"message_count,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PartitionInfo) Reset() {
	*x = PartitionInfo{}
	mi := &file_api_proto_kafka_kafka_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartitionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionInfo) ProtoMessage() {}

func (x *PartitionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_kafka_kafka_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionInfo.ProtoReflect.Descriptor instead.
func (*PartitionInfo) Descriptor() ([]byte, []int) {
	return file_api_proto_kafka_kafka_proto_rawDescGZIP(), []int{7}
}

func (x *PartitionInfo) GetPartition() int32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *PartitionInfo) GetLeader() string {
	if x != nil {
		return x.Leader
	}
	return ""
}

func (x *PartitionInfo) GetReplicas() []string {
	if x != nil {
		return x.Replicas
	}
	return nil
}

func (x *PartitionInfo) GetIsr() []string {
	if x != nil {
		return x.Isr
	}
	return nil
}

func (x *PartitionInfo) GetEarliestOffset() int64 {
	if x != nil {
		return x.EarliestOffset
	}
	return 0
}

func (x *PartitionInfo) GetLatestOffset() int64 {
	if x != nil {
		return x.LatestOffset
	}
	return 0
}

func (x *PartitionInfo) GetMessageCount() int64 {
	if x != nil {
		return x.MessageCount
	}
	return 0
}

type ListTopicsRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Pattern         string                 `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`                                         // Topic name pattern (regex)
	IncludeInternal bool                   `protobuf:"varint,2,opt,name=include_internal,json=includeInternal,proto3" json:"include_internal,omitempty"` // Include internal topics
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ListTopicsRequest) Reset() {
	*x = ListTopicsRequest{}
	mi := &file_api_proto_kafka_kafka_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTopicsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTopicsRequest) ProtoMessage() {}

func (x *ListTopicsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_kafka_kafka_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTopicsRequest.ProtoReflect.Descriptor instead.
func (*ListTopicsRequest) Descriptor() ([]byte, []int) {
	return file_api_proto_kafka_kafka_proto_rawDescGZIP(), []int{8}
}

func (x *ListTopicsRequest) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *ListTopicsRequest) GetIncludeInternal() bool {
	if x != nil {
		return x.IncludeInternal
	}
	return false
}

type ListTopicsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Topics        []string               `protobuf:"bytes,1,rep,name=topics,proto3" json:"topics,omitempty"`
	TotalCount    int32                  `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListTopicsResponse) Reset() {
	*x = ListTopicsResponse{}
	mi := &file_api_proto_kafka_kafka_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListTopicsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTopicsResponse) ProtoMessage() {}

func (x *ListTopicsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_proto_kafka_kafka_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTopicsResponse.ProtoReflect.Descriptor instead.
func (*ListTopicsResponse) Descriptor() ([]byte, []int) {
	return file_api_proto_kafka_kafka_proto_rawDescGZIP(), []int{9}
}

func (x *ListTopicsResponse) GetTopics() []string {
	if x != nil {
		return x.Topics
	}
	return nil
}

func (x *ListTopicsResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

var File_api_proto_kafka_kafka_proto protoreflect.FileDescriptor

const file_api_proto_kafka_kafka_proto_rawDesc = "" +
	"\n" +
	"\x1bapi/proto/kafka/kafka.proto\x12\bkafka.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1cgoogle/protobuf/struct.proto\"\xe1\x02\n" +
	"\x12StreamTopicRequest\x12\x14\n" +
	"\x05topic\x18\x01 \x01(\tR\x05topic\x12%\n" +
	"\x0econsumer_group\x18\x02 \x01(\tR\rconsumerGroup\x12\x16\n" +
	"\x06offset\x18\x03 \x01(\x03R\x06offset\x12\x1c\n" +
	"\tpartition\x18\x04 \x01(\x05R\tpartition\x12\x1f\n" +
	"\vevent_types\x18\x05 \x03(\tR\n" +
	"eventTypes\x12!\n" +
	"\fseverity_min\x18\x06 \x01(\x05R\vseverityMin\x12S\n" +
	"\rfield_filters\x18\a \x03(\v2..kafka.v1.StreamTopicRequest.FieldFiltersEntryR\ffieldFilters\x1a?\n" +
	"\x11FieldFiltersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xc7\x02\n" +
	"\x13StreamTopicsRequest\x12\x16\n" +
	"\x06topics\x18\x01 \x03(\tR\x06topics\x12%\n" +
	"\x0econsumer_group\x18\x02 \x01(\tR\rconsumerGroup\x12\x16\n" +
	"\x06offset\x18\x03 \x01(\x03R\x06offset\x12\x1f\n" +
	"\vevent_types\x18\x04 \x03(\tR\n" +
	"eventTypes\x12!\n" +
	"\fseverity_min\x18\x05 \x01(\x05R\vseverityMin\x12T\n" +
	"\rfield_filters\x18\x06 \x03(\v2/.kafka.v1.StreamTopicsRequest.FieldFiltersEntryR\ffieldFilters\x1a?\n" +
	"\x11FieldFiltersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xac\x03\n" +
	"\fKafkaMessage\x12\x14\n" +
	"\x05topic\x18\x01 \x01(\tR\x05topic\x12\x1c\n" +
	"\tpartition\x18\x02 \x01(\x05R\tpartition\x12\x16\n" +
	"\x06offset\x18\x03 \x01(\x03R\x06offset\x12\x10\n" +
	"\x03key\x18\x04 \x01(\tR\x03key\x128\n" +
	"\ttimestamp\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x12\x1d\n" +
	"\n" +
	"event_type\x18\x06 \x01(\tR\teventType\x12\x1a\n" +
	"\bseverity\x18\a \x01(\x05R\bseverity\x121\n" +
	"\apayload\x18\b \x01(\v2\x17.google.protobuf.StructR\apayload\x12\x1b\n" +
	"\traw_value\x18\t \x01(\fR\brawValue\x12=\n" +
	"\aheaders\x18\n" +
	" \x03(\v2#.kafka.v1.KafkaMessage.HeadersEntryR\aheaders\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xf6\x01\n" +
	"\x15PublishMessageRequest\x12\x14\n" +
	"\x05topic\x18\x01 \x01(\tR\x05topic\x12\x10\n" +
	"\x03key\x18\x02 \x01(\tR\x03key\x121\n" +
	"\apayload\x18\x03 \x01(\v2\x17.google.protobuf.StructR\apayload\x12F\n" +
	"\aheaders\x18\x04 \x03(\v2,.kafka.v1.PublishMessageRequest.HeadersEntryR\aheaders\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x82\x01\n" +
	"\x16PublishMessageResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x1c\n" +
	"\tpartition\x18\x02 \x01(\x05R\tpartition\x12\x16\n" +
	"\x06offset\x18\x03 \x01(\x03R\x06offset\x12\x18\n" +
	"\amessage\x18\x04 \x01(\tR\amessage\"+\n" +
	"\x13GetTopicInfoRequest\x12\x14\n" +
	"\x05topic\x18\x01 \x01(\tR\x05topic\"\xa4\x02\n" +
	"\tTopicInfo\x12\x14\n" +
	"\x05topic\x18\x01 \x01(\tR\x05topic\x12%\n" +
	"\x0enum_partitions\x18\x02 \x01(\x05R\rnumPartitions\x12-\n" +
	"\x12replication_factor\x18\x03 \x01(\x05R\x11replicationFactor\x127\n" +
	"\x06config\x18\x04 \x03(\v2\x1f.kafka.v1.TopicInfo.ConfigEntryR\x06config\x127\n" +
	"\n" +
	"partitions\x18\x05 \x03(\v2\x17.kafka.v1.PartitionInfoR\n" +
	"partitions\x1a9\n" +
	"\vConfigEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xe6\x01\n" +
	"\rPartitionInfo\x12\x1c\n" +
	"\tpartition\x18\x01 \x01(\x05R\tpartition\x12\x16\n" +
	"\x06leader\x18\x02 \x01(\tR\x06leader\x12\x1a\n" +
	"\breplicas\x18\x03 \x03(\tR\breplicas\x12\x10\n" +
	"\x03isr\x18\x04 \x03(\tR\x03isr\x12'\n" +
	"\x0fearliest_offset\x18\x05 \x01(\x03R\x0eearliestOffset\x12#\n" +
	"\rlatest_offset\x18\x06 \x01(\x03R\flatestOffset\x12#\n" +
	"\rmessage_count\x18\a \x01(\x03R\fmessageCount\"X\n" +
	"\x11ListTopicsRequest\x12\x18\n" +
	"\apattern\x18\x01 \x01(\tR\apattern\x12)\n" +
	"\x10include_internal\x18\x02 \x01(\bR\x0fincludeInternal\"M\n" +
	"\x12ListTopicsResponse\x12\x16\n" +
	"\x06topics\x18\x01 \x03(\tR\x06topics\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x05R\n" +
	"totalCount2\xfe\x02\n" +
	"\n" +
	"KafkaProxy\x12E\n" +
	"\vStreamTopic\x12\x1c.kafka.v1.StreamTopicRequest\x1a\x16.kafka.v1.KafkaMessage0\x01\x12G\n" +
	"\fStreamTopics\x12\x1d.kafka.v1.StreamTopicsRequest\x1a\x16.kafka.v1.KafkaMessage0\x01\x12S\n" +
	"\x0ePublishMessage\x12\x1f.kafka.v1.PublishMessageRequest\x1a .kafka.v1.PublishMessageResponse\x12B\n" +
	"\fGetTopicInfo\x12\x1d.kafka.v1.GetTopicInfoRequest\x1a\x13.kafka.v1.TopicInfo\x12G\n" +
	"\n" +
	"ListTopics\x12\x1b.kafka.v1.ListTopicsRequest\x1a\x1c.kafka.v1.ListTopicsResponseB+Z)github.com/vertice/vcli-go/api/grpc/kafkab\x06proto3"

var (
	file_api_proto_kafka_kafka_proto_rawDescOnce sync.Once
	file_api_proto_kafka_kafka_proto_rawDescData []byte
)

func file_api_proto_kafka_kafka_proto_rawDescGZIP() []byte {
	file_api_proto_kafka_kafka_proto_rawDescOnce.Do(func() {
		file_api_proto_kafka_kafka_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_proto_kafka_kafka_proto_rawDesc), len(file_api_proto_kafka_kafka_proto_rawDesc)))
	})
	return file_api_proto_kafka_kafka_proto_rawDescData
}

var file_api_proto_kafka_kafka_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_api_proto_kafka_kafka_proto_goTypes = []any{
	(*StreamTopicRequest)(nil),     // 0: kafka.v1.StreamTopicRequest
	(*StreamTopicsRequest)(nil),    // 1: kafka.v1.StreamTopicsRequest
	(*KafkaMessage)(nil),           // 2: kafka.v1.KafkaMessage
	(*PublishMessageRequest)(nil),  // 3: kafka.v1.PublishMessageRequest
	(*PublishMessageResponse)(nil), // 4: kafka.v1.PublishMessageResponse
	(*GetTopicInfoRequest)(nil),    // 5: kafka.v1.GetTopicInfoRequest
	(*TopicInfo)(nil),              // 6: kafka.v1.TopicInfo
	(*PartitionInfo)(nil),          // 7: kafka.v1.PartitionInfo
	(*ListTopicsRequest)(nil),      // 8: kafka.v1.ListTopicsRequest
	(*ListTopicsResponse)(nil),     // 9: kafka.v1.ListTopicsResponse
	nil,                            // 10: kafka.v1.StreamTopicRequest.FieldFiltersEntry
	nil,                            // 11: kafka.v1.StreamTopicsRequest.FieldFiltersEntry
	nil,                            // 12: kafka.v1.KafkaMessage.HeadersEntry
	nil,                            // 13: kafka.v1.PublishMessageRequest.HeadersEntry
	nil,                            // 14: kafka.v1.TopicInfo.ConfigEntry
	(*timestamppb.Timestamp)(nil),  // 15: google.protobuf.Timestamp
	(*structpb.Struct)(nil),        // 16: google.protobuf.Struct
}
var file_api_proto_kafka_kafka_proto_depIdxs = []int32{
	10, // 0: kafka.v1.StreamTopicRequest.field_filters:type_name -> kafka.v1.StreamTopicRequest.FieldFiltersEntry
	11, // 1: kafka.v1.StreamTopicsRequest.field_filters:type_name -> kafka.v1.StreamTopicsRequest.FieldFiltersEntry
	15, // 2: kafka.v1.KafkaMessage.timestamp:type_name -> google.protobuf.Timestamp
	16, // 3: kafka.v1.KafkaMessage.payload:type_name -> google.protobuf.Struct
	12, // 4: kafka.v1.KafkaMessage.headers:type_name -> kafka.v1.KafkaMessage.HeadersEntry
	16, // 5: kafka.v1.PublishMessageRequest.payload:type_name -> google.protobuf.Struct
	13, // 6: kafka.v1.PublishMessageRequest.headers:type_name -> kafka.v1.PublishMessageRequest.HeadersEntry
	14, // 7: kafka.v1.TopicInfo.config:type_name -> kafka.v1.TopicInfo.ConfigEntry
	7,  // 8: kafka.v1.TopicInfo.partitions:type_name -> kafka.v1.PartitionInfo
	0,  // 9: kafka.v1.KafkaProxy.StreamTopic:input_type -> kafka.v1.StreamTopicRequest
	1,  // 10: kafka.v1.KafkaProxy.StreamTopics:input_type -> kafka.v1.StreamTopicsRequest
	3,  // 11: kafka.v1.KafkaProxy.PublishMessage:input_type -> kafka.v1.PublishMessageRequest
	5,  // 12: kafka.v1.KafkaProxy.GetTopicInfo:input_type -> kafka.v1.GetTopicInfoRequest
	8,  // 13: kafka.v1.KafkaProxy.ListTopics:input_type -> kafka.v1.ListTopicsRequest
	2,  // 14: kafka.v1.KafkaProxy.StreamTopic:output_type -> kafka.v1.KafkaMessage
	2,  // 15: kafka.v1.KafkaProxy.StreamTopics:output_type -> kafka.v1.KafkaMessage
	4,  // 16: kafka.v1.KafkaProxy.PublishMessage:output_type -> kafka.v1.PublishMessageResponse
	6,  // 17: kafka.v1.KafkaProxy.GetTopicInfo:output_type -> kafka.v1.TopicInfo
	9,  // 18: kafka.v1.KafkaProxy.ListTopics:output_type -> kafka.v1.ListTopicsResponse
	14, // [14:19] is the sub-list for method output_type
	9,  // [9:14] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_api_proto_kafka_kafka_proto_init() }
func file_api_proto_kafka_kafka_proto_init() {
	if File_api_proto_kafka_kafka_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_proto_kafka_kafka_proto_rawDesc), len(file_api_proto_kafka_kafka_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_proto_kafka_kafka_proto_goTypes,
		DependencyIndexes: file_api_proto_kafka_kafka_proto_depIdxs,
		MessageInfos:      file_api_proto_kafka_kafka_proto_msgTypes,
	}.Build()
	File_api_proto_kafka_kafka_proto = out.File
	file_api_proto_kafka_kafka_proto_goTypes = nil
	file_api_proto_kafka_kafka_proto_depIdxs = nil
}
