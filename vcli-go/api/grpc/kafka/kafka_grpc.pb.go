// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: api/proto/kafka/kafka.proto

package kafka

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KafkaProxy_StreamTopic_FullMethodName    = "/kafka.v1.KafkaProxy/StreamTopic"
	KafkaProxy_StreamTopics_FullMethodName   = "/kafka.v1.KafkaProxy/StreamTopics"
	KafkaProxy_PublishMessage_FullMethodName = "/kafka.v1.KafkaProxy/PublishMessage"
	KafkaProxy_GetTopicInfo_FullMethodName   = "/kafka.v1.KafkaProxy/GetTopicInfo"
	KafkaProxy_ListTopics_FullMethodName     = "/kafka.v1.KafkaProxy/ListTopics"
)

// KafkaProxyClient is the client API for KafkaProxy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KafkaProxyClient interface {
	// Stream messages from a Kafka topic
	StreamTopic(ctx context.Context, in *StreamTopicRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[KafkaMessage], error)
	// Stream messages from multiple topics
	StreamTopics(ctx context.Context, in *StreamTopicsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[KafkaMessage], error)
	// Publish a message to a Kafka topic
	PublishMessage(ctx context.Context, in *PublishMessageRequest, opts ...grpc.CallOption) (*PublishMessageResponse, error)
	// Get topic metadata
	GetTopicInfo(ctx context.Context, in *GetTopicInfoRequest, opts ...grpc.CallOption) (*TopicInfo, error)
	// List available topics
	ListTopics(ctx context.Context, in *ListTopicsRequest, opts ...grpc.CallOption) (*ListTopicsResponse, error)
}

type kafkaProxyClient struct {
	cc grpc.ClientConnInterface
}

func NewKafkaProxyClient(cc grpc.ClientConnInterface) KafkaProxyClient {
	return &kafkaProxyClient{cc}
}

func (c *kafkaProxyClient) StreamTopic(ctx context.Context, in *StreamTopicRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[KafkaMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &KafkaProxy_ServiceDesc.Streams[0], KafkaProxy_StreamTopic_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamTopicRequest, KafkaMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KafkaProxy_StreamTopicClient = grpc.ServerStreamingClient[KafkaMessage]

func (c *kafkaProxyClient) StreamTopics(ctx context.Context, in *StreamTopicsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[KafkaMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &KafkaProxy_ServiceDesc.Streams[1], KafkaProxy_StreamTopics_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamTopicsRequest, KafkaMessage]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KafkaProxy_StreamTopicsClient = grpc.ServerStreamingClient[KafkaMessage]

func (c *kafkaProxyClient) PublishMessage(ctx context.Context, in *PublishMessageRequest, opts ...grpc.CallOption) (*PublishMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishMessageResponse)
	err := c.cc.Invoke(ctx, KafkaProxy_PublishMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaProxyClient) GetTopicInfo(ctx context.Context, in *GetTopicInfoRequest, opts ...grpc.CallOption) (*TopicInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TopicInfo)
	err := c.cc.Invoke(ctx, KafkaProxy_GetTopicInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *kafkaProxyClient) ListTopics(ctx context.Context, in *ListTopicsRequest, opts ...grpc.CallOption) (*ListTopicsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTopicsResponse)
	err := c.cc.Invoke(ctx, KafkaProxy_ListTopics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KafkaProxyServer is the server API for KafkaProxy service.
// All implementations must embed UnimplementedKafkaProxyServer
// for forward compatibility.
type KafkaProxyServer interface {
	// Stream messages from a Kafka topic
	StreamTopic(*StreamTopicRequest, grpc.ServerStreamingServer[KafkaMessage]) error
	// Stream messages from multiple topics
	StreamTopics(*StreamTopicsRequest, grpc.ServerStreamingServer[KafkaMessage]) error
	// Publish a message to a Kafka topic
	PublishMessage(context.Context, *PublishMessageRequest) (*PublishMessageResponse, error)
	// Get topic metadata
	GetTopicInfo(context.Context, *GetTopicInfoRequest) (*TopicInfo, error)
	// List available topics
	ListTopics(context.Context, *ListTopicsRequest) (*ListTopicsResponse, error)
	mustEmbedUnimplementedKafkaProxyServer()
}

// UnimplementedKafkaProxyServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKafkaProxyServer struct{}

func (UnimplementedKafkaProxyServer) StreamTopic(*StreamTopicRequest, grpc.ServerStreamingServer[KafkaMessage]) error {
	return status.Errorf(codes.Unimplemented, "method StreamTopic not implemented")
}
func (UnimplementedKafkaProxyServer) StreamTopics(*StreamTopicsRequest, grpc.ServerStreamingServer[KafkaMessage]) error {
	return status.Errorf(codes.Unimplemented, "method StreamTopics not implemented")
}
func (UnimplementedKafkaProxyServer) PublishMessage(context.Context, *PublishMessageRequest) (*PublishMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishMessage not implemented")
}
func (UnimplementedKafkaProxyServer) GetTopicInfo(context.Context, *GetTopicInfoRequest) (*TopicInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopicInfo not implemented")
}
func (UnimplementedKafkaProxyServer) ListTopics(context.Context, *ListTopicsRequest) (*ListTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTopics not implemented")
}
func (UnimplementedKafkaProxyServer) mustEmbedUnimplementedKafkaProxyServer() {}
func (UnimplementedKafkaProxyServer) testEmbeddedByValue()                    {}

// UnsafeKafkaProxyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KafkaProxyServer will
// result in compilation errors.
type UnsafeKafkaProxyServer interface {
	mustEmbedUnimplementedKafkaProxyServer()
}

func RegisterKafkaProxyServer(s grpc.ServiceRegistrar, srv KafkaProxyServer) {
	// If the following call pancis, it indicates UnimplementedKafkaProxyServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KafkaProxy_ServiceDesc, srv)
}

func _KafkaProxy_StreamTopic_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTopicRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KafkaProxyServer).StreamTopic(m, &grpc.GenericServerStream[StreamTopicRequest, KafkaMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KafkaProxy_StreamTopicServer = grpc.ServerStreamingServer[KafkaMessage]

func _KafkaProxy_StreamTopics_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTopicsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(KafkaProxyServer).StreamTopics(m, &grpc.GenericServerStream[StreamTopicsRequest, KafkaMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type KafkaProxy_StreamTopicsServer = grpc.ServerStreamingServer[KafkaMessage]

func _KafkaProxy_PublishMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaProxyServer).PublishMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KafkaProxy_PublishMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaProxyServer).PublishMessage(ctx, req.(*PublishMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaProxy_GetTopicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopicInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaProxyServer).GetTopicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KafkaProxy_GetTopicInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaProxyServer).GetTopicInfo(ctx, req.(*GetTopicInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KafkaProxy_ListTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KafkaProxyServer).ListTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KafkaProxy_ListTopics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KafkaProxyServer).ListTopics(ctx, req.(*ListTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KafkaProxy_ServiceDesc is the grpc.ServiceDesc for KafkaProxy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KafkaProxy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kafka.v1.KafkaProxy",
	HandlerType: (*KafkaProxyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishMessage",
			Handler:    _KafkaProxy_PublishMessage_Handler,
		},
		{
			MethodName: "GetTopicInfo",
			Handler:    _KafkaProxy_GetTopicInfo_Handler,
		},
		{
			MethodName: "ListTopics",
			Handler:    _KafkaProxy_ListTopics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamTopic",
			Handler:       _KafkaProxy_StreamTopic_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamTopics",
			Handler:       _KafkaProxy_StreamTopics_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/kafka/kafka.proto",
}
