// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: api/proto/maximus/maximus.proto

package maximus

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MaximusOrchestrator_SubmitDecision_FullMethodName       = "/maximus.v1.MaximusOrchestrator/SubmitDecision"
	MaximusOrchestrator_GetDecision_FullMethodName          = "/maximus.v1.MaximusOrchestrator/GetDecision"
	MaximusOrchestrator_ListDecisions_FullMethodName        = "/maximus.v1.MaximusOrchestrator/ListDecisions"
	MaximusOrchestrator_UpdateDecisionStatus_FullMethodName = "/maximus.v1.MaximusOrchestrator/UpdateDecisionStatus"
	MaximusOrchestrator_DeleteDecision_FullMethodName       = "/maximus.v1.MaximusOrchestrator/DeleteDecision"
	MaximusOrchestrator_WatchDecision_FullMethodName        = "/maximus.v1.MaximusOrchestrator/WatchDecision"
	MaximusOrchestrator_StreamAllEvents_FullMethodName      = "/maximus.v1.MaximusOrchestrator/StreamAllEvents"
	MaximusOrchestrator_GetGovernanceMetrics_FullMethodName = "/maximus.v1.MaximusOrchestrator/GetGovernanceMetrics"
	MaximusOrchestrator_GetServiceHealth_FullMethodName     = "/maximus.v1.MaximusOrchestrator/GetServiceHealth"
	MaximusOrchestrator_BatchSubmitDecisions_FullMethodName = "/maximus.v1.MaximusOrchestrator/BatchSubmitDecisions"
)

// MaximusOrchestratorClient is the client API for MaximusOrchestrator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaximusOrchestratorClient interface {
	// Decision Management
	SubmitDecision(ctx context.Context, in *SubmitDecisionRequest, opts ...grpc.CallOption) (*SubmitDecisionResponse, error)
	GetDecision(ctx context.Context, in *GetDecisionRequest, opts ...grpc.CallOption) (*Decision, error)
	ListDecisions(ctx context.Context, in *ListDecisionsRequest, opts ...grpc.CallOption) (*ListDecisionsResponse, error)
	UpdateDecisionStatus(ctx context.Context, in *UpdateDecisionStatusRequest, opts ...grpc.CallOption) (*Decision, error)
	DeleteDecision(ctx context.Context, in *DeleteDecisionRequest, opts ...grpc.CallOption) (*DeleteDecisionResponse, error)
	// Real-time Events (Server Streaming)
	WatchDecision(ctx context.Context, in *WatchDecisionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DecisionEvent], error)
	StreamAllEvents(ctx context.Context, in *StreamEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DecisionEvent], error)
	// Governance Metrics
	GetGovernanceMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GovernanceMetrics, error)
	GetServiceHealth(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	// Batch Operations
	BatchSubmitDecisions(ctx context.Context, in *BatchSubmitRequest, opts ...grpc.CallOption) (*BatchSubmitResponse, error)
}

type maximusOrchestratorClient struct {
	cc grpc.ClientConnInterface
}

func NewMaximusOrchestratorClient(cc grpc.ClientConnInterface) MaximusOrchestratorClient {
	return &maximusOrchestratorClient{cc}
}

func (c *maximusOrchestratorClient) SubmitDecision(ctx context.Context, in *SubmitDecisionRequest, opts ...grpc.CallOption) (*SubmitDecisionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitDecisionResponse)
	err := c.cc.Invoke(ctx, MaximusOrchestrator_SubmitDecision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maximusOrchestratorClient) GetDecision(ctx context.Context, in *GetDecisionRequest, opts ...grpc.CallOption) (*Decision, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Decision)
	err := c.cc.Invoke(ctx, MaximusOrchestrator_GetDecision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maximusOrchestratorClient) ListDecisions(ctx context.Context, in *ListDecisionsRequest, opts ...grpc.CallOption) (*ListDecisionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDecisionsResponse)
	err := c.cc.Invoke(ctx, MaximusOrchestrator_ListDecisions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maximusOrchestratorClient) UpdateDecisionStatus(ctx context.Context, in *UpdateDecisionStatusRequest, opts ...grpc.CallOption) (*Decision, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Decision)
	err := c.cc.Invoke(ctx, MaximusOrchestrator_UpdateDecisionStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maximusOrchestratorClient) DeleteDecision(ctx context.Context, in *DeleteDecisionRequest, opts ...grpc.CallOption) (*DeleteDecisionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDecisionResponse)
	err := c.cc.Invoke(ctx, MaximusOrchestrator_DeleteDecision_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maximusOrchestratorClient) WatchDecision(ctx context.Context, in *WatchDecisionRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DecisionEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MaximusOrchestrator_ServiceDesc.Streams[0], MaximusOrchestrator_WatchDecision_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[WatchDecisionRequest, DecisionEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MaximusOrchestrator_WatchDecisionClient = grpc.ServerStreamingClient[DecisionEvent]

func (c *maximusOrchestratorClient) StreamAllEvents(ctx context.Context, in *StreamEventsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DecisionEvent], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &MaximusOrchestrator_ServiceDesc.Streams[1], MaximusOrchestrator_StreamAllEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamEventsRequest, DecisionEvent]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MaximusOrchestrator_StreamAllEventsClient = grpc.ServerStreamingClient[DecisionEvent]

func (c *maximusOrchestratorClient) GetGovernanceMetrics(ctx context.Context, in *GetMetricsRequest, opts ...grpc.CallOption) (*GovernanceMetrics, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GovernanceMetrics)
	err := c.cc.Invoke(ctx, MaximusOrchestrator_GetGovernanceMetrics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maximusOrchestratorClient) GetServiceHealth(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, MaximusOrchestrator_GetServiceHealth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *maximusOrchestratorClient) BatchSubmitDecisions(ctx context.Context, in *BatchSubmitRequest, opts ...grpc.CallOption) (*BatchSubmitResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchSubmitResponse)
	err := c.cc.Invoke(ctx, MaximusOrchestrator_BatchSubmitDecisions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MaximusOrchestratorServer is the server API for MaximusOrchestrator service.
// All implementations must embed UnimplementedMaximusOrchestratorServer
// for forward compatibility.
type MaximusOrchestratorServer interface {
	// Decision Management
	SubmitDecision(context.Context, *SubmitDecisionRequest) (*SubmitDecisionResponse, error)
	GetDecision(context.Context, *GetDecisionRequest) (*Decision, error)
	ListDecisions(context.Context, *ListDecisionsRequest) (*ListDecisionsResponse, error)
	UpdateDecisionStatus(context.Context, *UpdateDecisionStatusRequest) (*Decision, error)
	DeleteDecision(context.Context, *DeleteDecisionRequest) (*DeleteDecisionResponse, error)
	// Real-time Events (Server Streaming)
	WatchDecision(*WatchDecisionRequest, grpc.ServerStreamingServer[DecisionEvent]) error
	StreamAllEvents(*StreamEventsRequest, grpc.ServerStreamingServer[DecisionEvent]) error
	// Governance Metrics
	GetGovernanceMetrics(context.Context, *GetMetricsRequest) (*GovernanceMetrics, error)
	GetServiceHealth(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	// Batch Operations
	BatchSubmitDecisions(context.Context, *BatchSubmitRequest) (*BatchSubmitResponse, error)
	mustEmbedUnimplementedMaximusOrchestratorServer()
}

// UnimplementedMaximusOrchestratorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMaximusOrchestratorServer struct{}

func (UnimplementedMaximusOrchestratorServer) SubmitDecision(context.Context, *SubmitDecisionRequest) (*SubmitDecisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitDecision not implemented")
}
func (UnimplementedMaximusOrchestratorServer) GetDecision(context.Context, *GetDecisionRequest) (*Decision, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDecision not implemented")
}
func (UnimplementedMaximusOrchestratorServer) ListDecisions(context.Context, *ListDecisionsRequest) (*ListDecisionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDecisions not implemented")
}
func (UnimplementedMaximusOrchestratorServer) UpdateDecisionStatus(context.Context, *UpdateDecisionStatusRequest) (*Decision, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDecisionStatus not implemented")
}
func (UnimplementedMaximusOrchestratorServer) DeleteDecision(context.Context, *DeleteDecisionRequest) (*DeleteDecisionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDecision not implemented")
}
func (UnimplementedMaximusOrchestratorServer) WatchDecision(*WatchDecisionRequest, grpc.ServerStreamingServer[DecisionEvent]) error {
	return status.Errorf(codes.Unimplemented, "method WatchDecision not implemented")
}
func (UnimplementedMaximusOrchestratorServer) StreamAllEvents(*StreamEventsRequest, grpc.ServerStreamingServer[DecisionEvent]) error {
	return status.Errorf(codes.Unimplemented, "method StreamAllEvents not implemented")
}
func (UnimplementedMaximusOrchestratorServer) GetGovernanceMetrics(context.Context, *GetMetricsRequest) (*GovernanceMetrics, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGovernanceMetrics not implemented")
}
func (UnimplementedMaximusOrchestratorServer) GetServiceHealth(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceHealth not implemented")
}
func (UnimplementedMaximusOrchestratorServer) BatchSubmitDecisions(context.Context, *BatchSubmitRequest) (*BatchSubmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchSubmitDecisions not implemented")
}
func (UnimplementedMaximusOrchestratorServer) mustEmbedUnimplementedMaximusOrchestratorServer() {}
func (UnimplementedMaximusOrchestratorServer) testEmbeddedByValue()                             {}

// UnsafeMaximusOrchestratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaximusOrchestratorServer will
// result in compilation errors.
type UnsafeMaximusOrchestratorServer interface {
	mustEmbedUnimplementedMaximusOrchestratorServer()
}

func RegisterMaximusOrchestratorServer(s grpc.ServiceRegistrar, srv MaximusOrchestratorServer) {
	// If the following call pancis, it indicates UnimplementedMaximusOrchestratorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MaximusOrchestrator_ServiceDesc, srv)
}

func _MaximusOrchestrator_SubmitDecision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitDecisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaximusOrchestratorServer).SubmitDecision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaximusOrchestrator_SubmitDecision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaximusOrchestratorServer).SubmitDecision(ctx, req.(*SubmitDecisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaximusOrchestrator_GetDecision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDecisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaximusOrchestratorServer).GetDecision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaximusOrchestrator_GetDecision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaximusOrchestratorServer).GetDecision(ctx, req.(*GetDecisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaximusOrchestrator_ListDecisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDecisionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaximusOrchestratorServer).ListDecisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaximusOrchestrator_ListDecisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaximusOrchestratorServer).ListDecisions(ctx, req.(*ListDecisionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaximusOrchestrator_UpdateDecisionStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDecisionStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaximusOrchestratorServer).UpdateDecisionStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaximusOrchestrator_UpdateDecisionStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaximusOrchestratorServer).UpdateDecisionStatus(ctx, req.(*UpdateDecisionStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaximusOrchestrator_DeleteDecision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDecisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaximusOrchestratorServer).DeleteDecision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaximusOrchestrator_DeleteDecision_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaximusOrchestratorServer).DeleteDecision(ctx, req.(*DeleteDecisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaximusOrchestrator_WatchDecision_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchDecisionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MaximusOrchestratorServer).WatchDecision(m, &grpc.GenericServerStream[WatchDecisionRequest, DecisionEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MaximusOrchestrator_WatchDecisionServer = grpc.ServerStreamingServer[DecisionEvent]

func _MaximusOrchestrator_StreamAllEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamEventsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MaximusOrchestratorServer).StreamAllEvents(m, &grpc.GenericServerStream[StreamEventsRequest, DecisionEvent]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type MaximusOrchestrator_StreamAllEventsServer = grpc.ServerStreamingServer[DecisionEvent]

func _MaximusOrchestrator_GetGovernanceMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaximusOrchestratorServer).GetGovernanceMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaximusOrchestrator_GetGovernanceMetrics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaximusOrchestratorServer).GetGovernanceMetrics(ctx, req.(*GetMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaximusOrchestrator_GetServiceHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaximusOrchestratorServer).GetServiceHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaximusOrchestrator_GetServiceHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaximusOrchestratorServer).GetServiceHealth(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaximusOrchestrator_BatchSubmitDecisions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchSubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaximusOrchestratorServer).BatchSubmitDecisions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaximusOrchestrator_BatchSubmitDecisions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaximusOrchestratorServer).BatchSubmitDecisions(ctx, req.(*BatchSubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MaximusOrchestrator_ServiceDesc is the grpc.ServiceDesc for MaximusOrchestrator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaximusOrchestrator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "maximus.v1.MaximusOrchestrator",
	HandlerType: (*MaximusOrchestratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitDecision",
			Handler:    _MaximusOrchestrator_SubmitDecision_Handler,
		},
		{
			MethodName: "GetDecision",
			Handler:    _MaximusOrchestrator_GetDecision_Handler,
		},
		{
			MethodName: "ListDecisions",
			Handler:    _MaximusOrchestrator_ListDecisions_Handler,
		},
		{
			MethodName: "UpdateDecisionStatus",
			Handler:    _MaximusOrchestrator_UpdateDecisionStatus_Handler,
		},
		{
			MethodName: "DeleteDecision",
			Handler:    _MaximusOrchestrator_DeleteDecision_Handler,
		},
		{
			MethodName: "GetGovernanceMetrics",
			Handler:    _MaximusOrchestrator_GetGovernanceMetrics_Handler,
		},
		{
			MethodName: "GetServiceHealth",
			Handler:    _MaximusOrchestrator_GetServiceHealth_Handler,
		},
		{
			MethodName: "BatchSubmitDecisions",
			Handler:    _MaximusOrchestrator_BatchSubmitDecisions_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchDecision",
			Handler:       _MaximusOrchestrator_WatchDecision_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamAllEvents",
			Handler:       _MaximusOrchestrator_StreamAllEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/maximus/maximus.proto",
}
