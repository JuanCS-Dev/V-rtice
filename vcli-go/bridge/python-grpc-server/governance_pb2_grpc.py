# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import governance_pb2 as governance__pb2

GRPC_GENERATED_VERSION = '1.68.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in governance_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class GovernanceServiceStub(object):
    """GovernanceService provides ethical AI decision review via Human-in-the-Loop
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HealthCheck = channel.unary_unary(
                '/vertice.governance.v1.GovernanceService/HealthCheck',
                request_serializer=governance__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=governance__pb2.HealthCheckResponse.FromString,
                _registered_method=True)
        self.CreateSession = channel.unary_unary(
                '/vertice.governance.v1.GovernanceService/CreateSession',
                request_serializer=governance__pb2.CreateSessionRequest.SerializeToString,
                response_deserializer=governance__pb2.CreateSessionResponse.FromString,
                _registered_method=True)
        self.CloseSession = channel.unary_unary(
                '/vertice.governance.v1.GovernanceService/CloseSession',
                request_serializer=governance__pb2.CloseSessionRequest.SerializeToString,
                response_deserializer=governance__pb2.CloseSessionResponse.FromString,
                _registered_method=True)
        self.ListPendingDecisions = channel.unary_unary(
                '/vertice.governance.v1.GovernanceService/ListPendingDecisions',
                request_serializer=governance__pb2.ListPendingDecisionsRequest.SerializeToString,
                response_deserializer=governance__pb2.ListPendingDecisionsResponse.FromString,
                _registered_method=True)
        self.GetDecision = channel.unary_unary(
                '/vertice.governance.v1.GovernanceService/GetDecision',
                request_serializer=governance__pb2.GetDecisionRequest.SerializeToString,
                response_deserializer=governance__pb2.GetDecisionResponse.FromString,
                _registered_method=True)
        self.ApproveDecision = channel.unary_unary(
                '/vertice.governance.v1.GovernanceService/ApproveDecision',
                request_serializer=governance__pb2.ApproveDecisionRequest.SerializeToString,
                response_deserializer=governance__pb2.ApproveDecisionResponse.FromString,
                _registered_method=True)
        self.RejectDecision = channel.unary_unary(
                '/vertice.governance.v1.GovernanceService/RejectDecision',
                request_serializer=governance__pb2.RejectDecisionRequest.SerializeToString,
                response_deserializer=governance__pb2.RejectDecisionResponse.FromString,
                _registered_method=True)
        self.EscalateDecision = channel.unary_unary(
                '/vertice.governance.v1.GovernanceService/EscalateDecision',
                request_serializer=governance__pb2.EscalateDecisionRequest.SerializeToString,
                response_deserializer=governance__pb2.EscalateDecisionResponse.FromString,
                _registered_method=True)
        self.GetMetrics = channel.unary_unary(
                '/vertice.governance.v1.GovernanceService/GetMetrics',
                request_serializer=governance__pb2.GetMetricsRequest.SerializeToString,
                response_deserializer=governance__pb2.GetMetricsResponse.FromString,
                _registered_method=True)
        self.GetSessionStats = channel.unary_unary(
                '/vertice.governance.v1.GovernanceService/GetSessionStats',
                request_serializer=governance__pb2.GetSessionStatsRequest.SerializeToString,
                response_deserializer=governance__pb2.GetSessionStatsResponse.FromString,
                _registered_method=True)
        self.StreamDecisions = channel.unary_stream(
                '/vertice.governance.v1.GovernanceService/StreamDecisions',
                request_serializer=governance__pb2.StreamDecisionsRequest.SerializeToString,
                response_deserializer=governance__pb2.DecisionEvent.FromString,
                _registered_method=True)
        self.StreamEvents = channel.unary_stream(
                '/vertice.governance.v1.GovernanceService/StreamEvents',
                request_serializer=governance__pb2.StreamEventsRequest.SerializeToString,
                response_deserializer=governance__pb2.GovernanceEvent.FromString,
                _registered_method=True)


class GovernanceServiceServicer(object):
    """GovernanceService provides ethical AI decision review via Human-in-the-Loop
    """

    def HealthCheck(self, request, context):
        """Health check
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateSession(self, request, context):
        """Session management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPendingDecisions(self, request, context):
        """Decision operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDecision(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ApproveDecision(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RejectDecision(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def EscalateDecision(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMetrics(self, request, context):
        """Metrics
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSessionStats(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamDecisions(self, request, context):
        """Real-time decision stream (Server-side streaming)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamEvents(self, request, context):
        """Real-time events stream (Server-side streaming)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GovernanceServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HealthCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.HealthCheck,
                    request_deserializer=governance__pb2.HealthCheckRequest.FromString,
                    response_serializer=governance__pb2.HealthCheckResponse.SerializeToString,
            ),
            'CreateSession': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateSession,
                    request_deserializer=governance__pb2.CreateSessionRequest.FromString,
                    response_serializer=governance__pb2.CreateSessionResponse.SerializeToString,
            ),
            'CloseSession': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseSession,
                    request_deserializer=governance__pb2.CloseSessionRequest.FromString,
                    response_serializer=governance__pb2.CloseSessionResponse.SerializeToString,
            ),
            'ListPendingDecisions': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPendingDecisions,
                    request_deserializer=governance__pb2.ListPendingDecisionsRequest.FromString,
                    response_serializer=governance__pb2.ListPendingDecisionsResponse.SerializeToString,
            ),
            'GetDecision': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDecision,
                    request_deserializer=governance__pb2.GetDecisionRequest.FromString,
                    response_serializer=governance__pb2.GetDecisionResponse.SerializeToString,
            ),
            'ApproveDecision': grpc.unary_unary_rpc_method_handler(
                    servicer.ApproveDecision,
                    request_deserializer=governance__pb2.ApproveDecisionRequest.FromString,
                    response_serializer=governance__pb2.ApproveDecisionResponse.SerializeToString,
            ),
            'RejectDecision': grpc.unary_unary_rpc_method_handler(
                    servicer.RejectDecision,
                    request_deserializer=governance__pb2.RejectDecisionRequest.FromString,
                    response_serializer=governance__pb2.RejectDecisionResponse.SerializeToString,
            ),
            'EscalateDecision': grpc.unary_unary_rpc_method_handler(
                    servicer.EscalateDecision,
                    request_deserializer=governance__pb2.EscalateDecisionRequest.FromString,
                    response_serializer=governance__pb2.EscalateDecisionResponse.SerializeToString,
            ),
            'GetMetrics': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMetrics,
                    request_deserializer=governance__pb2.GetMetricsRequest.FromString,
                    response_serializer=governance__pb2.GetMetricsResponse.SerializeToString,
            ),
            'GetSessionStats': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSessionStats,
                    request_deserializer=governance__pb2.GetSessionStatsRequest.FromString,
                    response_serializer=governance__pb2.GetSessionStatsResponse.SerializeToString,
            ),
            'StreamDecisions': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamDecisions,
                    request_deserializer=governance__pb2.StreamDecisionsRequest.FromString,
                    response_serializer=governance__pb2.DecisionEvent.SerializeToString,
            ),
            'StreamEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamEvents,
                    request_deserializer=governance__pb2.StreamEventsRequest.FromString,
                    response_serializer=governance__pb2.GovernanceEvent.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vertice.governance.v1.GovernanceService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('vertice.governance.v1.GovernanceService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class GovernanceService(object):
    """GovernanceService provides ethical AI decision review via Human-in-the-Loop
    """

    @staticmethod
    def HealthCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vertice.governance.v1.GovernanceService/HealthCheck',
            governance__pb2.HealthCheckRequest.SerializeToString,
            governance__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vertice.governance.v1.GovernanceService/CreateSession',
            governance__pb2.CreateSessionRequest.SerializeToString,
            governance__pb2.CreateSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CloseSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vertice.governance.v1.GovernanceService/CloseSession',
            governance__pb2.CloseSessionRequest.SerializeToString,
            governance__pb2.CloseSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListPendingDecisions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vertice.governance.v1.GovernanceService/ListPendingDecisions',
            governance__pb2.ListPendingDecisionsRequest.SerializeToString,
            governance__pb2.ListPendingDecisionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDecision(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vertice.governance.v1.GovernanceService/GetDecision',
            governance__pb2.GetDecisionRequest.SerializeToString,
            governance__pb2.GetDecisionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ApproveDecision(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vertice.governance.v1.GovernanceService/ApproveDecision',
            governance__pb2.ApproveDecisionRequest.SerializeToString,
            governance__pb2.ApproveDecisionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RejectDecision(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vertice.governance.v1.GovernanceService/RejectDecision',
            governance__pb2.RejectDecisionRequest.SerializeToString,
            governance__pb2.RejectDecisionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def EscalateDecision(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vertice.governance.v1.GovernanceService/EscalateDecision',
            governance__pb2.EscalateDecisionRequest.SerializeToString,
            governance__pb2.EscalateDecisionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMetrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vertice.governance.v1.GovernanceService/GetMetrics',
            governance__pb2.GetMetricsRequest.SerializeToString,
            governance__pb2.GetMetricsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSessionStats(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/vertice.governance.v1.GovernanceService/GetSessionStats',
            governance__pb2.GetSessionStatsRequest.SerializeToString,
            governance__pb2.GetSessionStatsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamDecisions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/vertice.governance.v1.GovernanceService/StreamDecisions',
            governance__pb2.StreamDecisionsRequest.SerializeToString,
            governance__pb2.DecisionEvent.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/vertice.governance.v1.GovernanceService/StreamEvents',
            governance__pb2.StreamEventsRequest.SerializeToString,
            governance__pb2.GovernanceEvent.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
