import click
import asyncio
from rich.console import Console
from rich.table import Table
from ..connectors.malware import MalwareConnector
from ..utils.output import print_json, spinner_task, print_error, print_table

console = Console()

@click.group()
def malware():
    """Malware analysis and detection."""
    pass

@malware.command()
@click.argument('file_path', type=click.Path(exists=True))
@click.option('--json', 'output_json_flag', is_flag=True, help='Output as JSON')
@click.option('--verbose', '-v', is_flag=True, help='Verbose output')
def analyze(file_path, output_json_flag, verbose):
    """Analyze a file for malware.

    Example:
        vertice malware analyze /path/to/suspicious.exe
    """
    async def _analyze():
        connector = MalwareConnector()
        try:
            if verbose:
                console.print("[dim]Checking Malware Analysis service status...[/dim]")
            with spinner_task("Checking Malware Analysis service status..."):
                if not await connector.health_check():
                    print_error("Malware Analysis service is offline")
                    return

            if verbose:
                console.print(f"[dim]Analyzing file: {file_path}...[/dim]")
            with spinner_task(f"Analyzing file: {file_path}..."):
                result = await connector.scan_file(file_path)

            if output_json_flag:
                print_json(result)
            else:
                if result:
                    console.print(f"[bold green]Malware Analysis Result for {file_path}:[/bold green]")
                    table_data = []
                    for key, value in result.items():
                        table_data.append({"Field": key, "Value": str(value)})
                    print_table(table_data)
                else:
                    console.print(f"[yellow]No malware analysis result for {file_path}.[/yellow]")

        except Exception as e:
            print_error(f"An error occurred: {e}")
        finally:
            await connector.close()

    asyncio.run(_analyze())

@malware.command()
@click.argument('file_path', type=click.Path(exists=True))
@click.option('--json', 'output_json_flag', is_flag=True, help='Output as JSON')
@click.option('--verbose', '-v', is_flag=True, help='Verbose output')
def yara(file_path, output_json_flag, verbose):
    """Perform a YARA scan on a file.

    Example:
        vertice malware yara /path/to/suspicious.exe
    """
    async def _yara():
        connector = MalwareConnector()
        try:
            if verbose:
                console.print("[dim]Checking Malware Analysis service status...[/dim]")
            with spinner_task("Checking Malware Analysis service status..."):
                if not await connector.health_check():
                    print_error("Malware Analysis service is offline")
                    return

            if verbose:
                console.print(f"[dim]Performing YARA scan on file: {file_path}...[/dim]")
            with spinner_task(f"Performing YARA scan on file: {file_path}..."):
                # Assuming a YARA scan endpoint
                result = await connector._post("/api/malware/yara", json={"file_path": file_path}) # Using _post directly for now

            if output_json_flag:
                print_json(result)
            else:
                if result:
                    console.print(f"[bold green]YARA Scan Result for {file_path}:[/bold green]")
                    table_data = []
                    for key, value in result.items():
                        table_data.append({"Field": key, "Value": str(value)})
                    print_table(table_data)
                else:
                    console.print(f"[yellow]No YARA scan results for {file_path}.[/yellow]")

        except Exception as e:
            print_error(f"An error occurred: {e}")
        finally:
            await connector.close()

    asyncio.run(_yara())

@malware.command()
@click.argument('hash_value')
@click.option('--json', 'output_json_flag', is_flag=True, help='Output as JSON')
@click.option('--verbose', '-v', is_flag=True, help='Verbose output')
def hash(hash_value, output_json_flag, verbose):
    """Lookup malware by hash value.

    Example:
        vertice malware hash <md5_hash>
    """
    async def _hash():
        connector = MalwareConnector()
        try:
            if verbose:
                console.print("[dim]Checking Malware Analysis service status...[/dim]")
            with spinner_task("Checking Malware Analysis service status..."):
                if not await connector.health_check():
                    print_error("Malware Analysis service is offline")
                    return

            if verbose:
                console.print(f"[dim]Looking up hash: {hash_value}...[/dim]")
            with spinner_task(f"Looking up hash: {hash_value}..."):
                # Assuming a hash lookup endpoint
                result = await connector._post("/api/malware/hash", json={"hash": hash_value}) # Using _post directly for now

            if output_json_flag:
                print_json(result)
            else:
                if result:
                    console.print(f"[bold green]Malware Hash Lookup Result for {hash_value}:[/bold green]")
                    table_data = []
                    for key, value in result.items():
                        table_data.append({"Field": key, "Value": str(value)})
                    print_table(table_data)
                else:
                    console.print(f"[yellow]No malware found for hash: {hash_value}.[/yellow]")

        except Exception as e:
            print_error(f"An error occurred: {e}")
        finally:
            await connector.close()

    asyncio.run(_hash())