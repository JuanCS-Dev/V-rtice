import typer
import asyncio
from rich.console import Console
from typing_extensions import Annotated
from ..connectors.malware import MalwareConnector
from ..utils.output import print_json, spinner_task, print_error, print_table
from ..utils.auth import require_auth

console = Console()

app = typer.Typer(
    name="malware",
    help="ðŸ¦  Malware analysis and detection operations",
    rich_markup_mode="rich"
)

@app.command()
def analyze(
    file_path: Annotated[str, typer.Argument(help="File path to analyze for malware")],
    json_output: Annotated[bool, typer.Option("--json", "-j", help="Output as JSON")] = False,
    verbose: Annotated[bool, typer.Option("--verbose", "-v", help="Verbose output")] = False
):
    """Analyze a file for malware.

    Example:
        vertice malware analyze /path/to/suspicious.exe
    """
    require_auth()

    async def _analyze():
        connector = MalwareConnector()
        try:
            if verbose:
                console.print("[dim]Checking Malware Analysis service...[/dim]")
            with spinner_task("Checking Malware Analysis service..."):
                if not await connector.health_check():
                    print_error("Malware Analysis service is offline")
                    return

            if verbose:
                console.print(f"[dim]Analyzing file: {file_path}...[/dim]")
            with spinner_task(f"Analyzing file: {file_path}..."):
                result = await connector.scan_file(file_path)

            if json_output:
                print_json(result)
            else:
                if result:
                    console.print(f"[bold green]Malware Analysis for {file_path}:[/bold green]")
                    print_table([{"Field": k, "Value": str(v)} for k, v in result.items()])
                else:
                    console.print(f"[yellow]No result for {file_path}.[/yellow]")

        except Exception as e:
            print_error(f"An error occurred: {e}")
        finally:
            await connector.close()

    asyncio.run(_analyze())

@app.command()
def yara(
    file_path: Annotated[str, typer.Argument(help="File to scan with YARA rules")],
    json_output: Annotated[bool, typer.Option("--json", "-j", help="Output as JSON")] = False
):
    """Scan file with YARA rules.

    Example:
        vertice malware yara /path/to/file
    """
    require_auth()

    console.print("[yellow]YARA scanning coming soon...[/yellow]")

@app.command()
def hash(
    hash_value: Annotated[str, typer.Argument(help="File hash to lookup")],
    json_output: Annotated[bool, typer.Option("--json", "-j", help="Output as JSON")] = False
):
    """Lookup file by hash.

    Example:
        vertice malware hash abc123def456
    """
    require_auth()

    console.print("[yellow]Hash lookup coming soon...[/yellow]")
