from .base import BaseConnector
from typing import Dict, Any, Optional
import httpx
import os


class MalwareConnector(BaseConnector):
    """Connector for the Malware Analysis Service."""

    def __init__(self, base_url: Optional[str] = None):
        """
        Initializes the MalwareConnector.

        Args:
            base_url (str, optional): The base URL of the service. Defaults to env var or localhost.
        """
        if base_url is None:
            base_url = os.getenv("MALWARE_SERVICE_URL", "http://localhost:8017")
        super().__init__(service_name="Malware Analysis", base_url=base_url)

    async def health_check(self) -> bool:
        """
        Checks if the Malware Analysis service is online and operational.

        Returns:
            bool: True if the service is healthy, False otherwise.
        """
        try:
            response = await self.client.get(f"{self.base_url}/")
            response.raise_for_status()
            data = response.json()
            return data.get("status") == "operational"
        except (httpx.RequestError, httpx.HTTPStatusError):
            return False

    async def scan_file(self, file_path: str) -> Optional[Dict[str, Any]]:
        """
        Submits a file to be scanned for malware.

        Args:
            file_path (str): The path to the file to be analyzed.

        Returns:
            Optional[Dict[str, Any]]: A dictionary containing the scan results, or None on failure.
        """
        # In a real scenario, you'd send the file content, not just the path.
        # For now, we'll simulate by sending the path.
        return await self._post("/api/malware/scan", data={"file_path": file_path})
