# vertice_cli/modules/cyber.py

import typer
import questionary
from rich.table import Table
from rich.panel import Panel
from ..utils.api_client import VerticeAPI
from ..utils import console, print_success, print_error, print_info, print_warning

app = typer.Typer(help="üõ°Ô∏è Cyber Security Module - Ferramentas de seguran√ßa ofensiva e defensiva")

@app.command()
def menu():
    """üõ°Ô∏è Menu interativo do m√≥dulo Cyber Security"""
    console.print(Panel.fit(
        "[bold cyan]üõ°Ô∏è V√âRTICE CYBER SECURITY MODULE[/bold cyan]\n"
        "[dim]Ferramentas avan√ßadas para an√°lise e testes de seguran√ßa[/dim]\n"
        "\n"
        "[yellow]Exemplos de uso:[/yellow]\n"
        "[dim]‚Ä¢ cyber ip-intel --target 8.8.8.8[/dim]\n"
        "[dim]‚Ä¢ cyber domain --domain google.com[/dim]\n"
        "[dim]‚Ä¢ cyber vuln-scan --target 192.168.1.1 --type quick[/dim]",
        style="cyan"
    ))

    choices = [
        "üåê IP Intelligence & Geolocation - An√°lise completa de endere√ßos IP",
        "üîç Domain Analysis - WHOIS, DNS, certificados SSL",
        "üéØ Vulnerability Scanner [OFENSIVO] - Descoberta de vulnerabilidades",
        "üé≠ Social Engineering Toolkit [OFENSIVO] - Simula√ß√£o de ataques",
        "üìö Ver exemplos e documenta√ß√£o",
        "üîô Voltar ao menu principal"
    ]

    choice = questionary.select(
        "Selecione uma ferramenta:",
        choices=choices
    ).ask()

    if "IP Intelligence" in choice:
        show_ip_help()
        ip_intel()
    elif "Domain Analysis" in choice:
        show_domain_help()
        domain_analysis()
    elif "Vulnerability Scanner" in choice:
        show_vuln_help()
        vuln_scanner()
    elif "Social Engineering" in choice:
        show_social_help()
        social_eng()
    elif "exemplos" in choice:
        show_examples()
    else:
        return

@app.command()
def ip_intel(target: str = typer.Option(None, "--target", "-t", help="IP para an√°lise")):
    """üåê An√°lise de IP Intelligence e Geolocaliza√ß√£o"""
    if not target:
        target = questionary.text("Digite o IP para an√°lise:").ask()

    print_info(f"Analisando IP: {target}")

    # TODO: Implementar chamada para API
    api = VerticeAPI()
    result = api.analyze_ip(target)

    if result:
        print_success("An√°lise conclu√≠da!")
        # TODO: Formatar e exibir resultados
    else:
        print_error("Falha na an√°lise do IP")

@app.command()
def domain_analysis(domain: str = typer.Option(None, "--domain", "-d", help="Dom√≠nio para an√°lise")):
    """üîç An√°lise completa de dom√≠nio"""
    if not domain:
        domain = questionary.text("Digite o dom√≠nio para an√°lise:").ask()

    print_info(f"Analisando dom√≠nio: {domain}")
    # TODO: Implementar

@app.command()
def vuln_scanner():
    """üéØ Vulnerability Scanner - FERRAMENTA OFENSIVA"""
    console.print(Panel.fit(
        "[bold red]‚ö†Ô∏è FERRAMENTA OFENSIVA ‚ö†Ô∏è[/bold red]\n"
        "[yellow]Uso autorizado apenas em sistemas pr√≥prios ou com permiss√£o expl√≠cita[/yellow]",
        style="red"
    ))

    confirm = questionary.confirm("Confirma que tem autoriza√ß√£o para usar esta ferramenta?").ask()
    if not confirm:
        print_warning("Opera√ß√£o cancelada pelo usu√°rio")
        return

    # TODO: Implementar vulnerability scanner
    print_info("Vulnerability Scanner - Em implementa√ß√£o")

@app.command()
def social_eng():
    """üé≠ Social Engineering Toolkit - FERRAMENTA OFENSIVA"""
    console.print(Panel.fit(
        "[bold red]‚ö†Ô∏è FERRAMENTA OFENSIVA ‚ö†Ô∏è[/bold red]\n"
        "[yellow]Uso autorizado apenas para treinamentos e testes internos[/yellow]",
        style="red"
    ))

    confirm = questionary.confirm("Confirma que tem autoriza√ß√£o para usar esta ferramenta?").ask()
    if not confirm:
        print_warning("Opera√ß√£o cancelada pelo usu√°rio")
        return

    # TODO: Implementar social engineering toolkit
    print_info("Social Engineering Toolkit - Em implementa√ß√£o")

# Fun√ß√µes de Help Detalhadas

def show_ip_help():
    """Mostra help detalhado para IP Intelligence"""
    help_content = Panel.fit(
        "[bold green]üåê IP INTELLIGENCE & GEOLOCATION[/bold green]\n\n"
        "[cyan]O que faz:[/cyan]\n"
        "Analisa endere√ßos IP fornecendo geolocaliza√ß√£o, informa√ß√µes do ISP,\n"
        "reputa√ß√£o de seguran√ßa, DNS reverso e detec√ß√£o de amea√ßas.\n\n"
        "[cyan]Exemplos pr√°ticos:[/cyan]\n"
        "[dim]cyber ip-intel --target 8.8.8.8[/dim]          # Analisa DNS p√∫blico do Google\n"
        "[dim]cyber ip-intel --target 1.1.1.1[/dim]          # Analisa DNS da Cloudflare\n"
        "[dim]cyber ip-intel --target 192.168.1.1[/dim]      # IP local (sem dados externos)\n\n"
        "[cyan]Informa√ß√µes retornadas:[/cyan]\n"
        "‚Ä¢ Localiza√ß√£o geogr√°fica (pa√≠s, regi√£o, cidade, coordenadas)\n"
        "‚Ä¢ Provedor de internet (ISP) e organiza√ß√£o\n"
        "‚Ä¢ N√∫mero e nome do ASN (Autonomous System)\n"
        "‚Ä¢ Registro PTR (DNS reverso)\n"
        "‚Ä¢ Score de reputa√ß√£o e categorias de amea√ßa\n"
        "‚Ä¢ Portas abertas e servi√ßos detectados\n\n"
        "[yellow]Dica:[/yellow] Use 'cyber my-ip' para analisar seu pr√≥prio IP p√∫blico",
        style="green"
    )
    console.print(help_content)

def show_domain_help():
    """Mostra help detalhado para Domain Analysis"""
    help_content = Panel.fit(
        "[bold blue]üîç DOMAIN ANALYSIS[/bold blue]\n\n"
        "[cyan]O que faz:[/cyan]\n"
        "An√°lise completa de dom√≠nios incluindo WHOIS, registros DNS,\n"
        "certificados SSL, subdom√≠nios e an√°lise de reputa√ß√£o.\n\n"
        "[cyan]Exemplos pr√°ticos:[/cyan]\n"
        "[dim]cyber domain --domain google.com[/dim]          # An√°lise do Google\n"
        "[dim]cyber domain --domain github.com[/dim]          # An√°lise do GitHub\n"
        "[dim]cyber domain --domain suspicious-site.com[/dim] # Site suspeito\n\n"
        "[cyan]Informa√ß√µes retornadas:[/cyan]\n"
        "‚Ä¢ Dados WHOIS (registrante, datas de cria√ß√£o/expira√ß√£o)\n"
        "‚Ä¢ Registros DNS (A, AAAA, MX, NS, TXT)\n"
        "‚Ä¢ Certificado SSL/TLS (emissor, validade, SAN)\n"
        "‚Ä¢ Subdom√≠nios descobertos\n"
        "‚Ä¢ An√°lise de reputa√ß√£o e classifica√ß√£o de seguran√ßa\n"
        "‚Ä¢ Tecnologias web detectadas",
        style="blue"
    )
    console.print(help_content)

def show_vuln_help():
    """Mostra help detalhado para Vulnerability Scanner"""
    help_content = Panel.fit(
        "[bold red]üéØ VULNERABILITY SCANNER [FERRAMENTA OFENSIVA][/bold red]\n\n"
        "[yellow]‚ö†Ô∏è AVISO IMPORTANTE:[/yellow]\n"
        "Esta ferramenta deve ser usada APENAS em sistemas pr√≥prios ou com\n"
        "autoriza√ß√£o expl√≠cita por escrito. Uso n√£o autorizado √© CRIME.\n\n"
        "[cyan]O que faz:[/cyan]\n"
        "Executa scans de portas, detecta servi√ßos e identifica\n"
        "vulnerabilidades conhecidas em sistemas remotos.\n\n"
        "[cyan]Tipos de scan dispon√≠veis:[/cyan]\n"
        "[dim]--type quick[/dim]       # Scan r√°pido (portas comuns)\n"
        "[dim]--type full[/dim]        # Scan completo (todas as portas)\n"
        "[dim]--type stealth[/dim]     # Scan silencioso (evita detec√ß√£o)\n"
        "[dim]--type aggressive[/dim]  # Scan agressivo (m√°xima informa√ß√£o)\n\n"
        "[cyan]Exemplos pr√°ticos:[/cyan]\n"
        "[dim]cyber vuln-scan --target 192.168.1.100 --type quick[/dim]\n"
        "[dim]cyber vuln-scan --target testphp.vulnweb.com --type full[/dim]\n\n"
        "[red]Uso respons√°vel:[/red] Sempre teste em ambientes controlados",
        style="red"
    )
    console.print(help_content)

def show_social_help():
    """Mostra help detalhado para Social Engineering Toolkit"""
    help_content = Panel.fit(
        "[bold magenta]üé≠ SOCIAL ENGINEERING TOOLKIT [FERRAMENTA OFENSIVA][/bold magenta]\n\n"
        "[yellow]‚ö†Ô∏è AVISO IMPORTANTE:[/yellow]\n"
        "Esta ferramenta deve ser usada APENAS para treinamentos\n"
        "internos de conscientiza√ß√£o em seguran√ßa.\n\n"
        "[cyan]O que faz:[/cyan]\n"
        "Cria campanhas de phishing simuladas para treinar funcion√°rios\n"
        "e testa a resist√™ncia organizacional a ataques sociais.\n\n"
        "[cyan]Funcionalidades:[/cyan]\n"
        "‚Ä¢ Templates de email de phishing personaliz√°veis\n"
        "‚Ä¢ Landing pages falsas para coleta de credenciais\n"
        "‚Ä¢ Campanhas de conscientiza√ß√£o em seguran√ßa\n"
        "‚Ä¢ Analytics detalhados de campanhas\n"
        "‚Ä¢ Treinamento interativo p√≥s-teste\n\n"
        "[cyan]Exemplos de uso √©tico:[/cyan]\n"
        "[dim]‚Ä¢ Testes de conscientiza√ß√£o em TI corporativo[/dim]\n"
        "[dim]‚Ä¢ Treinamento de equipes de seguran√ßa[/dim]\n"
        "[dim]‚Ä¢ Simula√ß√µes de Red Team autorizadas[/dim]\n\n"
        "[red]Uso respons√°vel:[/red] Sempre com consentimento e documenta√ß√£o",
        style="magenta"
    )
    console.print(help_content)

def show_examples():
    """Mostra exemplos pr√°ticos completos"""
    examples_content = Panel.fit(
        "[bold yellow]üìö EXEMPLOS PR√ÅTICOS DO M√ìDULO CYBER[/bold yellow]\n\n"
        "[green]1. Investiga√ß√£o de IP Suspeito:[/green]\n"
        "[dim]cyber ip-intel --target 185.220.101.1[/dim]\n"
        "[dim]# Analisa IP conhecido por atividade suspeita[/dim]\n\n"
        "[green]2. Auditoria de Dom√≠nio Corporativo:[/green]\n"
        "[dim]cyber domain --domain minha-empresa.com[/dim]\n"
        "[dim]# Verifica configura√ß√µes DNS e certificados[/dim]\n\n"
        "[green]3. Pentest Autorizado:[/green]\n"
        "[dim]cyber vuln-scan --target 10.0.0.0/24 --type stealth[/dim]\n"
        "[dim]# Scan de rede interna (com autoriza√ß√£o)[/dim]\n\n"
        "[green]4. Treinamento de Phishing:[/green]\n"
        "[dim]cyber social-eng --template it-support --targets equipe-ti.txt[/dim]\n"
        "[dim]# Campanha educativa para equipe de TI[/dim]\n\n"
        "[green]5. An√°lise do Pr√≥prio IP:[/green]\n"
        "[dim]cyber my-ip[/dim]\n"
        "[dim]# Detecta e analisa seu IP p√∫blico atual[/dim]\n\n"
        "[yellow]Dica Pro:[/yellow] Use '--help' em qualquer comando para op√ß√µes avan√ßadas",
        style="yellow"
    )
    console.print(examples_content)

if __name__ == "__main__":
    app()